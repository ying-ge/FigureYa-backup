Starting R package installation...
===========================================

Installing CRAN packages...
Installing CRAN package: pec 
Installing package into ‘/home/runner/work/_temp/Library’
(as ‘lib’ is unspecified)
also installing the dependencies ‘libcoin’, ‘diagram’, ‘polspline’, ‘mets’, ‘Publish’, ‘ranger’, ‘glmnet’, ‘progressr’, ‘SQUAREM’, ‘modeltools’, ‘strucchange’, ‘coin’, ‘prodlim’, ‘rms’, ‘riskRegression’, ‘lava’, ‘timereg’, ‘party’

trying URL 'https://cloud.r-project.org/src/contrib/libcoin_1.0-10.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/diagram_1.6.5.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/polspline_1.1.25.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/mets_1.3.7.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/Publish_2025.07.24.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/ranger_0.17.0.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/glmnet_4.1-10.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/progressr_0.16.0.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/SQUAREM_2021.1.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/modeltools_0.2-24.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/strucchange_1.5-4.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/coin_1.4-3.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/prodlim_2025.04.28.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/rms_8.0-0.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/riskRegression_2025.09.17.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/lava_1.8.1.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/timereg_2.0.7.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/party_1.3-18.tar.gz'
trying URL 'https://cloud.r-project.org/src/contrib/pec_2025.06.24.tar.gz'
* installing *source* package ‘libcoin’ ...
** this is package ‘libcoin’ version ‘1.0-10’
** package ‘libcoin’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c libcoin-init.c -o libcoin-init.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c libcoin.c -o libcoin.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o libcoin.so libcoin-init.o libcoin.o -llapack -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-libcoin/00new/libcoin/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (libcoin)
* installing *source* package ‘diagram’ ...
** this is package ‘diagram’ version ‘1.6.5’
** package ‘diagram’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
*** moving datasets to lazyload DB
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (diagram)
* installing *source* package ‘polspline’ ...
** this is package ‘polspline’ version ‘1.1.25’
** package ‘polspline’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gfortran  -fpic  -g -O2  -c allpack.f -o allpack.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c hareall.c -o hareall.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c heftall.c -o heftall.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c lsdall.c -o lsdall.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c lspecall.c -o lspecall.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c nlsd.c -o nlsd.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c polyall.c -o polyall.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c polymars.c -o polymars.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c registerDynamicSymbol.c -o registerDynamicSymbol.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o polspline.so allpack.o hareall.o heftall.o lsdall.o lspecall.o nlsd.o polyall.o polymars.o registerDynamicSymbol.o -lblas -lgfortran -lm -lquadmath -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-polspline/00new/polspline/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (polspline)
* installing *source* package ‘ranger’ ...
** this is package ‘ranger’ version ‘0.17.0’
** package ‘ranger’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c AAA_check_cpp14.cpp -o AAA_check_cpp14.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c Data.cpp -o Data.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c DataSparse.cpp -o DataSparse.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from DataSparse.h:31,
                 from DataSparse.cpp:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c Forest.cpp -o Forest.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c ForestClassification.cpp -o ForestClassification.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c ForestProbability.cpp -o ForestProbability.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c ForestRegression.cpp -o ForestRegression.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c ForestSurvival.cpp -o ForestSurvival.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c RcppExports.cpp -o RcppExports.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:5:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::SparseMatrix<double, 0, int>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:1505:8:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:77:20:   required from ‘void Eigen::internal::assign_sparse_to_sparse(DstXprType&, const SrcXprType&) [with DstXprType = Eigen::SparseMatrix<double, 0, int>; SrcXprType = Eigen::SparseMatrix<double, 0, int>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:132:28:   required from ‘static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Sparse2Sparse>::run(DstXprType&, const SrcXprType&, const Eigen::internal::assign_op<typename DstXprType::Scalar, typename SrcXprType::Scalar>&) [with DstXprType = Eigen::SparseMatrix<double, 0, int>; SrcXprType = Eigen::SparseMatrix<double, 0, int>; Functor = Eigen::internal::assign_op<double, double>; typename DstXprType::Scalar = double; typename SrcXprType::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:890:49:   required from ‘void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::SparseMatrix<double, 0, int>; Src = Eigen::SparseMatrix<double, 0, int>; Func = assign_op<double, double>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:917:27:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:713:13:   required from ‘Eigen::SparseMatrix<_Scalar, _Flags, _StorageIndex>::SparseMatrix(const Eigen::SparseMatrix<_Scalar, _Flags, _StorageIndex>&) [with _Scalar = double; int _Options = 0; _StorageIndex = int]’
/home/runner/work/_temp/Library/RcppEigen/include/RcppEigenWrap.h:387:24:   required from ‘Eigen::SparseMatrix<Scalar> Rcpp::traits::Exporter<Eigen::SparseMatrix<Scalar> >::get() [with T = double]’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/as.h:89:32:   required from ‘T Rcpp::internal::as(SEXP, Rcpp::traits::r_type_generic_tag) [with T = Eigen::SparseMatrix<double, 0, int>; SEXP = SEXPREC*]’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/as.h:152:31:   required from ‘T Rcpp::as(SEXP) [with T = Eigen::SparseMatrix<double, 0, int>; SEXP = SEXPREC*]’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/InputParameter.h:46:54:   required from ‘Rcpp::ReferenceInputParameter<T>::ReferenceInputParameter(SEXP) [with T = Eigen::SparseMatrix<double, 0, int>; SEXP = SEXPREC*]’
RcppExports.cpp:59:94:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c Tree.cpp -o Tree.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c TreeClassification.cpp -o TreeClassification.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c TreeProbability.cpp -o TreeProbability.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c TreeRegression.cpp -o TreeRegression.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c TreeSurvival.cpp -o TreeSurvival.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c rangerCpp.cpp -o rangerCpp.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from rangerCpp.cpp:28:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c utility.cpp -o utility.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -DR_BUILD -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppEigen/include' -I/usr/local/include    -fpic  -g -O2   -c utilityRcpp.cpp -o utilityRcpp.o
g++ -std=gnu++17 -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o ranger.so AAA_check_cpp14.o Data.o DataSparse.o Forest.o ForestClassification.o ForestProbability.o ForestRegression.o ForestSurvival.o RcppExports.o Tree.o TreeClassification.o TreeProbability.o TreeRegression.o TreeSurvival.o rangerCpp.o utility.o utilityRcpp.o -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-ranger/00new/ranger/libs
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (ranger)
* installing *source* package ‘glmnet’ ...
** this is package ‘glmnet’ version ‘4.1-10’
** package ‘glmnet’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using C++ compiler: ‘g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using C++17
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c RcppExports.cpp -o RcppExports.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from RcppExports.cpp:4:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:24:49:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
RcppExports.cpp:26:87:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:24:49:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
RcppExports.cpp:47:170:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/Rcpp/include/Rcpp/InputParameter.h:64:11:   required from ‘class Rcpp::ConstInputParameter<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
RcppExports.cpp:59:98:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gfortran  -fpic  -g -O2  -c coxnet5dpclean.f -o coxnet5dpclean.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c elnet_exp.cpp -o elnet_exp.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from elnet_exp.cpp:2:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:24:49:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
elnet_exp.cpp:44:5:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
elnet_exp.cpp:98:5:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:27:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:437:43:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<Eigen::Matrix<double, -1, -1>, 1, -1, false, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:30:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:33:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:39:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:243:39:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/base.hpp:12:36:   required from ‘void glmnetpp::ElnetDriverBase::normalize_penalty(VType&&) const [with VType = Eigen::Matrix<double, -1, 1>&]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:402:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Matrix<double, -1, -1>, -1, 1, true, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:34:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/VectorBlock.h:56:47:   required from ‘class Eigen::VectorBlock<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1>’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:16:42:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:36:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:33:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_sqrt_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:37:42:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:52:26:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:56:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:74:41:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:48:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:88:35:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Matrix<double, -1, -1>; Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:430:16:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:20:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator*=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:433:31:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:29:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:339:55:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:44:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:53:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:276:41:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 1, -1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:41:67:   required from ‘Derived& Eigen::DenseBase<Derived>::operator/=(const Scalar&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:294:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:48:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:57:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:399:49:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:277:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1043:41:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:108:50:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:48:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/BooleanRedux.h:108:50:   required from ‘bool Eigen::DenseBase<Derived>::any() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/chkvars.hpp:17:48:   required from ‘static void glmnetpp::Chkvars::eval(const XType&, JUType&) [with XType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:413:28:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:40:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:40:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:282:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:438:43:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true, false>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; Derived = Eigen::Block<const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:338:36:   required from ‘static void glmnetpp::SpStandardize::eval(const XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:293:37:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:43:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:40:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:24:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:343:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:344:29:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:149:16:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:59:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:96:31:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:159:16:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:63:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:41:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:473:36:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:33:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:45:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:46:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:40:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Matrix<double, -1, 1>; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Matrix<double, -1, 1>; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Matrix<double, -1, 1> >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:296:29:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:176:22:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:57:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:34:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:57:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:45:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:57:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:29:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:36:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:31:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:200:52:   required from ‘void glmnetpp::ElnetPathBinomialTwoClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:16:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:28:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:406:34:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:27:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, 1, -1, 1, 1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, 1, -1, 1, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, 1, -1, 1, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/SelfCwiseBinaryOp.h:34:67:   required from ‘Derived& Eigen::ArrayBase<Derived>::operator-=(const Scalar&) [with Derived = Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:408:30:   required from ‘void glmnetpp::ElnetPathBinomialMultiClassBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:47:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:70:50:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:82:44:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:88:40:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:86:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:58:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:108:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:73:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:33:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:185:86:   required from ‘auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::prediction() const [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_base.hpp:140:40:   required from ‘void glmnetpp::ElnetPathPoissonBase::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:225:33:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::process_path_fit(const FitPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPointType = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:77:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:46:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:53:40:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:22:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:38:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_abs_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:62:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, YType&, const WType&, const XType&, const XMType&, const XSType&, const XVType&, const VPType&, const CLType&, const JUType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:29:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:88:41:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:47:   required from ‘static typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::compute_xv(const XType&, const WType&) [with XType = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:71:52:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, const GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:336:22:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:48:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:340:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:22:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:31:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_opposite_op<double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:37:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:23:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:35:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:54:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:404:47:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:27:   required from ‘static auto glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::azero(const YType&, const GType&, const QType&) [with YType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; QType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:348:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:350:30:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:50:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:24:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, const GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:352:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:356:49:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:51:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:356:59:   required from ‘void glmnetpp::ElnetPointInternalBinomialTwoClassBase<ValueType, IndexType, BoolType>::construct(XVFType, GradFType) [with XVFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:70:24:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, const GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:46:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:55:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:73:51:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ValueType, IndexType, BoolType>::ElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const VPType&, const CLType&, const JUType&, ISType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Matrix<double, -1, -1>; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; ISType = Eigen::Matrix<int, -1, 1>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1402:44:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t, const WType&) const [with WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalStaticBase<double, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:76:62:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, const GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:56:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:44:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1409:68:   required from ‘typename glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t, const RType&, const VType&) const [with RType = Eigen::Matrix<double, -1, 1>; VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalStaticBase<double, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:77:64:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, bool, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, const GType&, typename base_t::value_t&, const XType&, const YType&, const WType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:130:48:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:46:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:163:38:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:60:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:81:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::ElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Matrix<double, -1, -1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:136:54:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:28:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:34:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:138:64:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:139:71:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:63, auto:64)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_naive.hpp:137:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:161:81:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>::construct<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda()>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>)::<lambda(auto:59, auto:60)>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/poisson_base.hpp:160:37:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:168:65:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:46:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:34:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:40:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:66:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:46:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:170:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:78:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:181:46:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:171:84:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::update_irls<glmnetpp::ElnetPathBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBase::PointConfigPack<double, int>&)::<lambda(auto:68, auto:69)>, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:169:31:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:125:43:   required from ‘static void glmnetpp::Standardize::eval(XType&, YType&, WType&, bool, bool, const JUType&, GType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; GType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:422:40:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:46:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:110:23:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::norm() const [with Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:46:24:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:87:23:   required from ‘static void glmnetpp::Standardize1::eval(XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:270:59:   required from ‘static void glmnetpp::SpStandardize1::eval(const XType&, YType&, WType&, bool, bool, const JUType&, XMType&, XSType&, ValueType&, ValueType&, XVType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; ValueType = double; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:427:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:438:43:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:565:53:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:352:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IteratorBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:87:46:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianNaiveBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_naive.hpp:94:25:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_naive.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:180:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:523:63:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:525:41:   required from ‘static void glmnetpp::MultLStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&, XVType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:300:42:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:473:36:   required from ‘static void glmnetpp::LStandardize1::eval(XType&, const WType&, const JUType&, IntType, IntType, XMType&, XSType&) [with XType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; IntType = bool; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:303:36:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1043:41:   required from ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:69:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:57:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_NEQ>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, -1, 1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_base.hpp:180:69:   required from ‘glmnetpp::ElnetPathBinomialBase::state_t glmnetpp::ElnetPathBinomialTwoClassBase::process_point_fit(const FitPackType&, const PathConfigPackType&, const PointConfigPackType&, const ElnetPointType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PointConfigPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; glmnetpp::ElnetPathBinomialBase::state_t = glmnetpp::util::control_flow]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:71:57:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:65:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(typename base_t::index_t, RType&&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1166:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:589:22:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_cmp_op<double, double, Eigen::internal::cmp_EQ>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, -1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:32:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:39:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:45:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:660:54:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:46:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:56:7:   required from ‘class Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:661:34:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::kazero(AZType&&) [with AZType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:600:46:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:65:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:603:47:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:79:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:605:60:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:55:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:608:65:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:37:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:44:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:26:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1206:39:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1207:57:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:47:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:77:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1234:83:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:53:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:79:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1238:85:   required from ‘typename glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::base_t::state_t glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::update_irls(typename base_t::value_t, UpdatePredictionFType, InitResidFType, ComputeAbsGradFType) [with UpdatePredictionFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>; InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>; ComputeAbsGradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:109:35:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:113:48:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(auto:43&)> [with auto:43 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1381:42:   required from ‘void glmnetpp::SpElnetPointInternalBinomialBase<ValueType, IndexType, BoolType>::update_with_new_weights(typename base_t::index_t, const VType&, typename base_t::index_t, typename base_t::value_t, typename base_t::value_t&) [with VType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalStaticBase<double, int>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_two_class.hpp:121:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:28:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_two_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:177:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Matrix<double, -1, 1>&; YT = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:164:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class.hpp:137:50:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(auto:50&)> [with auto:50 = Eigen::Matrix<double, -1, 1>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:904:24:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:187:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:101:54:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>::<lambda(auto:65)> [with auto:65 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>::<lambda(auto:65)>; SkipPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool>::SpElnetPointInternal<Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, std::vector<bool>, InternalParams>(bool, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t&, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >&, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t&, const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, 1>&, const Eigen::Matrix<double, -1, -1>&, const std::vector<bool>&, const InternalParams&)::<lambda(bool, bool)>::<lambda(auto:66)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:100:51:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::SpElnetPointInternal(bool, typename base_t::value_t, typename base_t::index_t, typename base_t::index_t, typename base_t::index_t&, IAType&, typename base_t::value_t&, const XType&, const YType&, const GType&, const QType&, const XBType&, const XSType&, const VPType&, const CLType&, const JUType&, const IntParamType&) [with IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; JUType = std::vector<bool>; IntParamType = InternalParams; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:35:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_multi.hpp:83:38:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/standardize.hpp:400:33:   required from ‘static void glmnetpp::MultSpStandardize1::eval(const XType&, YType&, WType&, bool, bool, bool, const JUType&, XMType&, XSType&, YMType&, YSType&, XVType&, ValueType&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; YMType = Eigen::Matrix<double, -1, 1>; YSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; ValueType = double]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:548:32:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:21:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:23:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:40:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:21:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:23:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:101:55:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:108:21:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::compute_abs_grad(typename base_t::index_t, GType&&) const [with GType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianMultiBase<double, int, bool>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:68:81:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:23:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:522:40:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:538:25:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:643:34:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_irls<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Array<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:645:81:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_irls<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:65:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_irls<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_min_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_max_op<double, double, 0>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_exp_op<double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:648:53:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::update_irls_class(PredBuffType&&, typename base_t::value_t, const OffsetType&, QType&&, UpdatePredictionFType) [with PredBuffType = Eigen::Matrix<double, -1, 1>&; OffsetType = Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true>; QType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; UpdatePredictionFType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_irls<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:47&)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_irls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:48&)>)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t)>::<lambda(auto:40&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1244:46:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:49:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:51:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, 1, -1, 1, 1, -1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1044:59:   required from ‘auto glmnetpp::ElnetPointInternalBinomialMultiClassBase<ValueType, IndexType, BoolType>::elc(typename base_t::value_t, const CLType&, const AType&) [with CLType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:900:30:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_multi.hpp:84:33:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:39:27:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:23:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:23:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:56:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false>; U = Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false>; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:598:51:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::construct() [with ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1180:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Matrix<double, -1, -1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:49:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:124:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:531:48:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiBase<ValueType, IndexType, BoolType>::initialize_resid(RType&&, const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<ScaleDerived>&, typename base_t::value_t) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>&; YT = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; VT = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:546:25:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:647:16:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:120:7:   required from ‘class Eigen::internal::dense_product_base<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, 7>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:152:7:   required from ‘class Eigen::ProductImpl<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Product.h:71:7:   required from ‘class Eigen::Product<Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:155:52:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > > >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:156:37:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t, DestType&&) const [with DestType = Eigen::Matrix<double, -1, 1>&; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:162:21:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int; internal_t = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:55:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:25:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:85:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:25:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename base_t::index_t, const PointPackType&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:38:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:25:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<Eigen::Matrix<double, -1, -1> >, -1, 1, true> >, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_multi.hpp:155:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:318:23:   required from ‘static void glmnetpp::details::FitPathGaussian<false, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multspelnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:435:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:78:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:88:35:   required from ‘static auto glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::compute_sp_cov(const X1Type&, const X2Type&, const WType&, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t) [with X1Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; X2Type = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; WType = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianCovBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_cov.hpp:65:42:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ValueType, IndexType, BoolType>::update_active(typename base_t::index_t) [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianCovBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:81:44:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >; state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int; internal_t = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:62:53:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_gaussian_cov.hpp:151:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, SpElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; ULamType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; SpElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:173:27:   required from ‘static void glmnetpp::details::FitPathGaussian<false, false>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spelnet_exp(int, double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:103:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:45:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:101:57:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::setup_wls(const PointPackType&) [with PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ValueType = double; IndexType = int; BoolType = bool]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:179:28:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::irls(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:311:41:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:78:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, false> >, const Eigen::Block<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>, 1, -1, false> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:30:31:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:45:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:91:72:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialTwoClassBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename base_t::index_t, const PointConfigPack&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:36:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:86:30:   required from ‘glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::state_t glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::update(typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t, const PointPackType&, DiffType&&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; PointPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; state_t = glmnetpp::util::control_flow; typename glmnetpp::details::traits<ElnetPointDerived>::internal_t::index_t = int; internal_t = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:127:53:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:82:43:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathPoissonBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/poisson_naive.hpp:107:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:78:23:   required from ‘static void glmnetpp::details::FitPathPoisson<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = fishnet_exp(double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:270:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:140:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename base_t::index_t, const PointConfigPack&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:36:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename base_t::index_t, const PointConfigPack&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:55:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalStaticBase<double, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:64:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_naive.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:97:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:21:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:142:33:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:322:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:405:33:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<scalar_log_op<double>, const Eigen::CwiseBinaryOp<scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, const Eigen::ArrayWrapper<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, const Eigen::CwiseUnaryOp<Eigen::internal::scalar_log_op<double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:355:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:89:39:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::scalar_max_op<double, double, 0>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double, 0>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:448:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with int NaNPropagation = 0; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:466:37:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_quotient_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true> >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > > >, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1208:43:   required from ‘void glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<ValueType, IndexType, BoolType>::setup_wls(typename base_t::value_t, typename base_t::value_t, InitResidFType) [with InitResidFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::setup_wls<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, glmnetpp::ElnetPointInternalStaticBase<double, int>::value_t)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBinomialMultiBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:95:26:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:219:37:   required from ‘static constexpr bool glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::equal(const Eigen::MatrixBase<OtherDerived>&, const Eigen::MatrixBase<OtherDerived>&) [with T1 = Eigen::Matrix<double, -1, 1>; T2 = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:75:24:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class_group.hpp:80:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:21:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::get_elnet_point(const FitPackType&, PathConfigPackType&&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassBase::PathConfigPack<double, int>&; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_binomial_multi_class_group.hpp:91:43:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename base_t::index_t, const PointConfigPack&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/binomial_multi_class_group.hpp:34:37:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Matrix<double, -1, 1>&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_poisson_naive.hpp:138:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalPoissonBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:129:27:   required from ‘typename glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::base_t::state_t glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::update(typename base_t::index_t, const PointConfigPack&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; DiffType = double&; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:141:36:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_poisson_naive.hpp:169:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const QType&, IntType, ValueType, const ULamType&, const XBType&, const XSType&, ValueType, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; QType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XBType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::poisson, glmnetpp::util::Mode<glmnetpp::util::glm_type::poisson>::type::naive, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:144:23:   required from ‘static void glmnetpp::details::FitPathPoisson<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, ValueType, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/poisson.hpp:255:52:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::poisson>::fit(ValueType, XType&, YType&, GType&, const WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = spfishnet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:326:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename base_t::index_t, AType&&, typename base_t::value_t, typename base_t::value_t, GCurrType&&, GNextType&&, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, typename base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool>::update_beta<glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:20:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename base_t::index_t, AType&&, typename base_t::value_t, typename base_t::value_t, GCurrType&&, GNextType&&, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, typename base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<int, -1, 1>&; CLType = Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool>::update_beta<glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:22&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:617:20:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_two_class.hpp:137:21:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_two_class.hpp:109:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, -1, 1, true>; GType = Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::two_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:91:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:570:28:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, const Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; U = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, const Eigen::ArrayWrapper<Eigen::Block<Eigen::Matrix<double, -1, -1>, -1, 1, true> > > >; Derived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:604:29:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Matrix<double, -1, 1>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Matrix<double, -1, 1>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:610:38:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> >, const Eigen::ArrayWrapper<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Matrix<double, -1, 1> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:589:92:   required from ‘void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_rsq(typename base_t::index_t, const DiffType&) [with DiffType = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:64:25:   required from ‘typename glmnetpp::ElnetPointGaussianBase<Derived>::base_t::state_t glmnetpp::ElnetPointGaussianBase<Derived>::update(typename base_t::index_t, const PointPackType&, DiffType&&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; DiffType = Eigen::Matrix<double, -1, 1>&; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >; typename base_t::state_t = glmnetpp::util::control_flow; base_t = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> > >; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_multi.hpp:37:50:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:31:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename base_t::index_t, AType&&, typename base_t::value_t, typename base_t::value_t, GCurrType&&, GNextType&&, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, typename base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_beta<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>&)::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:647:25:   required from ‘static void glmnetpp::ElnetPointInternalGaussianMultiBase<ValueType, IndexType, BoolType>::update_beta(typename base_t::index_t, AType&&, typename base_t::value_t, typename base_t::value_t, GCurrType&&, GNextType&&, typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, typename base_t::index_t, ISCType&&, const CLType&, GradFType) [with AType = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; GCurrType = Eigen::Matrix<double, -1, 1>&; GNextType = Eigen::Matrix<double, -1, 1>&; ISCType = Eigen::Matrix<double, -1, 1>&; CLType = glmnetpp::ElnetPointInternalBinomialMultiClassGroupBase<double, int, bool>::update_beta<glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>&)::<lambda(auto:38, auto:39)>; GradFType = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool>::update_beta<glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int> >(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, const glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>&)::<lambda(glmnetpp::ElnetPointInternalStaticBase<double, int>::index_t, auto:46&)>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianBase<double, int, bool>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:1187:38:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Matrix<double, -1, 1>; U = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; Derived = Eigen::Matrix<double, -1, 1>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_multi_class.hpp:135:21:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:101:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:333:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:306:38:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |                                      ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                          ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                                                  ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 1>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:310:42:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |                                      ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                          ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                                                  ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of ‘class Eigen::internal::gemv_traits<double, double, 2>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:314:45:   required from ‘struct Eigen::internal::general_matrix_vector_product<long int, double, Eigen::internal::const_blas_data_mapper<double, long int, 1>, 1, false, double, Eigen::internal::const_blas_data_mapper<double, long int, 0>, false, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/GeneralProduct.h:347:132:   required from ‘static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Dest = Eigen::Matrix<double, -1, 1>; typename Dest::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:388:34:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from ‘static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::DenseShape, Eigen::DenseShape, 7>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:44:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   44 |   PACKET_DECL_COND_PREFIX(_, Lhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:45:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   45 |   PACKET_DECL_COND_PREFIX(_, Rhs, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:46:27: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   46 |   PACKET_DECL_COND_PREFIX(_, Res, _PacketSize);
      |                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:42:3: note: in definition of macro ‘PACKET_DECL_COND_PREFIX’
   42 |   prefix ## name ## Packet
      |   ^~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   51 |         Vectorizable = unpacket_traits<_LhsPacket>::vectorizable &&
      |                                                     ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:51:53: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   52 |         unpacket_traits<_RhsPacket>::vectorizable &&
      |                                      ^~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:52:38: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                          ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:42: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   53 |         int(unpacket_traits<_LhsPacket>::size)==int(unpacket_traits<_RhsPacket>::size),
      |                                                                                  ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:53:82: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   54 |         LhsPacketSize = Vectorizable ? unpacket_traits<_LhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:54:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   55 |         RhsPacketSize = Vectorizable ? unpacket_traits<_RhsPacket>::size : 1,
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:55:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |         ResPacketSize = Vectorizable ? unpacket_traits<_ResPacket>::size : 1
      |                                                                     ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:56:69: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   59 |   typedef typename conditional<Vectorizable,_LhsPacket,LhsScalar>::type LhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:59:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   60 |   typedef typename conditional<Vectorizable,_RhsPacket,RhsScalar>::type RhsPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:60:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
   61 |   typedef typename conditional<Vectorizable,_ResPacket,ResScalar>::type ResPacket;
      |                                                                         ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/products/GeneralMatrixVector.h:61:73: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Matrix<double, -1, 1>, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<Eigen::Matrix<double, -1, 1>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:22:9:   required from ‘class Eigen::internal::SparseTransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 1024>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseTranspose.h:45:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:216:60:   required from ‘static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::SparseShape, ProductType>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, -1, 1>; Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; int ProductType = 7; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:361:27:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDenseProduct.h:216:83:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/sp_binomial_multi_class_group.hpp:171:25:   required from ‘void glmnetpp::SpElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XMType&, const XSType&, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:182:27:   required from ‘static void glmnetpp::details::FitPathBinomial<false>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = const Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = splognet_exp(double, Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:214:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:23:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:56:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; U = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_cov.hpp:55:65:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_cov.hpp:136:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, GType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::cov, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:90:27:   required from ‘static void glmnetpp::details::FitPathGaussian<is_dense, is_multi>::eval(bool, ValueType, const XType&, YType&, GType&, const WType&, const JUType&, const VQType&, const XMType&, const XSType&, const XVType&, const CLType&, IntType, IntType, IntType, ValueType, const VLamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; GType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Matrix<double, -1, 1>; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true; bool is_multi = false]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:439:60:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(bool, ValueType, XType&, YType&, WType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, 1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = elnet_exp(int, double, Eigen::MatrixXd, Eigen::VectorXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:49:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 2, -1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 2, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:217:20:   required from ‘PacketType Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::packet(Eigen::Index) const [with int LoadMode = 0; PacketType = __vector(2) double; ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double, double>; int Direction = 1; Eigen::Index = long int]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:681:114:   required from ‘void Eigen::internal::generic_dense_assignment_kernel<DstEvaluatorTypeT, SrcEvaluatorTypeT, Functor, Version>::assignPacket(Eigen::Index) [with int StoreMode = 16; int LoadMode = 0; PacketType = __vector(2) double; DstEvaluatorTypeT = Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >; SrcEvaluatorTypeT = Eigen::internal::evaluator<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >; Functor = Eigen::internal::assign_op<double, double>; int Version = 0; Eigen::Index = long int]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:437:75:   required from ‘static void Eigen::internal::dense_assignment_loop<Kernel, 3, 0>::run(Kernel&) [with Kernel = Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >, Eigen::internal::evaluator<Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, Eigen::internal::member_sum<double, double>, 1> >, Eigen::internal::assign_op<double, double>, 0>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:785:37:   required from ‘void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, 1>; SrcXprType = Eigen::PartialReduxExpr<Eigen::Matrix<double, -1, -1>, member_sum<double, double>, 1>; Functor = assign_op<double, double>]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/AssignEvaluator.h:954:31:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>, const Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:98:40:   required from ‘typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real Eigen::MatrixBase<Derived>::squaredNorm() const [with Derived = Eigen::Transpose<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >; typename Eigen::NumTraits<typename Eigen::internal::traits<T>::Scalar>::Real = double; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:703:33:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:118:56:   required from ‘void glmnetpp::ElnetPointNonLinearCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathBinomialMultiClassBase::PointConfigPack<double, int>; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseUnaryOp<scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::scalar_max_op<double, double, 0>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_max_op<double, double, 0>; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:448:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with int NaNPropagation = 0; Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:466:37:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::maxCoeff() const [with Derived = Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>, const Eigen::ArrayWrapper<const Eigen::Matrix<double, -1, 1> > >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:321:66:   required from ‘void glmnetpp::ElnetPointInternalBaseViewer<ValueType, IndexType, BoolType>::update_dlx(const Eigen::MatrixBase<OtherDerived>&, typename base_t::value_t) [with T = Eigen::Matrix<double, -1, 1>; ValueType = double; IndexType = int; BoolType = bool; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalStaticBase<double, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:578:27:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPathGaussianMultiBase::PointConfigPack<double, int>; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:56:36:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Matrix<double, -1, -1>, 1, -1, false, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 16 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:118:37:   required from ‘class Eigen::TransposeImpl<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Transpose.h:52:37:   required from ‘class Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:23:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:56:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:311:41:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:78:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:311:41:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:63:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Derived = Eigen::Block<const Eigen::Transpose<const Eigen::Map<Eigen::Matrix<double, -1, -1> > >, 1, -1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:380:62:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘auto glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathGaussianMultiBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi>]’
glmnetpp/include/glmnetpp_bits/elnet_path/gaussian_multi.hpp:108:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, YType&, IntType, IntType, const XType&, IntType, ValueType, const ULamType&, ValueType, IntType, const XVType&, ValueType, IntType&, AOType&, IAType&, KinType&, RSQOType&, ALMOType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RSQOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::multi, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:250:23:   required from ‘static void glmnetpp::details::FitPathGaussian<true, true>::eval(ValueType, const JUType&, const VQType&, const CLType&, YType&, const WType&, IntType, IntType, const XType&, IntType, ValueType, const VLamType&, ValueType, IntType, const XMType&, const XSType&, const XVType&, ValueType, IntType&, A0Type&, CAType&, IAType&, NinType&, RsqType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) [with ValueType = double; JUType = std::vector<bool>; VQType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, 1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; VLamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:562:59:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::gaussian>::fit(ValueType, XType&, YType&, WType&, const JDType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, bool, IntType, IntType&, A0Type&, AOType&, IAType&, KinType&, RsqoType&, AlmoType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; RsqoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmoType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = multelnet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::VectorXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, -1> >, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:381:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:357:7:   required from ‘class Eigen::internal::redux_evaluator<Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:414:17:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/VectorwiseOp.h:114:1:   required from ‘ResultType Eigen::internal::member_sum<ResultType, Scalar>::operator()(const XprType&) const [with XprType = Eigen::Block<const Eigen::Matrix<double, -1, -1>, 1, -1, false>; ResultType = double; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:183:21:   required from ‘const Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::Scalar Eigen::internal::evaluator<Eigen::PartialReduxExpr<MatrixType, MemberOp, Direction> >::coeff(Eigen::Index) const [with ArgType = Eigen::Matrix<double, -1, -1>; MemberOp = Eigen::internal::member_sum<double, double>; int Direction = 1; Scalar = double; Eigen::Index = long int]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PartialReduxEvaluator.h:214:47:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Transpose<const Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true> >, const Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:50:63:   required from ‘static Eigen::internal::dot_nocheck<T, U, true>::ResScalar Eigen::internal::dot_nocheck<T, U, true>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; U = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, -1, 1, true>; Derived = Eigen::Block<const Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >, 1, -1, true>; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ProductEvaluators.h:380:62:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from ‘glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::elnet_point_t glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::get_elnet_point(const FitPackType&, const PathConfigPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; PathConfigPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::PathConfigPack<double, int>; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >; elnet_point_t = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_path/base.hpp:46:56:   required from ‘void glmnetpp::ElnetPathCRTPBase<ElnetPathDerived>::fit(const FitPackType&) const [with FitPackType = glmnetpp::ElnetPathBinomialMultiClassGroupBase::FitPack<double, std::vector<bool>, Eigen::Matrix<double, -1, 1>, Eigen::Matrix<double, -1, -1>, int, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, -1>, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Matrix<double, -1, 1>, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>, InternalParams>; ElnetPathDerived = glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group>]’
glmnetpp/include/glmnetpp_bits/elnet_path/binomial_multi_class_group.hpp:112:25:   required from ‘void glmnetpp::ElnetPath<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, ElnetPointPolicy>::fit(ValueType, const JUType&, const VPType&, const CLType&, IntType, IntType, const XType&, const YType&, GType&, const WType&, IntType, ValueType, const ULamType&, ValueType, bool, IntType, const XVType&, IntType&, A0Type&, AOType&, IAType&, KinType&, ValueType&, DevType&, ALMType&, IntType&, IntType&, SetpbFType, const IntParamType&) const [with ValueType = double; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Matrix<double, -1, 1>; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AOType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; KinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; ALMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; ElnetPointPolicy = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::binomial, glmnetpp::util::Mode<glmnetpp::util::glm_type::binomial>::type::multi_class_group, double, int, bool> >]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:96:27:   required from ‘static void glmnetpp::details::FitPathBinomial<is_dense>::eval(ValueType, const XType&, const YType&, GType&, const WType&, const JUType&, const VPType&, const CLType&, IntType, IntType, IntType, ValueType, const ULamType&, const XMType&, const XSType&, const XVType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, const IntParamType&) [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; WType = Eigen::Matrix<double, -1, 1>; JUType = std::vector<bool>; VPType = Eigen::Matrix<double, -1, 1>; CLType = Eigen::Matrix<double, -1, -1>; IntType = int; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Matrix<double, -1, 1>; XSType = Eigen::Matrix<double, -1, 1>; XVType = Eigen::Matrix<double, -1, 1>; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams; bool is_dense = true]’
glmnetpp/include/glmnetpp_bits/elnet_driver/binomial.hpp:309:53:   required from ‘void glmnetpp::ElnetDriver<glmnetpp::util::glm_type::binomial>::fit(ValueType, XType&, YType&, GType&, const JDType&, const VPType&, CLType&, IntType, IntType, IntType, ValueType, const ULamType&, ValueType, bool, bool, IntType, IntType, LmuType&, A0Type&, CAType&, IAType&, NinType&, ValueType&, DevType&, AlmType&, IntType&, IntType&, SetpbFType, IntParamType) const [with ValueType = double; XType = Eigen::Matrix<double, -1, -1>; YType = Eigen::Matrix<double, -1, -1>; GType = Eigen::Matrix<double, -1, -1>; JDType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Matrix<double, -1, -1>; ULamType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IntType = int; LmuType = int; A0Type = Eigen::Map<Eigen::Matrix<double, -1, -1> >; CAType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; NinType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; DevType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; AlmType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; SetpbFType = lognet_exp(double, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::MatrixXd, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::MatrixXd, int, int, int, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, double, int, int, int, int, SEXP, int, Eigen::Map<Eigen::Matrix<double, -1, -1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >, double, Eigen::Map<Eigen::Matrix<double, -1, 1> >, Eigen::Map<Eigen::Matrix<double, -1, 1> >, int, int)::<lambda()>::<lambda(int)>; IntParamType = InternalParams]’
elnet_exp.cpp:158:19:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c glmnet_init.cpp -o glmnet_init.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c internal.cpp -o internal.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from internal.cpp:4:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c pb.c -o pb.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c pb_exp.cpp -o pb_exp.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/RcppEigen/include' -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include   -Iglmnetpp/include -Iglmnetpp/src -Iglmnetpp/test -DEIGEN_PERMANENTLY_DISABLE_STUPID_WARNINGS -fpic  -g -O2   -c wls_exp.cpp -o wls_exp.o
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:205,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Dense:1,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:28,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigen.h:25,
                 from wls_exp.cpp:2:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:46:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   46 | typedef eigen_packet_wrapper<__m128i, 0> Packet4i;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:47:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   47 | typedef eigen_packet_wrapper<__m128i, 1> Packet16b;
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:49:39: warning: ignoring attributes on template argument ‘__m128’ [-Wignored-attributes]
   49 | template<> struct is_arithmetic<__m128>  { enum { value = true }; };
      |                                       ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:50:40: warning: ignoring attributes on template argument ‘__m128i’ [-Wignored-attributes]
   50 | template<> struct is_arithmetic<__m128i> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:51:40: warning: ignoring attributes on template argument ‘__m128d’ [-Wignored-attributes]
   51 | template<> struct is_arithmetic<__m128d> { enum { value = true }; };
      |                                        ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:222:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
  222 | template<> struct unpacket_traits<Packet4f> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:228:43: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
  228 | template<> struct unpacket_traits<Packet2d> {
      |                                           ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1124:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
 1124 | ptranspose(PacketBlock<Packet4f,4>& kernel) {
      |                                  ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/PacketMath.h:1129:34: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
 1129 | ptranspose(PacketBlock<Packet2d,2>& kernel) {
      |                                  ^
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:174:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet4f’ {aka ‘__m128’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:173:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  173 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:16:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   16 |   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/Default/ConjHelper.h:29:60: warning: ignoring attributes on template argument ‘Eigen::internal::Packet2d’ {aka ‘__m128d’} [-Wignored-attributes]
   29 |   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
      |                                                            ^
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/arch/SSE/Complex.h:298:1: note: in expansion of macro ‘EIGEN_MAKE_CONJ_HELPER_CPLX_REAL’
  298 | EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d)
      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:165:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<float, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:24:46:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(4) float>::half’ {aka ‘__m128’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:271:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<float, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<float, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<float, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<float> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<float>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:27:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<float>::type’ {aka ‘__m128’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, 4>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:266:49:   required from ‘struct Eigen::internal::traits<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:98:47:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, 4, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, 4, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, 4, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:46:50:   required from ‘class Eigen::QuaternionBase<Eigen::Quaternion<double> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/Quaternion.h:273:7:   required from ‘class Eigen::Quaternion<double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Geometry/arch/Geometry_SIMD.h:102:3:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/SparseCore:37,
                 from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Sparse:26,
                 from /home/runner/work/_temp/Library/RcppEigen/include/RcppEigenForward.h:29:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::SparseMatrix<double, 0, int> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::SparseMatrix<double, 0, int> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrix.h:96:7:   required from ‘class Eigen::SparseMatrix<double, 0, int>’
/home/runner/work/_temp/Library/RcppEigen/include/unsupported/Eigen/src/IterativeSolvers/ConstrainedConjGrad.h:61:25:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h: In instantiation of ‘struct Eigen::internal::find_best_packet<double, -1>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:22:57:   required from ‘struct Eigen::internal::traits<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:18:8:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:44: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                                       ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  190 |          bool Stop = Size==Dynamic || (Size%unpacket_traits<PacketType>::size)==0 || is_same<PacketType,typename unpacket_traits<PacketType>::half>::value>
      |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:190:83: warning: ignoring attributes on template argument ‘Eigen::internal::unpacket_traits<__vector(2) double>::half’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/XprHelper.h:208:88: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  208 |   typedef typename find_best_packet_helper<Size,typename packet_traits<T>::type>::type type;
      |                                                                                        ^~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, -1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, -1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:24:49:   required from ‘struct Eigen::internal::traits<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:32:48:   required from ‘struct Eigen::internal::accessors_level<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/util/ForwardDeclarations.h:111:75:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, -1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, -1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, -1> >’
glmnetpp/include/glmnetpp_bits/elnet_driver/gaussian.hpp:555:34:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Matrix<double, -1, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Matrix.h:178:7:   required from ‘class Eigen::Matrix<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:400:10:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:38:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Array<double, -1, 1>, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/PlainObjectBase.h:98:7:   required from ‘class Eigen::PlainObjectBase<Eigen::Array<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Array.h:45:7:   required from ‘class Eigen::Array<double, -1, 1>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:402:39:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:48:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_sum_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Array<double, -1, 1> >, const Eigen::ArrayWrapper<Eigen::Matrix<double, -1, 1> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/binomial_base.hpp:409:49:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:302:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:555:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 3>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:223:34:   required from ‘class Eigen::MapBase<Eigen::Map<Eigen::Matrix<double, -1, 1> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   required from ‘class Eigen::Map<Eigen::Matrix<double, -1, 1> >’
wls_exp.cpp:40:5:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Map.h:94:79:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:796:8:   required from ‘struct glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:10:8:   required from ‘struct glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:52:17:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:148:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<Eigen::SparseMatrix<double, 0, int> >, 1>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:222:7:   required from ‘class Eigen::Map<Eigen::SparseMatrix<double, 0, int> >’
wls_exp.cpp:113:5:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:36:7:   required from ‘class Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:50:7:   required from ‘class Eigen::SparseMapBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:255:7:   required from ‘class Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:150:32:   required from ‘struct glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:16:8:   required from ‘struct glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:8:8:   required from ‘struct glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:9:8:   required from ‘struct glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
glmnetpp/include/glmnetpp_bits/elnet_point/sp_gaussian_wls.hpp:7:8:   required from ‘struct glmnetpp::SpElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >’
wls_exp.cpp:125:17:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:22:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:42:7:   required from ‘class Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:31:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayBase.h:39:34:   required from ‘class Eigen::ArrayBase<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:94:7:   required from ‘class Eigen::CwiseUnaryOpImpl<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseUnaryOp.h:55:7:   required from ‘class Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:40:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/ArrayWrapper.h:140:7:   required from ‘class Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:49:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:28:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:44:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCompressedBase.h:336:80:   required from ‘struct Eigen::internal::evaluator<Eigen::SparseCompressedBase<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMap.h:292:8:   required from ‘struct Eigen::internal::evaluator<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:438:43:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::internal::IteratorBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1087:8:   required from ‘struct Eigen::internal::block_evaluator<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, false>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1034:8:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:334:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:59:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
In file included from /home/runner/work/_temp/Library/RcppEigen/include/Eigen/Core:277:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:407:54:   required from ‘struct Eigen::internal::sparse_conjunction_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:334:8:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IteratorBased, Eigen::internal::IteratorBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseDot.h:29:32:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::SparseMatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Block<const Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:133:59:   required from ‘typename glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:85:41:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:55:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:44:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:64:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::internal::traits<T>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:83:33:   required from ‘glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::SpElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, const XMType&, const XSType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::SparseMatrix<double, 0, int> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XMType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XSType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1384:41:   required from ‘struct Eigen::internal::evaluator_wrapper_base<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1464:8:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   required from ‘struct Eigen::internal::evaluator<Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:564:45:   required from ‘struct Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >, Eigen::internal::IndexBased, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:90:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:55:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:481:7:   required from ‘class Eigen::DenseCoeffsBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 2>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MapBase.h:37:34:   required from ‘class Eigen::MapBase<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, 0>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:329:7:   required from ‘class Eigen::internal::BlockImpl_dense<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true, true>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:154:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:94:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:38:28:   required from ‘struct Eigen::internal::traits<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBaseViewer<double, int, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:31:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:928:52:   required from ‘auto glmnetpp::ElnetPointInternalGaussianWLSBase<ValueType, IndexType, BoolType>::update_intercept(typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalBaseViewer<double, int, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:99:33:   required from ‘void glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_intercept() [with ValueType = double; IndexType = int; BoolType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:55:31:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseBlock.h:17:7:   required from ‘class Eigen::BlockImpl<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Block.h:103:81:   required from ‘class Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:23:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:27:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename base_t::index_t, const PointPackType&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:27:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename base_t::index_t, const PointPackType&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:148:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Dense>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:92:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h: In instantiation of ‘class Eigen::SparseMatrixBase<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > > >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:36:7:   required from ‘class Eigen::CwiseBinaryOpImpl<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::Sparse>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:77:7:   required from ‘class Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_base.hpp:381:24:   required from ‘static void glmnetpp::ElnetPointInternalGaussianNaiveBase<ValueType, IndexType, BoolType>::update_resid(RType&&, typename base_t::value_t, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >&; XType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianUniBase<double, int, int>]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:109:39:   required from ‘void glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::update_resid(typename base_t::index_t, typename base_t::value_t) [with ValueType = double; IndexType = int; BoolType = int; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::value_t = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:57:27:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::update(typename base_t::index_t, const PointPackType&) [with typename base_t::update_t upd = glmnetpp::util::update_t::full; PointPackType = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>; typename base_t::index_t = int; base_t = glmnetpp::ElnetPointGaussianBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseMatrixBase.h:47:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   47 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; U = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::MatrixWrapper<const Eigen::CwiseUnaryOp<Eigen::internal::scalar_square_op<double>, const Eigen::ArrayWrapper<const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > > >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:113:55:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_xv(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:74:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
  654 |   return internal::first_aligned<int(unpacket_traits<DefaultPacketType>::alignment),Derived>(m);
      |                                                                          ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘Eigen::Index Eigen::internal::first_default_aligned(const Eigen::DenseBase<Derived>&) [with Derived = Eigen::CwiseBinaryOp<scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Eigen::Index = long int]’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:243:63:   required from ‘static Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::Scalar Eigen::internal::redux_impl<Func, Evaluator, 3, 0>::run(const Evaluator&, const Func&, const XprType&) [with XprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; Func = Eigen::internal::scalar_sum_op<double, double>; Evaluator = Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> > >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:418:56:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::redux(const Func&) const [with BinaryOp = Eigen::internal::scalar_sum_op<double, double>; Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Redux.h:463:25:   required from ‘typename Eigen::internal::traits<T>::Scalar Eigen::DenseBase<Derived>::sum() const [with Derived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double, double>, const Eigen::Map<Eigen::Matrix<double, -1, 1> >, const Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >; typename Eigen::internal::traits<T>::Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:37:51:   required from ‘static Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::ResScalar Eigen::internal::dot_nocheck<T, U, NeedToTranspose>::run(const Eigen::MatrixBase<Derived>&, const Eigen::MatrixBase<U>&) [with T = Eigen::Map<Eigen::Matrix<double, -1, 1> >; U = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; bool NeedToTranspose = false; ResScalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/Dot.h:84:58:   required from ‘typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType Eigen::MatrixBase<Derived>::dot(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; typename Eigen::ScalarBinaryOpTraits<typename Eigen::internal::traits<T>::Scalar, typename Eigen::internal::traits<OtherDerived>::Scalar>::ReturnType = double; typename Eigen::internal::traits<T>::Scalar = double; typename Eigen::internal::traits<OtherDerived>::Scalar = double]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:206:64:   required from ‘static auto glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::compute_grad(const RType&, const XType&) [with RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XType = Eigen::Block<const Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:118:36:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:123:25:   required from ‘typename glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::base_t::value_t glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::compute_abs_grad(typename base_t::index_t) const [with ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/gaussian_wls.hpp:75:41:   required from ‘glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ValueType, IndexType, BoolType>::ElnetPointInternal(typename base_t::value_t, typename base_t::value_t, typename base_t::value_t, const XType&, RType&, XVType&, const VType&, bool, const JUType&, const VPType&, const CLType&, typename base_t::index_t, typename base_t::value_t, typename base_t::index_t, AType&, typename base_t::value_t&, GType&, IAType&, IYType&, typename base_t::index_t&, MMType&, typename base_t::index_t&, typename base_t::value_t&, typename base_t::index_t&) [with XType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; RType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; XVType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; VType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; JUType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; VPType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; CLType = Eigen::Map<Eigen::Matrix<double, -1, -1> >; AType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; GType = Eigen::Map<Eigen::Matrix<double, -1, 1> >; IAType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; IYType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; MMType = Eigen::Map<Eigen::Matrix<int, -1, 1>, 0, Eigen::Stride<0, 0> >; ValueType = double; IndexType = int; BoolType = int; typename base_t::value_t = double; base_t = glmnetpp::ElnetPointInternalGaussianWLSBase<double, int, int>; typename base_t::index_t = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:93:23:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:654:74: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:45:7:   required from ‘Eigen::CwiseBinaryOpImpl<BinaryOp, Lhs, Rhs, Eigen::Sparse>::CwiseBinaryOpImpl() [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; Lhs = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseBinaryOp.h:111:49:   required from ‘Eigen::CwiseBinaryOp<BinaryOp, Lhs, Rhs>::CwiseBinaryOp(const Lhs&, const Rhs&, const BinaryOp&) [with BinaryOp = Eigen::internal::scalar_product_op<double, double>; LhsType = const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; RhsType = const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Lhs = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; Rhs = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseCwiseBinaryOp.h:689:62:   required from ‘const typename Eigen::SparseMatrixBase<Derived>::CwiseProductDenseReturnType<OtherDerived>::Type Eigen::SparseMatrixBase<Derived>::cwiseProduct(const Eigen::MatrixBase<OtherDerived>&) const [with OtherDerived = Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Derived = Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>; typename CwiseProductDenseReturnType<OtherDerived>::Type = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::SparseMatrix<double, 0, int>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/sp_gaussian_wls.hpp:110:39:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
 1071 |     PacketAlignment = unpacket_traits<PacketScalar>::alignment,
      |                                                      ^~~~~~~~~
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h: In instantiation of ‘struct Eigen::internal::evaluator<Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:41:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   required from ‘struct Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:100:8:   required from ‘struct Eigen::internal::evaluator<const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:739:78:   required from ‘struct Eigen::internal::binary_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::Block<Eigen::Map<const Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, const Eigen::Map<const Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double>’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:722:8:   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::ElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:55:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CoreEvaluators.h:1071:54: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h: In instantiation of ‘class Eigen::DenseCoeffsBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >, 0>’:
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseBase.h:41:34:   required from ‘class Eigen::DenseBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/MatrixBase.h:48:34:   required from ‘class Eigen::MatrixBase<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:60:7:   required from ‘class Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:347:30:   required from ‘Derived& Eigen::DenseBase<Derived>::setConstant(const Scalar&) [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >; Scalar = double]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/CwiseNullaryOp.h:548:10:   required from ‘Derived& Eigen::DenseBase<Derived>::setZero() [with Derived = Eigen::Map<Eigen::Matrix<double, -1, 1> >]’
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/SparseCore/SparseAssign.h:143:18:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:43:46:   required from ‘glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)> [with auto:4 = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/internal/base.hpp:38:23:   required from ‘static constexpr void glmnetpp::ElnetPointInternalStaticBase<ValueType, IndexType>::for_each_with_skip(Iter, Iter, UpdatePolicy, SkipPolicy) [with Iter = glmnetpp::util::counting_iterator<int>; UpdatePolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:4)>; SkipPolicy = glmnetpp::ElnetPointCRTPBase<glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> > >::fit<glmnetpp::util::update_type::full, true, glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack>(const glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack&)::<lambda()>::<lambda(auto:5)>; ValueType = double; IndexType = int]’
glmnetpp/include/glmnetpp_bits/elnet_point/base.hpp:40:45:   required from ‘std::pair<bool, bool> glmnetpp::ElnetPointCRTPBase<ElnetPointDerived>::fit(const PointConfigPack&) [with glmnetpp::util::update_type upd = glmnetpp::util::update_type::full; bool do_kkt = true; PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_base.hpp:35:78:   required from ‘void glmnetpp::ElnetPointGaussianBase<Derived>::fit(const PointConfigPack&) [with PointConfigPack = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >::PointConfigPack; ElnetPointGaussianDerived = glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int> >]’
glmnetpp/include/glmnetpp_bits/elnet_point/gaussian_wls.hpp:43:24:   required from ‘void glmnetpp::ElnetPoint<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, ElnetPointInternalPolicy>::fit(IntType, IntType&) [with IntType = int; ElnetPointInternalPolicy = glmnetpp::SpElnetPointInternal<glmnetpp::util::glm_type::gaussian, glmnetpp::util::Mode<glmnetpp::util::glm_type::gaussian>::type::wls, double, int, int>]’
wls_exp.cpp:128:24:   required from here
/home/runner/work/_temp/Library/RcppEigen/include/Eigen/src/Core/DenseCoeffsBase.h:56:30: warning: ignoring attributes on template argument ‘Eigen::internal::packet_traits<double>::type’ {aka ‘__m128d’} [-Wignored-attributes]
   56 |                      >::type PacketReturnType;
      |                              ^~~~~~~~~~~~~~~~
g++ -std=gnu++17 -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o glmnet.so RcppExports.o coxnet5dpclean.o elnet_exp.o glmnet_init.o internal.o pb.o pb_exp.o wls_exp.o -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-glmnet/00new/glmnet/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (glmnet)
* installing *source* package ‘progressr’ ...
** this is package ‘progressr’ version ‘0.16.0’
** package ‘progressr’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (progressr)
* installing *source* package ‘SQUAREM’ ...
** this is package ‘SQUAREM’ version ‘2021.1’
** package ‘SQUAREM’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (SQUAREM)
* installing *source* package ‘modeltools’ ...
** this is package ‘modeltools’ version ‘0.2-24’
** package ‘modeltools’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
Creating a generic function for ‘na.pass’ from package ‘stats’ in package ‘modeltools’
Creating a generic function from function ‘MEapply’ in package ‘modeltools’
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (modeltools)
* installing *source* package ‘strucchange’ ...
** this is package ‘strucchange’ version ‘1.5-4’
** package ‘strucchange’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c strucchange_functions.c -o strucchange_functions.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c strucchange_init.c -o strucchange_init.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o strucchange.so strucchange_functions.o strucchange_init.o -llapack -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-strucchange/00new/strucchange/libs
** R
** data
*** moving datasets to lazyload DB
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (strucchange)
* installing *source* package ‘coin’ ...
** this is package ‘coin’ version ‘1.4-3’
** package ‘coin’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/libcoin/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c Helpers.c -o Helpers.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/libcoin/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c StreitbergRoehmel.c -o StreitbergRoehmel.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/libcoin/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c coin-init.c -o coin-init.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/libcoin/include' -I/usr/local/include   -fvisibility=hidden -fpic  -g -O2  -c vandeWiel.c -o vandeWiel.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o coin.so Helpers.o StreitbergRoehmel.o coin-init.o vandeWiel.o -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-coin/00new/coin/libs
** R
** data
*** moving datasets to lazyload DB
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (coin)
* installing *source* package ‘rms’ ...
** this is package ‘rms’ version ‘8.0-0’
** package ‘rms’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c init.c -o init.o
gfortran  -fpic  -g -O2  -c  lrmll.f90 -o lrmll.o
gfortran  -fpic  -g -O2  -c mlmats.f -o mlmats.o
gfortran  -fpic  -g -O2  -c  ormll.f90 -o ormll.o
gfortran  -fpic  -g -O2  -c  robcovf.f90 -o robcovf.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o rms.so init.o lrmll.o mlmats.o ormll.o robcovf.o -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-rms/00new/rms/libs
** R
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (rms)
* installing *source* package ‘lava’ ...
** this is package ‘lava’ version ‘1.8.1’
** package ‘lava’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (lava)
* installing *source* package ‘prodlim’ ...
** this is package ‘prodlim’ version ‘2025.04.28’
** package ‘prodlim’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c GMLE.c -o GMLE.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c IntIndex.c -o IntIndex.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c icens_prodlim.c -o icens_prodlim.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c icens_prodlim_ml.c -o icens_prodlim_ml.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c iindex.c -o iindex.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c init.c -o init.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c life_table.c -o life_table.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c loo.c -o loo.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c neighborhood.c -o neighborhood.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c predict.c -o predict.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c predict_individual_survival.c -o predict_individual_survival.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c prodlim.c -o prodlim.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c prodlim_clustersurv.c -o prodlim_clustersurv.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c prodlim_comprisk.c -o prodlim_comprisk.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c prodlim_multistates.c -o prodlim_multistates.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c prodlim_surv.c -o prodlim_surv.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c sindex.c -o sindex.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I/usr/local/include    -fpic  -g -O2  -c summary_prodlim.c -o summary_prodlim.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o prodlim.so GMLE.o IntIndex.o icens_prodlim.o icens_prodlim_ml.o iindex.o init.o life_table.o loo.o neighborhood.o predict.o predict_individual_survival.o prodlim.o prodlim_clustersurv.o prodlim_comprisk.o prodlim_multistates.o prodlim_surv.o sindex.o summary_prodlim.o -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-prodlim/00new/prodlim/libs
** R
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (prodlim)
* installing *source* package ‘timereg’ ...
** this is package ‘timereg’ version ‘2.0.7’
** package ‘timereg’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c Gprop-odds.c -o Gprop-odds.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c aalen.c -o aalen.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c aalenC.c -o aalenC.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c additive-compSs.c -o additive-compSs.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c breslow.c -o breslow.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c comprisk.c -o comprisk.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c comptest-cmprsk.c -o comptest-cmprsk.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c comptest.c -o comptest.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c cox-aalen.c -o cox-aalen.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c dynadd.c -o dynadd.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c ipcw-residualmean.c -o ipcw-residualmean.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c matrix.c -o matrix.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c mgresid.c -o mgresid.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c pava.c -o pava.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c pe-sasieni.c -o pe-sasieni.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c pred.c -o pred.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c prop-excess.c -o prop-excess.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c prop-odds-subdist2.c -o prop-odds-subdist2.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c prop-odds.c -o prop-odds.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c smooth.c -o smooth.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c smooth2.c -o smooth2.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c timecox.c -o timecox.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c timeregister.c -o timeregister.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c two-stage-reg.c -o two-stage-reg.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c unifConfBandResampling.c -o unifConfBandResampling.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o timereg.so Gprop-odds.o aalen.o aalenC.o additive-compSs.o breslow.o comprisk.o comptest-cmprsk.o comptest.o cox-aalen.o dynadd.o ipcw-residualmean.o matrix.o mgresid.o pava.o pe-sasieni.o pred.o prop-excess.o prop-odds-subdist2.o prop-odds.o smooth.o smooth2.o timecox.o timeregister.o two-stage-reg.o unifConfBandResampling.o -llapack -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-timereg/00new/timereg/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (timereg)
* installing *source* package ‘party’ ...
** this is package ‘party’ version ‘1.3-18’
** package ‘party’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Classes.c -o Classes.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Convenience.c -o Convenience.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Distributions.c -o Distributions.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c IndependenceTest.c -o IndependenceTest.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c LinearStatistic.c -o LinearStatistic.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Memory.c -o Memory.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Node.c -o Node.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Predict.c -o Predict.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c RandomForest.c -o RandomForest.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c S3Classes.c -o S3Classes.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Splits.c -o Splits.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c SurrogateSplits.c -o SurrogateSplits.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c TestStatistic.c -o TestStatistic.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c TreeGrow.c -o TreeGrow.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c Utils.c -o Utils.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c init.c -o init.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o party.so Classes.o Convenience.o Distributions.o IndependenceTest.o LinearStatistic.o Memory.o Node.o Predict.o RandomForest.o S3Classes.o Splits.o SurrogateSplits.o TestStatistic.o TreeGrow.o Utils.o init.o -llapack -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-party/00new/party/libs
** R
** data
*** moving datasets to lazyload DB
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (party)
* installing *source* package ‘mets’ ...
** this is package ‘mets’ version ‘1.3.7’
** package ‘mets’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using Fortran compiler: ‘GNU Fortran (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
using C++ compiler: ‘g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c aalenfrailty.cpp -o aalenfrailty.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c apply.cpp -o apply.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c binomial-twostage.cpp -o binomial-twostage.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c biprobit.cpp -o biprobit.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c claytonoakes.cpp -o claytonoakes.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c clusterindex.cpp -o clusterindex.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c cor.cpp -o cor.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c fastcox.cpp -o fastcox.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c mvn.cpp -o mvn.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c pch.cpp -o pch.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c prop-odd.cpp -o prop-odd.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2  -c randomF77.c -o randomF77.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c sim-tools.cpp -o sim-tools.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c survival-twostage.cpp -o survival-twostage.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG -I../inst/include -DNDEBUG -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I'/home/runner/work/_temp/Library/mvtnorm/include' -I/usr/local/include    -fpic  -g -O2   -c tools.cpp -o tools.o
gfortran  -fpic  -g -O2  -c tvpack.f -o tvpack.o
g++ -std=gnu++17 -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o mets.so RcppExports.o aalenfrailty.o apply.o binomial-twostage.o biprobit.o claytonoakes.o clusterindex.o cor.o fastcox.o mvn.o pch.o prop-odd.o randomF77.o sim-tools.o survival-twostage.o tools.o tvpack.o -llapack -lblas -lgfortran -lm -lquadmath -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-mets/00new/mets/libs
** R
** data
** demo
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
*** copying figures
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (mets)
* installing *source* package ‘Publish’ ...
** this is package ‘Publish’ version ‘2025.07.24’
** package ‘Publish’ successfully unpacked and MD5 sums checked
** using staged installation
** R
** data
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (Publish)
* installing *source* package ‘riskRegression’ ...
** this is package ‘riskRegression’ version ‘2025.09.17’
** package ‘riskRegression’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C++ compiler: ‘g++ (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c IC-Nelson-Aalen-cens-time.cpp -o IC-Nelson-Aalen-cens-time.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c RcppExports.cpp -o RcppExports.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c aucLoobFun.cpp -o aucLoobFun.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c baseHaz.cpp -o baseHaz.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c calcSeCSC.cpp -o calcSeCSC.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c calcSeCox.cpp -o calcSeCox.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c calculateDelongCovarianceMatrix.cpp -o calculateDelongCovarianceMatrix.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c colCumSum.cpp -o colCumSum.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c confBand.cpp -o confBand.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c getInfluenceFunctionAUC.cpp -o getInfluenceFunctionAUC.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c getInfluenceFunctionBrier.cpp -o getInfluenceFunctionBrier.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c iidCox.cpp -o iidCox.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c predictCIF.cpp -o predictCIF.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c rowCumSum.cpp -o rowCumSum.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c rowSumsCrossprod.cpp -o rowSumsCrossprod.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c sweepCenterScale.cpp -o sweepCenterScale.o
g++ -std=gnu++17 -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG  -I'/home/runner/work/_temp/Library/Rcpp/include' -I'/home/runner/work/_temp/Library/RcppArmadillo/include' -I/usr/local/include   -DARMA_USE_CURRENT -fpic  -g -O2   -c weightedAverageIFCumhazard.cpp -o weightedAverageIFCumhazard.o
g++ -std=gnu++17 -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o riskRegression.so IC-Nelson-Aalen-cens-time.o RcppExports.o aucLoobFun.o baseHaz.o calcSeCSC.o calcSeCox.o calculateDelongCovarianceMatrix.o colCumSum.o confBand.o getInfluenceFunctionAUC.o getInfluenceFunctionBrier.o iidCox.o predictCIF.o rowCumSum.o rowSumsCrossprod.o sweepCenterScale.o weightedAverageIFCumhazard.o -llapack -lblas -lgfortran -lm -lquadmath -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-riskRegression/00new/riskRegression/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (riskRegression)
* installing *source* package ‘pec’ ...
** this is package ‘pec’ version ‘2025.06.24’
** package ‘pec’ successfully unpacked and MD5 sums checked
** using staged installation
** libs
using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c SNull.c -o SNull.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c auc.c -o auc.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c brier_score.c -o brier_score.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c ccr.c -o ccr.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c cindex.c -o cindex.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c init.c -o init.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c pec.c -o pec.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c pecResiduals.c -o pecResiduals.o
gcc -std=gnu2x -I"/opt/R/4.5.1/lib/R/include" -DNDEBUG   -I/usr/local/include    -fpic  -g -O2  -c survest_cox_aalen.c -o survest_cox_aalen.o
gcc -std=gnu2x -shared -L/opt/R/4.5.1/lib/R/lib -L/usr/local/lib -o pec.so SNull.o auc.o brier_score.o ccr.o cindex.o init.o pec.o pecResiduals.o survest_cox_aalen.o -L/opt/R/4.5.1/lib/R/lib -lR
installing to /home/runner/work/_temp/Library/00LOCK-pec/00new/pec/libs
** R
** data
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** checking absolute paths in shared objects and dynamic libraries
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (pec)

The downloaded source packages are in
	‘/tmp/RtmppGEb8d/downloaded_packages’
Successfully installed: pec 
Package already installed: riskRegression 
Package already installed: survival 

===========================================
Package installation completed!
You can now run your R scripts in this directory.
