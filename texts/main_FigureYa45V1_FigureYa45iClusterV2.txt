FigureYa45 iCluster的教程答疑V2
FigureYa45 iCluster的教程答疑V2
Zhougeng Xu, Taojun Ye
2025-05-20
版本更新
在原来的基础上，增加和修改了如下几处内容：
修改了R 3.5.0以后的安装方法(保留低于R 3.5.0之前的安装方法)
增加重要参数的说明
将
iClusterPlus
替换成最新的
iClusterBayes
增加了结果输出部分，用于调用其他R包做热图
增加了几个统计学和机器学习概念的解释
##Version update
On the basis of the original, the following contents have been added
and modified:
-Modified the installation method after R 3.5.0 (retaining the
installation method before R 3.5.0) -Add an explanation of important
parameters -Replace ‘iClusterPlus’ with the latest’ iClusterBayes’`
-Added a result output section for calling other R packages to create
heat maps -Added explanations for several statistical and machine
learning concepts
需求描述
iCluster分析过程答疑。
另外，需要输出分类和特征基因，用于画paper里的这种热图。
##Requirement description
Q&A on the iCluster analysis process.
In addition, it is necessary to output classification and feature
genes for drawing such heat maps in the paper.
出自
https://www.nature.com/articles/nature20805
from
https://www.nature.com/articles/nature20805
可以用
FigureYa17已分类的heatmap
来画heatmap，从本代码输出的
output_clusterMembership.txt
中取一列分类，作为sample分组信息。例图iCluster的两类完全分开，为了达到这种效果，需要单独画1类和2类，然后拼在一起。
You can use the ‘FigureYa17 Classified Heatmap’ to draw a heatmap,
and take a column of classification from the ‘Output_clusterMembership.
txt’ output of this code as the sample grouping information. The two
types of iCluster in the example diagram are completely separated. To
achieve this effect, it is necessary to draw Class 1 and Class 2
separately and then assemble them together.
应用场景
使用iClusterPlus整合多种基因组数据。
肿瘤的分子复杂性体现在基因组、表观组、转录组和蛋白组等多种水平。
一种方法是单独对不同数据类型进行聚类，然后手动合并。而
iCluster
则是同时使用多种来源数据进行整合分析，用于识别肿瘤亚型。
iCluster
在2009年开发，中间经历了很多次的开发升级，目前最新版是Bioconductor上的
iClusterPlus
,
包括
iClusterPlus
和
iClusterBayes
两种算法。三者的区别在于:
iCluster(2009):
使用lasso限制的隐变量回归识别可用于聚类的常见隐变量(common latent
variable)
iClusterPlus(2012): 整合了elasticnet和fused lasso算法,
可以处理ontinuous, count, binary, multi-categorical类数据
iClusterBayes(2018): 改进了算法，比iClusterPlus速度快
隐变量(latent
variable)是一个机器学习中的概念。举例说明，如果一个人面前有三个袋子，他每次抽球的时候都会说自己是从哪个袋子里拿了哪种颜色的球，你在旁边记录每个袋子抽出了什么颜色的球，在他抽取一定次数后，你就能估计每个袋子中不同颜色球的比例。但是如果他最后只汇报他抽的是什么颜色的球，而将从哪个袋子抽球的这一步
隐藏
了，那么选袋子这一步就是隐变量。广义上的隐变量主要就是指”不能被直接观察到，但是对系统的状态和能观察到的输出存在影响的一种东西”
lasso, elastic net, fused lasso 是机器学习中特征选择的实现算法,
也就是找到数据集中有代表性的属性(attribute)。
##Application scenarios
Integrate multiple genomic data using iClusterPlus.
The molecular complexity of tumors is reflected at various levels
such as genome, epigenome, transcriptome, and proteome.
One method is to cluster different data types separately and then
manually merge them. And ‘iCluster’ integrates and analyzes data from
multiple sources simultaneously to identify tumor subtypes.
`ICluster was developed in 2009 and has undergone many development
upgrades. The latest version is iCluster Plus on Bioconductor, which
includes two algorithms: iCluster Plus and iCluster Bayes. The
difference between the three is that:
-ICluster (2009): Identification of common latent variables that can
be used for clustering using lasso restricted latent variable regression
-IClusterPlus (2012): integrates elasticnet and fused lasso algorithms
to handle continuous, count, binary, and multi categorical data
-IClusterBayes (2018): Improved algorithm, faster than iClusterPlus
Latent variable is a concept in machine learning. For example, if a
person has three bags in front of them, every time they draw a ball,
they will say which bag they took a ball of which color from. You can
record the color of the ball drawn from each bag next to them, and after
they draw a certain number of times, you can estimate the proportion of
balls of different colors in each bag. But if he only reports what color
of ball he drew in the end and hides which bag he drew the ball from,
then the step of selecting the bag is a hidden variable. In a broad
sense, latent variables mainly refer to “something that cannot be
directly observed, but has an impact on the system’s state and
observable output”
Lasso, elastic net, fused lasso is an implementation algorithm for
feature selection in machine learning, which involves finding
representative attributes in a dataset.
环境准备
安装iClusterPlus
iClusterPlus
需要通过
biocLite
安装，如果速度慢，将下面代码
#options(...)
中的
#
去掉，则会使用国内镜像.
CRAN镜像备选
国科大:
https://mirrors.ustc.edu.cn/CRAN/
同济大学:
https://mirrors.tongji.edu.cn/CRAN/
兰州大学:
https://mirror.lzu.edu.cn/CRAN/
##Environmental preparation
###Install iClusterPlus
`IClusterPlus needs to be installed through biocLite. If the speed is
slow, remove the # from the # options (…) code below, and a domestic
image will be used
CRAN image backup
-University of Science and Technology of China:<
https://mirrors.ustc.edu.cn/CRAN/
> -Tongji
University:<
https://mirrors.tongji.edu.cn/CRAN/
> -Lanzhou
University:<
https://mirror.lzu.edu.cn/CRAN/
>
#options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
#options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
# R版本大于3.5.0时的安装方法
# Installation method for R version > 3.5.0
if (!requireNamespace("BiocManager"))
    install.packages("BiocManager")
# 检查是否安装了iClusterPlus包，若未安装则通过BiocManager安装
# Check if the iClusterPlus package is installed, if not, install it via BiocManager
if (!requireNamespace("iClusterPlus"))
  BiocManager::install("iClusterPlus")
#R版本小于3.5.0时的安装方法（已注释）
# Installation method for R version < 3.5.0 (commented out)
#source("http://bioconductor.org/biocLite.R")
#biocLite("iClusterPlus")
# 加载iClusterPlus包
# Load the iClusterPlus package
library("iClusterPlus")
其他工具
###Other tools
# 安装DNAcopy和GenomicRanges包（已注释，避免重复安装）
# Install DNAcopy and GenomicRanges packages (commented to avoid reinstallation)
#BiocManager::install("DNAcopy")
#BiocManager::install("GenomicRanges")
# R < 3.5.0版本的安装方法（已注释）
# Installation method for R < 3.5.0 (commented out)
#source("http://bioconductor.org/biocLite.R")
#biocLite("DNAcopy")
#biocLite("GenomicRanges") 

# 加载DNAcopy包 - 用于DNA拷贝数变异分析
# Load the DNAcopy package - for DNA copy number variation analysis
library("DNAcopy")

# 加载GenomicRanges包 - 用于处理基因组区间数据
# Load the GenomicRanges package - for handling genomic interval data
library("GenomicRanges")
输入数据
iClusterPlus
和
iClusterBayes
支持如下类型数据:
binary: 如体细胞变异, 有(1)/无(0)
catergorical: 拷贝数状态: -2 = homozygous deletion; -1 = hemizygous
deletion; 0 = neutral / no change; 1 = gain; 2 = high level
amplification
counts: 如RNA-seq count
continuous: 如芯片表达量数据
测试数据集为TCGA的GBM(glioblastoma, 胶质母细胞瘤)数据集, 可以从
http://www.cbioportal.org/
和
https://portal.gdc.cancer.gov/
中下载. - gbm_mut.txt:
体细胞突变数据. 来自于三个芯片平台(Agilent 244K, SNP6, Illumina 550K),
0表示无，1表示有 - gbm_exp.txt: 来自于不同平台的基因表达量归一化后数据 -
gbm_seg.txt: DNA 拷贝数变异. Level 3经标准化和片段化(normalized and
segmented)数据集.
##Input data
`IClusterPlus and iClusterBayes support the following types of
data:
-Binary: If there is somatic variation, there is (1)/no (0)
-Caterpillar: Copy number status: -2=homogeneous delta; -1 = hemizygous
deletion; 0 = neutral / no change; 1 = gain; 2 = high level
amplification -Counts: such as RNA seq count -Continuous: such as chip
expression level data
The test dataset is TCGA’s GBM (glioblastoma) dataset, which can be
obtained from<
http://www.cbioportal.org/
>And<
https://portal.gdc.cancer.gov/
>Download in the
middle
-Gbm_mut.txt: Somatic mutation data From three chip platforms (Agilent
244K, SNP6, Illumina 550K), 0 represents none, 1 represents present
-Gbm_exp.txt: Normalized gene expression data from different platforms
-Gbm_seg.txt: DNA copy number variation Level 3 is a standardized and
segmented dataset
# 设置读入字符串时不自动转换为因子类型（R语言默认行为）
# Set option to prevent automatic conversion of strings to factors (default behavior in R)
options(stringsAsFactors = FALSE)

# 读取GBM基因突变数据，设置首行为列名，首列为行名，制表符分隔
# Read GBM mutation data with header and row names, tab-separated
gbm.mut.raw <- read.table('gbm_mut.txt', header = T, row.names = 1, sep = "\t")

# 查看突变数据的前3行和前6列，了解数据结构
# View first 3 rows and 6 columns of mutation data to understand structure
gbm.mut.raw[1:3,1:6]
# 读取GBM拷贝数变异分段数据，设置首行为列名，制表符分隔
# Read GBM copy number segmentation data with header, tab-separated
gbm.seg.raw <- read.table('gbm_seg.txt', header = T, sep = "\t")

# 查看拷贝数变异数据的前3行，了解数据结构
# View first 3 rows of segmentation data to understand structure
gbm.seg.raw[1:3,]
# 读取GBM基因表达数据，设置首行为列名，首列为行名，制表符分隔
# Read GBM gene expression data with header and row names, tab-separated
gbm.exp.raw <- read.table('gbm_exp.txt', header = T, row.names = 1, sep = "\t")

# 查看表达数据的前3行和前6列，了解数据结构
# View first 3 rows and 6 columns of expression data to understand structure
gbm.exp.raw[1:3,1:6]
数据预处理
根据
iClusterBayes()
和
tune.iClusterBayes()
的要求，输入数据都必须是
矩阵
,
且每一行表示是不同的样本，每一列表示的基因组的特征,如基因名或者基因区间。
##Data preprocessing
According to the requirements of iClusterBayes() and tune.
iClusterBayes(), the input data must be a * * matrix * *, with each row
representing a different sample and each column representing genomic
features such as gene names or gene intervals.
CNA预处理
CNA(Copy Number Alteration):
过滤掉突变率不高的基因，例如设定阈值2%.
用
apply
对每一个基因用
mean
计算变异频率，根据阈值进行过滤
###CNA preprocessing
CNA (Copy Number Mutation): Filter out genes with low mutation rates,
such as setting a threshold of 2%
Use ‘apply’ to calculate the mutation frequency for each gene using
‘mean’, and filter based on a threshold
# 将基因突变数据转换为矩阵格式
# Convert mutation data frame to matrix format
gbm.mut <- as.matrix(gbm.mut.raw)

# 保留原始数据的行名（基因名）
# Preserve row names (gene names) from original data
row.names(gbm.mut) <- rownames(gbm.mut.raw)

# 设置最小突变频率阈值（保留突变频率>2%的基因）
# Set minimum mutation rate threshold (retain genes mutated in >2% of samples)
min.rate <- 0.02

# 计算每个基因的突变频率（在所有样本中的平均突变率）
# Calculate mutation rate for each gene (average mutation frequency across samples)
mut.rate <- apply(gbm.mut, 2, mean)

# 筛选突变频率高于阈值的基因，创建新的突变矩阵
# Filter genes with mutation rate above threshold to create new matrix
gbm.mut2 <- gbm.mut[, which(mut.rate > min.rate)]

# 查看筛选后的突变数据前5行5列，确认数据结构
# View first 5 rows and columns of filtered mutation data to check structure
gbm.mut2[1:5,1:5]
CNV预处理
由于原始或者标准化的拷贝数数据集具有很高维度和空间相关性,
因此iCluster推荐用R包
DNAcopy
处理, 得到片段化结果。
###CNV preprocessing
Due to the high dimensionality and spatial correlation of raw or
standardized copy number datasets, iCluster recommends using the R
package ‘DNAcopy’ to obtain fragmented results.
# 查看GBM拷贝数变异分段数据的前3行
# View the first 3 rows of GBM copy number variation segmentation data
gbm.seg.raw[1:3,]
移除冗余的拷贝数区域.
Remove redundant copy number regions
# 查看拷贝数变异数据的前3行，了解数据结构
# View first 3 rows of copy number variation data to understand structure
gbm.seg.raw[1:3,]
# 加载生殖细胞CNV参考数据（hg18基因组坐标）
# Load germline CNV reference data (hg18 genome coordinates)
data(variation.hg18.v10.nov.2010)

# 提取CNV区域的染色体、起始和终止位置信息
# Extract chromosome, start, and end position information for CNV regions
cnvregion <- variation.hg18.v10.nov.2010[,3:5] 

# 调用DNAcopy包中的CNregions函数进行CNV区域识别和处理
# Call CNregions function from DNAcopy package to identify and process CNV regions
gbm.cn <- CNregions(seg=gbm.seg,  
                    epsilon = 0,  
                    adaptive = FALSE,  
                    rmCNV=TRUE,  
                    cnv=cnvregion,  
                    frac.overlap = 0.5,  
                    rmSmallseg = TRUE,  
                    nProbes = 5)
# 按样本名排序，确保样本顺序一致
# Sort samples alphabetically to ensure consistent order
gbm.cn <- gbm.cn[order(rownames(gbm.cn)),]

# 查看处理后的CNV数据前10行5列，确认数据结构
# View first 10 rows and 5 columns of processed CNV data to check structure
gbm.cn[1:10,1:5]
重要参数说明:
seg: DNAcopy的CBS片段化后输出结果
epsilon: 当超过临近探针的最大欧式距离时, 两个区域就不会被合并.
epsiolon=0时表示所有区域都不会被合并将n个样本的所有唯一断裂点取并集。
adaptive: 仅当样本数非常大时才设置为TRUE
nProbes: 根据长度对片段进行过滤,和-rmSmallseg=TRUE联用
如果你知道设置细胞的区间，设置
rmCNV=TRUE
,
且
cnv
参数不能为空. CNV信息可从
http://dgv.tcag.ca/dgv/app/downloads?table=DGV_Content_Summary.txt
下载
Important parameter description:
-SEG: CBS Fragmentation of DNAcopy and Output Results -Epsilon: When
the maximum Euclidean distance between adjacent probes is exceeded, the
two regions will not be merged When epsiolon=0, it means that all
regions will not be merged and all unique breakpoints of n samples will
be merged. -Adaptive: Set to TRUE only when the sample size is very
large -NProbes: Filter fragments based on length, combined with -
rmSmallseg=TRUE
If you know the interval for setting cells, set ‘rmCNV=TRUE’, and the
‘cnv’ parameter cannot be empty CNV information can be obtained from<
http://dgv.tcag.ca/dgv/app/downloads?table=DGV_Content_Summary.txt
>Download
芯片表达量预处理
基因表达量数据, 选择样本间变化程度比较高的基因基因。
###Preprocessing of chip expression level
Select genes with relatively high degree of variation between samples
based on gene expression data.
# 将基因表达数据转换为矩阵格式
# Convert gene expression data frame to matrix format
gbm.exp <- as.matrix(gbm.exp.raw)

# 保留原始数据的行名（基因名）
# Preserve row names (gene names) from original data
row.names(gbm.exp) <- row.names(gbm.exp.raw)

# 查看表达矩阵的前5行5列，确认数据结构
# View first 5 rows and columns of expression matrix to check structure
gbm.exp[1:5,1:5]
计算每个基因的方差
Calculate the variance of each gene
gbm.exp.var <- apply(gbm.exp, 2, var)
gbm.exp.var.order <- gbm.exp.var[order(gbm.exp.var, decreasing = T)]
head(gbm.exp.var.order)
选择方差较大的前几个基因，例如前1500, 或者大于某个阈值
由于原来的数据集已经经过了过滤，下面的代码可以不运行，举例说明而已，
Select the top few genes with high variance, such as the top 1500 or
above a certain threshold
Since the original dataset has already been filtered, the following
code can be skipped for illustration purposes only,
# 从排序后的基因表达变异度数据中选择前1500个高变异基因
# Select top 1500 genes with highest expression variability from sorted list
top_var_gene <- names(gbm.exp.var.order[1:1500])

# 可选方案：基于变异度阈值筛选基因（当前被注释掉）
# Alternative method: select genes based on variability threshold (commented out)
# top_var_gene <- names(gbm.exp.var.oder[gbm.exp.var.oder > 1])

# 筛选表达矩阵，仅保留高变异基因
# Subset expression matrix to retain only high-variance genes
gbm.exp <- gbm.exp[, top_var_gene]

# 查看筛选后的表达矩阵维度（样本数 x 基因数）
# Check dimensions of filtered expression matrix (samples x genes)
dim(gbm.exp)
注
: 用于下载的芯片数据已经是经过归一化,
所以此处没有归一化。
最后确保三个数据集拥有
相同的列名
**Note * *: The chip data used for downloading has already been
normalized, so there is no normalization here.
Finally, ensure that the three datasets have * * identical column
names**
# 检查三个数据集(CNV、表达、突变)的行名(样本ID)是否完全一致
# Check if row names (sample IDs) are identical across three datasets (CNV, expression, mutation)
if (identical(rownames(gbm.cn), rownames(gbm.exp)) &
    identical(rownames(gbm.cn), rownames(gbm.mut2)))
  print("所有数据集的行名(样本ID)完全一致")
print("All datasets have identical row names (sample IDs)")
整合分析
For example, it took iClusterBayes about
2
h to
analyze the simulated data sets using 6 cores of a 2.62 GHz 12-core Mac
Pro computer. However, it took the iClusterPlus about
391
h. – “A fully Bayesian latent variable model for
integrative clustering analysis of multi-type omics data”
使用
tune.iClusterBayes
或
iClusterBayes
进行整合数据分析。最多可以使用
6
个不同的基因组特征数据(dt1,dt2,dt3,dt4,dt5,dt6).
主要设置三个参数
dt1,dt2,dt3,dt4,dt5,dt6:
输入数据集，必须都得是
矩阵
！
type: 表示数据服从的可能分布。类似于0,1的使用”binomial”,
连续性数据使用”gaussian”, RNA-Seq的原始数据使用”poisson”
K: 特征数.
iClusterBayes
只能设置一个固定值，
tune.iClusterBayes
是设定一个区间。最终的聚类数=K+1
cpus: 程序并行处理.
Windows下不支持该参数
prior.gamma:
不同数据集的先验概率。这个
值
只能不断试
如果你确定最后可以分成多少类，那么直接用
iClusterBayes
.
###Integrated analysis
For example, it took iClusterBayes about
2
h to
analyze the simulated data sets using 6 cores of a 2.62 GHz 12-core Mac
Pro computer. However, it took the iClusterPlus about
391
h. – “A fully Bayesian latent variable model for
integrative clustering analysis of multi-type omics data”
Use ‘tune. iClusterBayes’ or’ iClusterBayes’ for integrated data
analysis. Up to * * 6 different genomic feature data (dt1, dt2, dt3,
dt4, dt5, dt6) can be used. Three main parameters are set
-Dt1, dt2, dt3, dt4, dt5, dt6: The input dataset must all be a * *
matrix *
! -Type: Indicates the possible distribution that the data
follows. Similar to using “binary” for 0,1, “Gaussian” for continuous
data, and “Poisson” for RNA Seq raw data -K: Feature number
`IClusterBayes’ can only set a fixed value, while ‘tune. iClusterBayes’
sets an interval. The final number of clusters is K+1 -CPUS: Program
parallel processing
This parameter is not supported on
Windows
-Prior.gama: The prior probability of different
datasets. This
* value * * can only be tried continuously
If you are sure how many categories can be divided in the end, then
use ‘iClusterBayes’ directly
# 使用iClusterBayes方法进行多组学数据整合聚类分析
# Perform integrated clustering analysis on multi-omics data using iClusterBayes method

bayfitK4 <- iClusterBayes(dt1 = gbm.mut2,       
                          dt2 = gbm.cn,         
                          dt3 = gbm.exp,        
                    type=c("binomial","gaussian","gaussian"), 
              K=3)
如果无法确定到底能分成多少类，那么建议用
tune.iClusterBayes
,
测试多个K值.
if(!file.exists("Bayfit.RData")){
  date()
  bayfit <- tune.iClusterBayes(cpus=9,
                            dt1=gbm.mut2,dt2=gbm.cn,dt3=gbm.exp,
                    type=c("binomial","gaussian","gaussian"),
                    K=1:6,n.burnin=18000,
                    n.draw=12000,
                    prior.gamma=c(0.5,0.5,0.5),
                    sdev=0.05, thin=3)
  date()
  save.image(file="Bayfit.RData") #需要运行40min，保存到文件里
}
Windows只能单核运行, 建议这一步用Mac或服务器。
下一步，基于BIC或着误差率选择比较合适的特征数K
If it is uncertain how many classes can be divided, it is recommended
to use ‘tune. iClusterBayes’ to test multiple K values
if(!file.exists("Bayfit.RData")){
date()
bayfit <- tune.iClusterBayes(cpus=9,
dt1=gbm.mut2,dt2=gbm.cn,dt3=gbm.exp,
type=c("binomial","gaussian","gaussian"),
K=1:6,n.burnin=18000,
n.draw=12000,
prior.gamma=c(0.5,0.5,0.5),
sdev=0.05, thin=3)
date()
Save. image (file="Bayfit. RData") # needs to run for 40 minutes, save to a file
}
Windows can only run on a single core, it is recommended to use a Mac
or server for this step.
Next, select the appropriate number of features K based on BIC or
error rate
# 加载预计算的iClusterBayes模型结果
# Load precomputed iClusterBayes model results
load("Bayfit.RData")

# 初始化存储不同K值模型的BIC和偏差比的变量
# Initialize variables to store BIC and deviance ratio for different K values
allBIC = NULL
devratio = NULL

# 获取模型集合中不同K值的数量
# Get the number of different K values in the model collection
nK = length(bayfit$fit)

# 遍历每个K值的模型结果
# Loop through each model result with different K values
for(i in 1:nK){
  # 收集每个K值对应的BIC信息
  # Collect BIC information for each K value
  allBIC = c(allBIC,bayfit$fit[[i]]$BIC)
  # 收集每个K值对应的偏差比信息
  # Collect deviance ratio information for each K value
  devratio = c(devratio,bayfit$fit[[i]]$dev.ratio)
}

# 设置绘图参数：调整边距，将两个图并排显示
# Set plotting parameters: adjust margins, display two plots side by side
par(mar=c(4.0,4.0,0.5,0.5),mfrow=c(1,2))

# 绘制BIC随聚类数K变化的曲线
# Plot BIC values against the number of clusters (K)
plot(1:nK, allBIC,type="b",xlab="聚类数 k",ylab="BIC值",pch=c(1,1,19,1,1,1))

# 绘制偏差比随聚类数K变化的曲线
# Plot deviance ratio against the number of clusters (K)
plot(1:nK,devratio,type="b",xlab="聚类数 k",ylab="偏差比",pch=c(1,1,19,1,1,1))
贝叶斯信息准则(BIC, Bayesian Information Criterion):
选择模型的一个标准, 只要记住
越小越好
偏差比(deviance
ratio), 定于来自于glmnet包， dev.ratio=1-devriance/nulldev,
只要记住
越大越好
根据上图，K=3是最优解. 提取每个样本的分类信息
Bayesian Information Criterion (BIC): A criterion for selecting a
model, as long as it is remembered that the smaller the * *, the
better** The deviation ratio is determined by the glmnet package, dev.
ratio=1- deviation/null dev, as long as it is remembered that the larger
the * *, the better**
According to the above figure, K=3 is the optimal solution Extract
classification information for each sample
# 从已拟合的iClusterBayes模型集合中选择最优聚类结果
# Select the optimal clustering results from the fitted iClusterBayes model collection

# 基于之前BIC和偏差比分析，选择第三个模型(K=3)作为最优模型
# Based on previous BIC and deviance ratio analysis, select the third model (K=3) as optimal

# bayfit$fit[[3]]$clusters 包含:
# - 每个样本的聚类归属(1-3类)
# - 基于多组学数据整合的分子亚型分类结果

best.cluster.Bayes = bayfit$fit[[3]]$clusters
作图
iCluster
的本质是数据分析，因此最后的热图展示不作为本次教程的重点。仅以自带的
plotHeatmap
展示下结果。
###Draw a graph
`The essence of iCluster is data analysis, so the final heatmap
display is not the focus of this tutorial. Only display the results
using the built-in ‘plotHeatmap’.
# 加载必要的包用于数据处理和可视化
# Load required packages for data processing and visualization
library(magrittr)
library(lattice)   
library(gplots)
# 提取CNV数据的染色体位置信息用于后续绘图
# Extract chromosome position information from CNV data for plotting
chr <- unlist(strsplit(colnames(gbm.cn), '\\.')) %>%  
  extract(seq(1,length(.),by=2)) %>%  
  gsub("chr","",.) %>%  
  as.numeric()  

# 对CNV数据进行值域限制，避免极端值影响可视化效果
# Limit the range of CNV data to improve visualization
cn.image <- gbm.cn
cn.image[cn.image > 1.5] <- 1.5  
cn.image[cn.image < -1.5] <- -1.5  

# 对表达数据进行值域限制，避免极端值影响可视化效果
# Limit the range of expression data to improve visualization
exp.image <- gbm.exp
exp.image[exp.image > 2.5] <- 2.5  
exp.image[exp.image < -2.5] <- -2.5  

# 配置热图配色方案
# Configure color schemes for heatmaps
bw.col <-  colorpanel(2,low="white",high="black")  
col.scheme = alist()
col.scheme[[1]] <- bw.col  
col.scheme[[2]] <- bluered(256)  
col.scheme[[3]] <- bluered(256)  

# 绘制多组学整合热图，展示聚类结果
# Plot integrated multi-omics heatmap to visualize clustering results
plotHeatmap(fit= bayfit$fit[[3]] ,  
            datasets=list(gbm.mut2,cn.image,exp.image),  
            type=c("binomial","gaussian","gaussian"),  
            col.scheme = col.scheme,  
            row.order=c(F,F,T),  
            chr=chr,  
            plot.chr=c(F,T,F),  
            sparse=c(T,F,T),  
            cap=c(F,T,F))
输出文件
把best.cluster.Bayes
、特征基因和值保存到文件，就可以用自己的heatmap代码画热图了。
##Output file
Save best.cluster.Bayes, feature genes, and values to a file, and you
can use your own heatmap code to draw a heatmap.
# 将最优聚类结果保存为制表符分隔文本文件
# Save the optimal clustering results to a tab-separated text file
write.table(best.cluster.Bayes, 
            file="output_clusterMembership.txt",
            sep='\t',      
            quote=F)       

# 将处理后的基因突变数据转置并保存为CSV文件
# Transpose and save processed mutation data to CSV file
write.csv(t(gbm.mut2), "output_mut2.csv", 
          quote = F)    

# 将处理后的拷贝数变异数据转置并保存为CSV文件
# Transpose and save processed copy number variation data to CSV file
write.csv(t(cn.image), "output_cn.csv", 
          quote = F)   

# 将处理后的基因表达数据转置并保存为CSV文件
# Transpose and save processed gene expression data to CSV file
write.csv(t(exp.image), "output_exp.csv", 
          quote = F)
sessionInfo()