FigureYa119Multiclasslimma
FigureYa119Multiclasslimma
Author(s)
: Xiaofan Lu, Taojun Ye
Reviewer(s)
: Ying Ge
Date
: 2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
用limma实现多组差异分析。能用来替换FigureYa109SubtypeGSEA中的配对差异表达过程（亚型数目>=3），并跟它无缝对接。
Requirement description
Implement multi group difference analysis using limma. Can be used to
replace the paired differential expression process (subtype
number>=3) in FigureYa109SubtypeGSEA and seamlessly integrate with
it.
应用场景
结合FigureYa109subtypeGSEA，分析每一组与其他样品的差异基因，进而找出亚型特异富集的通路；
结合FigureYa116supervisedCluster，分析每一组与其他样品的差异基因，进而找出亚型特异的marker基因。
注意：
本次不涉及批次效应消除，若样本间含有批次效应，请阅读limma相关document并修改该脚本，在设计矩阵中纳入batch
effect。
这里针对FPKM/RPKM或芯片数据作为输入的情况，如果你的数据是read
count，请参考FigureYa118MulticlassDESeq2
Application scenarios
Based on Figure Ya109 subtype GSEA, analyze the differentially
expressed genes between each group and other samples, and identify
subtype specific enriched pathways;
Using FigureYa116supervisedCluster, analyze the differentially
expressed genes between each group and other samples, and identify
subtype specific marker genes.
**Note: * * This time does not involve batch effect elimination. If
there are batch effects between samples, please read the relevant
documents of limma and modify the script to include batch effects in the
design matrix.
For the case where FPKM/RPKM or chip data is used as input,
if your data is read count, please refer to
FigureYa118MulticlassDESeq2
环境设置
Environment settings
Use domestic image installation package
BiocManager::install("affy")
BiocManager::install("affyPLM")
source("install_dependencies.R")
# 加载limma包 - 用于基因表达数据分析和差异表达分析
# Load the limma package - for gene expression data analysis and differential expression analysis
library(limma)

# 加载affy包 - 用于Affymetrix基因芯片数据的预处理和分析
# Load the affy package - for preprocessing and analysis of Affymetrix gene chip data
library(affy)
# 加载affyPLM包 - 提供基于探针水平模型的Affymetrix芯片数据分析方法
# Load the affyPLM package - provides probe-level model-based methods for Affymetrix chip data analysis
library(affyPLM)
# 设置环境变量使R显示英文错误信息，便于问题排查和社区求助
# Set environment variable to display English error messages for easier troubleshooting and community support
Sys.setenv(LANGUAGE = "en") 

# 禁止字符串自动转换为因子类型，避免数据处理中的意外行为
# Prevent automatic conversion of strings to factors to avoid unexpected behavior in data processing
options(stringsAsFactors = FALSE)
自定义函数，分别比较每一组跟其他样品之间的差异，如果有更多组，按规律补充进去即可
Customize functions to compare the differences between each group and
other samples separately. If there are more groups, simply add them
according to the pattern
# 创建需要配对比较的列表
# Create a list of paired comparisons for differential analysis
createList <- function(group=NULL) {
  
  tumorsam <- names(group)
  sampleList = list()
  treatsamList =list()
  treatnameList <- c()
  ctrlnameList <- c()
  
  #A-1: 类1 vs 其他
  # Class 1 vs Others
  sampleList[[1]] = tumorsam
  treatsamList[[1]] = intersect(tumorsam, names(group[group=="immune"])) # 需要根据实际亚型修改 / Modify according to actual subtypes
  treatnameList[1] <- "immune" # 处理组亚型名称 / Name of the treatment subtype
  ctrlnameList[1] <- "Others" # 对照组名称 / Name of the control group
  
  #A-2: 类2 vs 其他
  # Class 2 vs Others
  sampleList[[2]] = tumorsam
  treatsamList[[2]] = intersect(tumorsam, names(group[group=="keratin"]))
  treatnameList[2] <- "keratin"
  ctrlnameList[2] <- "Others"
  
  #A-3: 类3 vs 其他
  # Class 3 vs Others
  sampleList[[3]] = tumorsam
  treatsamList[[3]] = intersect(tumorsam, names(group[group=="MITF-low"]))
  treatnameList[3] <- "MITF-low"
  ctrlnameList[3] <- "Others"
  
  #如果有更多类，按以上规律继续写
  # Add more comparisons following the same pattern if needed

  return(list(sampleList, treatsamList, treatnameList, ctrlnameList))
  
}

# 配对limma差异表达分析
# Paired differential expression analysis using limma
twoclasslimma <- function(res.path=NULL, expr=NULL, prefix=NULL, complist=NULL, overwt=FALSE) {
  # 参数说明 / Parameter Description:
  # res.path: 结果文件保存路径 / Path to save result files
  # expr: 表达矩阵，行名为基因，列名为样本 / Expression matrix with genes as rows and samples as columns
  # prefix: 结果文件前缀 / Prefix for result files
  # complist: 比较组列表，由createList函数生成 / Comparison list generated by createList function
  # overwt: 是否覆盖已存在的结果文件 / Whether to overwrite existing result files
  
  sampleList <- complist[[1]]
  treatsamList <- complist[[2]]
  treatnameList <- complist[[3]]
  ctrlnameList <- complist[[4]]
  allsamples <- colnames(expr)
  
  options(warn=1)
  for (k in 1:length(sampleList)) { # 循环处理每一组比较 / Process each comparison group
    samples <- sampleList[[k]]
    treatsam <- treatsamList[[k]] 
    treatname <- treatnameList[k]
    ctrlname <- ctrlnameList[k]
    
    compname <- paste(treatname, "_vs_", ctrlname, sep="") # 生成比较组名称 / Generate comparison name
    tmp = rep("others", times=length(allsamples))
    names(tmp) <- allsamples
    tmp[samples]="control"
    tmp[treatsam]="treatment"
    outfile <- file.path( res.path, paste(prefix, "_limma_test_result.", compname, ".txt", sep="") )
    if (file.exists(outfile) & (overwt==FALSE)) { # 避免重复计算已存在的结果 / Skip existing results
      cat(k, ":", compname, "exists and skipped;\n")
      next
    }
    
    pd <- data.frame(Samples=names(tmp),Group=as.character(tmp),stringsAsFactors = F)
    
    design <-model.matrix(~ -1 + factor(pd$Group, levels=c("treatment","control"))) # 设计矩阵，可根据需要添加批次效应 / Design matrix, can add batch effects if needed
    colnames(design) <- c("treatment","control")
    
    # 对数转换
    # Log transformation to stabilize variance
    gset <- log2(expr + 1) # 避免信号值为0导致计算错误 / Avoid log(0) errors
    
    # 差异表达分析流程，参数细节请参考limma文档
    # Differential expression analysis workflow, see limma documentation for parameter details
    fit <- lmFit(gset, design=design);
    contrastsMatrix <- makeContrasts(treatment - control, levels=c("treatment", "control"))
    fit2 <- contrasts.fit(fit, contrasts=contrastsMatrix)
    fit2 <- eBayes(fit2, 0.01)
    tT <- topTable(fit2, adjust="fdr", sort.by="B", number=100000)
    tT <- subset(tT, select=c("logFC","t","B","P.Value","adj.P.Val"))
    colnames(tT) <- c("log2FC","t","B","PValue","FDR")
    tT <- tT[order(tT$FDR),]
    
    write.table(tT, file=outfile, row.names=T, col.names=NA, sep="\t", quote=F)
    cat(k, ",")
  }
  options(warn=0)
  
}
输入文件
Input file
# 读取表达矩阵 - 输入文件为制表符分隔的FPKM表达量矩阵
# Read expression matrix - input file is a tab-separated FPKM expression matrix
expr <- read.table("easy_input_FPKM.txt",sep = "\t",header = T,check.names = F,stringsAsFactors = F,row.names = 1)

expr[1:3, 1:3] # 查看表达矩阵前3行3列的内容 / View first 3 rows and 3 columns of expression matrix
# 读取样本亚型信息 - 包含样本ID及其对应的分子亚型分类
# Read sample subtype information - contains sample IDs and their corresponding molecular subtype classifications
subt <- read.table("easy_input_subtype.txt", sep = "\t", check.names = F, stringsAsFactors = F, header = T, row.names = 1)

head(subt) # 查看亚型信息数据前几行 / View first few rows of subtype information
n.sub.label <- unique(subt$TCGA_Subtype) # 获取所有唯一的亚型名称 / Get all unique subtype names
# Unique subtype names
n.sub.label
n.sub <- length(table(subt$TCGA_Subtype)) # 计算亚型的数量 / Calculate number of subtypes
# Number of distinct subtypes
n.sub
开始分析
Start analyzing
在当前文件夹会生成3个文件，可以作为FigureYa116supervisedCluster的输入：
SKCM_limma_test_result.immune_vs_Others.txt
SKCM_limma_test_result.keratin_vs_Others.txt
SKCM_limma_test_result.MITF-low_vs_Others.txt
如果想跟FigureYa109SubtypeGSEA无缝对接，就继续运行下面这段，生成degs.list，然后从FigureYa109SubtypeGSEA里的“自定义分析函数”开始运行，手动把“自定义分析函数”里第160行的
geneList <- degs$log2FoldChange
改为
geneList <- degs$log2FC
：
Three files will be generated in the current folder, which can be
used as input for FigureYa116supervisedCluster:
SKCM_limma_test_result.immune_vs_Others.txt
SKCM_limma_test_result.keratin_vs_Others.txt
SKCM_limma_test_result.MITF-low_vs_Others.txt
If you want to seamlessly integrate with FigureYa109SubtypeGSEA,
continue running the following paragraph to generate degs.list, and then
start running from “Custom Analysis Functions” in
FigureYa109SubtypeGSEA. Manually change the “geneList<- degs
$log2FoldChange” in line 160 of “Custom Analysis Functions” to
“geneList<- degs $log2FC”:
# 定义差异表达分析结果文件路径列表
# Define paths to differential expression analysis result files
DEfiles <- c("SKCM_limma_test_result.immune_vs_Others.txt",
             "SKCM_limma_test_result.keratin_vs_Others.txt",
             "SKCM_limma_test_result.MITF-low_vs_Others.txt")

# 初始化空列表用于存储各亚型差异表达基因结果
# Initialize empty list to store differential expression results for each subtype
degs.list <- list()

# 循环读取各亚型差异表达分析结果
# Loop through each subtype's differential expression results
for (i in 1:n.sub) {
  # 读取差异表达分析结果文件
  # Read differential expression analysis results
  degs <- read.table(DEfiles[i],sep = "\t",header = T,check.names = F,stringsAsFactors = F,row.names = 1)
  
  # 查看结果文件前几行
  # Preview the first few rows of the results
  head(degs)
  
  # 去除含有缺失值的行并将结果存入列表，以亚型名称作为列表元素名
  # Remove rows with missing values and store results in list with subtype name as key
  degs.list[[n.sub.label[i]]] <- as.data.frame(na.omit(degs))
}
sessionInfo()