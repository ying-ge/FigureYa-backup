FigureYa112venn
FigureYa112venn
Author(s)
: Yuhui Li, Taojun Ye
Reviewer(s)
: Ying Ge
Date
: 2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
venny
http://bioinfogp.cnb.csic.es/tools/venny/
，新出来个选项，颜色填充by%，然而只能填充灰色，我想要彩色，而且venny只能保存成png，我想要pdf矢量图。没有现成的R包能直接实现这样的按百分比填充颜色的效果。输入四个基因列表，画出venn图。
Requirement description
venny<
http://bioinfogp.cnb.csic.es/tools/venny/
>A new
option has been introduced, color filling by%, but only gray can be
filled. I want color, and Venny can only save as PNG. I want a PDF
vector image. There is no ready-made R package that can directly achieve
the effect of filling colors by percentage. Enter four gene lists and
draw a Venn diagram.
出自
http://bioinfogp.cnb.csic.es/tools/venny/
from
http://bioinfogp.cnb.csic.es/tools/venny/
应用场景
展示4组元素（例如差异表达基因）数量重叠，数量多颜色深，数量少颜色浅，一目了然。
Application scenarios
Display 4 groups of elements (such as differentially expressed genes)
with overlapping quantities, with darker colors for larger quantities
and lighter colors for smaller quantities, making it clear at a
glance.
环境设置
Environment settings
source("install_dependencies.R")
source("plotVenn4d.R") # from colorfulVennPlot package
# 加载Venn图绘制包（Load package for drawing Venn diagrams）
library(VennDiagram)
# 加载数据可视化包（Load data visualization package）
library(ggplot2)
# 加载数据处理包（Load data processing package）
library(dplyr)
# 加载管道操作符包（Load pipe operator package）
library(magrittr)
# 加载数据读取包（Load data reading package）
library(readr)
# 加载函数式编程包（Load functional programming package）
library(purrr)
# 加载颜色方案包（Load color palette package）
library(RColorBrewer)
# 加载图形设备包（Load graphics device package）
library(grDevices)
# 加载高级图形渲染包（Load advanced graphics rendering package）
library(Cairo)
# 加载字符串处理包（Load string processing package）
library(stringr)
# 加载数据框增强包（Load enhanced data frame package）
library(tibble)
# 加载数据整理包（Load data tidying package）
library(tidyr)
# 设置英文环境以显示英文报错信息（Set English environment to display English error messages）
Sys.setenv(LANGUAGE = "en") 

# 禁止字符串自动转换为因子类型（Disable automatic conversion of strings to factors）
options(stringsAsFactors = FALSE)
输入文件
四个基因列表文件，每个文件中是这组内的所有基因名。
Input file
Four gene list files, each containing the names of all genes within
this group.
# 生成文件名列表（Generate a list of file names）
filenames <- paste0("easy_input_", 1:4, ".txt")

# 读取多个文本文件并存储为列表（Read multiple text files and store as a list）
# map函数对每个文件名执行read_table读取数据（The map function reads data for each file name using read_table）
# 然后提取第一列数据（Then extract the first column of data）
data_ls <- filenames %>% map(., ~read_table(.x, col_names = FALSE)) %>% map(., ~.x$X1)
# 重命名列表元素（Rename list elements）
names(data_ls) <- paste0("G", 1:length(data_ls))

# 查看数据结构（View data structure）
str(data_ls)
# 使用venn.diagram包绘制韦恩图检验数据（Use the venn.diagram package to draw a Venn diagram for data verification）
# x参数传入数据集（The x parameter takes the dataset）
# filename指定输出图片路径（The filename parameter specifies the output image path）
venn.diagram(x = data_ls, filename = "venn_test.png")
下面将用
colorfulVennPlot
包画图，这个包画韦恩图最全，当然使用也是最复杂的。
优点：
可以自己定义每个区域的颜色，这刚好能够满足我们按比例填充颜色的需求。
缺点：
每个区域的数字也要自己来提供，就需要先计算。
包里自带的画四组venn图的函数长这样：
Below, we will use the colorfulVennPlot package to draw Venn
diagrams, which is the most comprehensive and complex to use.
Advantages: You can define the color of each area by yourself, which
perfectly meets our need to fill colors proportionally. Disadvantage:
The numbers for each region also need to be provided by oneself, so they
need to be calculated first. The function length for drawing four sets
of Venn diagrams included in the package is as follows:
plotVenn4d(x, labels = c('A','B','C','D'),
  Colors = c('red', 'yellow', 'green', 'pink','darkgreen','blue','lightblue','tan', 
  'yellowgreen','orange','purple','white','grey','plum','brown'),
  Title = NULL, shrink = 1, rot=45)
参数解释：
x
,
一个带有
names
属性的数字向量，其长度与韦恩图中
子区域
数量一致,
通常用数字代表
子区域
中元素的数量。
其名称属性为
0
与
1
的组合的字符串，
1
表示在韦恩图中某个类别为
肯定
，
0
表示否定。
如
"1010"
表示在左起第1个椭圆内，且在左起第3个椭圆内，且不在左起第2个或第4个椭圆内。
labels
,
表示指定椭圆的标签，从左到右排列，字符串向量指定。
Colors
,
表示指定
子区域
的fill颜色，顺序与
x
一一对应。
rot
, 表示指定韦恩图的旋转角度。
Title
, 表示指定标题。
下面将根据
plotVenn4d
的特点构造数据：
计算
子区域
编号。
根据
子区域
编号计算各个
子区域
中元素的数量。
计算
子区域
的数量占所有区域数量之和的
百分比
。
根据
百分比
构造颜色向量。
Parameter explanation: x is a numerical vector with the name
attribute, whose length is consistent with the number of subregions in
the Venn diagram, and is usually represented by numbers to indicate the
number of elements in the subregions. A string whose name attribute is a
combination of 0 and 1, where 1 represents a positive category in the
Venn diagram and 0 represents a negative category. For example, “1010”
indicates that it is within the first ellipse from the left, within the
third ellipse from the left, and not within the second or fourth ellipse
from the left. labels, Indicate the label of the specified ellipse,
arranged from left to right, with a string vector specified. Colors,
Indicate the fill color of the specified subregion, in order
corresponding to x one by one. rot, Indicates the rotation angle of the
specified Venn diagram. Title, Indicate the specified title. The
following will construct data based on the characteristics of
plotFenn4d: calculate the subregion number. Calculate the number of
elements in each subregion based on the subregion number. Calculate the
percentage of the number of subregions to the sum of all regions.
Construct color vectors based on percentages.
计算子区域元素数量、百分比
Calculate the number and percentage of elements in the
subregion
# 计算子区域数量（Calculate the number of sub-regions）
# 公式为2^n - 1，n为数据集数量（Formula: 2^n - 1, where n is the number of datasets）
number_area <- 2^length(data_ls) - 1

# 子区域编号（Sub-region numbering）
## 自定义函数：将整数转换为二进制字符串（Custom function: Convert integer to binary string）
intToBin <- function(x){
  if (x == 1)
    1
  else if (x == 0)
    NULL
  else {
   mod <- x %% 2
   c(intToBin((x-mod) %/% 2), mod)
  }
}

# 生成子区域编号（Generate sub-region codes）
x_area <- seq(number_area) %>% map(., ~intToBin(.x)) %>%  # 转换为二进制字符串（Convert to binary string）
  map_chr(., ~paste0(.x, collapse = "")) %>%  # 合并为字符串（Combine into string）
  map_chr(., ~str_pad(.x, width = length(data_ls), side = "left", pad = "0"))  # 左侧补零（Pad with zeros on the left）
计算子区域中元素的数量、百分比：
Calculate the number and percentage of elements in the
subregion:
# 计算所有数据集的并集（Calculate the union of all datasets）
G_union <- data_ls$G1 %>% union(data_ls$G2) %>% 
  union(data_ls$G3) %>% union(data_ls$G4)

# 自定义函数：计算特定子区域中的元素（Custom function: Calculate elements in a specific sub-region）
area_calculate <- function(data_ls, character_area){
  # 将二进制编码转换为逻辑向量（Convert binary code to logical vector）
  character_num <- 1:4 %>% map_chr(., ~substr(character_area, .x, .x)) %>% 
    as.integer() %>% as.logical()
  
  # 初始化元素集合为并集（Initialize element set as the union）
  element_alone <- G_union
  
  # 对每个数据集进行交集或差集运算（Perform intersection or difference operations for each dataset）
  for (i in 1:4) {
    element_alone <- 
      if (character_num[i]) {
        intersect(element_alone, data_ls[[i]])  # 如果编码位为1，则取交集（If code bit is 1, take intersection）
      } else {
        setdiff(element_alone, data_ls[[i]])  # 如果编码位为0，则取差集（If code bit is 0, take difference）
      }
  }
  return(element_alone)  # 返回子区域元素集合（Return element set of the sub-region）
}

# 计算每个子区域的元素（Calculate elements for each sub-region）
element_ls <- map(x_area, ~area_calculate(data_ls = data_ls, character_area = .x))

# 计算每个子区域的元素数量（Calculate the number of elements in each sub-region）
quantity_area <- map_int(element_ls, length)

# 计算每个子区域元素数量的百分比（Calculate the percentage of elements in each sub-region）
percent_area <- (quantity_area / sum(quantity_area)) %>% round(3)  # 四舍五入保留3位小数（Round to 3 decimal places）
percent_area <- (percent_area * 100) %>% paste0("%")  # 转换为百分比格式（Convert to percentage format）
计算每个区域的颜色
使用
RColorBrewer
中的色板构造颜色向量。
Calculate the color of each region
Construct color vectors using the palette in RColorBrewer.
# 计算色板长度（Calculate the length of the color palette）
# 基于元素数量的范围确定（Determined by the range of element counts）
length_pallete <- max(quantity_area) - min(quantity_area) + 1

# 生成颜色渐变（Generate color gradient）
# 使用YlGn调色板，可以替换为其他调色板（Use YlGn color palette, can be replaced with others）
# 可选调色板: Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu, YlOrBr, YlOrRd
color_area <- colorRampPalette(brewer.pal(n = 7, name = "YlGn"))(length_pallete)

# 创建颜色映射表（Create color mapping table）
color_tb <- tibble(quantity = seq(min(quantity_area), max(quantity_area), by = 1),
                   color = color_area) 

# 数据整理与颜色映射（Data organization and color mapping）
# 按元素数量分组并嵌套数据（Group and nest data by element count）
# 连接颜色映射表（Join color mapping table）
# 按数量排序并展开数据（Sort by quantity and unnest data）
nest1 <- tibble(quantity = quantity_area, percent = percent_area, area = x_area) %>% 
  group_by(quantity) %>% nest() %>% 
  left_join(color_tb, by = "quantity") %>% 
  arrange(quantity) %>% 
  unnest()
开始画图
Start drawing
# 准备Venn图数据：显示数量（Prepare Venn diagram data: Show quantities）
regions <- nest1$quantity
names(regions) <- nest1$area

# 使用CairoPDF创建高质量PDF（Create high-quality PDF using CairoPDF）
CairoPDF(file = "venn_num.pdf", width = 8, height = 6)
plot.new()  # 初始化绘图（Initialize plotting）

# 绘制4维Venn图（Plot 4-dimensional Venn diagram）
# regions: 各区域数值（Values for each region）
# Colors: 颜色映射（Color mapping）
# Title: 标题（Title）
# labels: 各组标签（Labels for each group）
plotVenn4d(regions, Colors = nest1$color, Title = "", 
           labels = paste0("G", 1:4)) # 标签顺序与输入文件对应（Labels correspond to input files）
dev.off()  # 关闭绘图设备以保存文件（Close plotting device to save file）
# 准备Venn图数据：显示百分比（Prepare Venn diagram data: Show percentages）
regions <- nest1$percent
names(regions) <- nest1$area

# 创建百分比版本的Venn图（Create percentage version of Venn diagram）
CairoPDF(file = "venn_percent.pdf", width = 8, height = 6)
plot.new()  # 初始化绘图（Initialize plotting）
plotVenn4d(regions, Colors = nest1$color, Title = "", 
           labels = paste0("G", 1:4)) # 标签顺序与输入文件对应（Labels correspond to input files）
dev.off()  # 关闭绘图设备以保存文件（Close plotting device to save file）
后期处理
输出的pdf是矢量图，可以用Illustrator等软件打开，调整字号等。
参考来源：
一些漂亮的venn图
如何使用R来绘制韦恩图（Venn
Diagram）
用
R 的 venn 包画五组数据的文氏图
R语言画维恩图–VennDiagram
R语言基础绘图——韦恩图
详解R语言画韦恩图
colorfulVennPlot
colorfulVennPlot源代码
数字转二进制
Post processing
The output PDF is a vector image, which can be opened with software
such as Illustrator and adjusted for font size.
Reference source:
[Some beautiful Venn pictures]（
https://www.cnblogs.com/xianghang123/archive/2013/03/25/2980623.html
)
How to use R to draw Venn Diagram（
http://blog.sciencenet.cn/home.php?mod=space&uid=2985160&do=blog&id=957210
)
[Draw Venn diagrams of five sets of data using R’s Venn package]（
https://nachtzug.xyz/2019/01/19/venn-diagram-with-R-venn-package/
)
[R Language Drawing VennDiagram]（
https://www.jianshu.com/p/a653ea616407
)
[Basic Drawing of R Language - Wayne Diagram]（
https://shengxin.ren/article/130
)
[Detailed explanation of R language drawing Wayne diagram]（
https://blog.csdn.net/u011808596/article/details/80974250
)
*
colorfulVennPlot
[ColorfulVennPlot Source Code]（
https://github.com/cran/colorfulVennPlot/tree/master/R
)
[Convert numbers to binary]（
https://stackoverflow.com/questions/12088080/how-to-convert-integer-number-into-binary-vector
)
Session Info
sessionInfo()