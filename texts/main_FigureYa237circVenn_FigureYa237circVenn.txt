FigureYa237circVenn
FigureYa237circVenn
Author(s)
: Xiao Gu
Date
: 2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
我想实现这幅韦恩图，觉得蛮有意思的
Requirement Description
I want to draw this Venn diagram, I think it’s quite interesting
出自
https://www.mdpi.com/2073-4425/11/5/544
from
https://www.mdpi.com/2073-4425/11/5/544
Figure 1. Venn diagram showing the gene expression profile of plant
organs. Each compartment indicates the included organs and the number of
genes expressed in it. A gene is considered expressed in an organ when
its expression is > -2 log2 reads per kilobase per million mapped
reads (RPKM) and “not expressed” when its expression is ≤ -2 log2
RPKM.
应用场景
展示多组之间的overlap genes、以及每组specific
genes，通常会用到venn图（可参考FigureYa112venn），有太多组需要对比的话还可以像例文这样画成环形图。
Application Scenarios
To show the overlap genes between multiple groups and each specific
gene, a venn diagram is usually used (FigureYa112venn), and if there are
too many groups to compare, you can draw a donut chart like the example
text.
环境设置
Environment settings
source("install_dependencies.R")
library(ggVennDiagram) # 找overlap基因 # Find overlap genes
library(ggplot2)
library(magrittr)
library(RColorBrewer)

Sys.setenv(LANGUAGE = "en") #显示英文报错信息 # An error message is displayed in English
options(stringsAsFactors = FALSE) #禁止chr转成factor # chr is not allowed to be converted to factor
输入差异表达分析结果
如果你的数据已经找完overlap，并整理成easy_input.csv的格式，就可以跳过这步，直接进入“输入overlap”。
Enter the results of the differential expression analysis
If your data has already been found for overlapping and organized
into a easy_input.csv format, you can skip this step and go directly to
“Enter Overlap”.
输入文件
SKCM_*_test_result.*.txt，差异表达分析结果，出自FigureYa118MulticlassDESeq2和FigureYa120MulticlassedgeR。
Input files
SKCM_*_test_result.*.txt, differential expression analysis results
from FigureYa118MulticlassDESeq2 and FigureYa120MulticlassedgeR.
并不局限于差异表达分析结果文件。只要每个文件中有一列ID即可。
It is not limited to differential expression analysis result files.
As long as there is a column ID in each file, it is sufficient.
怎样获得差异表达分析结果？
用FigureYa59Plus_GEO2DEG获得芯片的差异表达分析结果文件
easy_input_limma.csv
用FigureYa118MulticlassDESeq2、FigureYa119Multiclasslimma和FigureYa120MulticlassedgeR获得RNA-seq的差异表达分析结果。
How do I get the results of differential expression analysis?
Obtain the differential expression analysis result file
‘easy_input_limma.csv’ of the chip with FigureYa59Plus_GEO2DEG
Differential expression analysis of RNA-seq was obtained with
FigureYa118MulticlassDESeq2, FigureYa119Multiclasslimma, and
FigureYa120MulticlassedgeR.
fnames <- Sys.glob("*.txt") # 读取当前文件夹下的所有txt文件 # Read all txt files in the current folder
fnames # 检查一下读取的文件名 # Check the file name of the read
#根据自己的数据修改阈值，不根据FDR筛选基因的话就删掉这行
# Modify the threshold according to your own data, and delete this line if you do not screen genes based on FDR
adjcutoff <- 0.05
# 自定义函数读取文件并筛选差异表达基因，只保留基因名
# The custom function reads the file and screens the differentially expressed genes, keeping only the gene name
read_cut_ID <- function(file){
  df <- read.table(file, header = T)
  DEG <- df[df$FDR <= adjcutoff, ]$id #不想根据FDR筛选基因的话就删掉这行，改用下一行 # If you don't want to screen genes based on FDR, delete this line and use the next line instead
  # DEG <- df$id 
}
fdataset <- lapply(fnames, read_cut_ID)

names(fdataset)
# 把组名改为字母ABCD等等
# Change the group name to the letters ABCD, etc
names(fdataset) <- LETTERS[1:length(fnames)]
names(fdataset)
找overlap
使用ggVennDiagram包里的process_region_data处理数据，统计任意并集元素。
Find overlap
Use the process_region_data in the ggVennDiagram package to process
data and count arbitrary union elements.
set <- process_region_data(venn = Venn(fdataset)) %>% as.data.frame(.)

dt_all <- set[,c("count", "name")]
colnames(dt_all) <- c("num", "name")

# 将ggVennDiagram包里面name列两个元素之间的..删除
# Delete the two points between the two elements in the name column in the ggVennDiagram package
dt_all$name <- gsub("\\..", "\\", dt_all$name)

# 根据自己情况决定是否删除没有overlap的区域（即overlap基因数为0），
# Decide whether to delete the non-overlapping region (i.e., the number of overlapping genes is 0) according to your own situation.
#dt_all %<>% subset(., num!=0) # 删除overlap基因数为0的区域
画图
Drawing
# 给每个区域一样的值，保证每个区域占据长度高度一致
# Give the same value to each region to ensure that the length of each region is consistent
dt_all$value <- 100
dt_all$level <- nchar(dt_all$name)
dt_all$level %<>% factor(., levels = c(1:max(.)) %>% rev())

level <- levels(dt_all$level)
dt_all_final <- c()
for (i in level) {
  dt <- subset(dt_all,level==i)
  dt_all_final <- rbind(dt_all_final, dt)
}
dt_all_final$label <- paste0(dt_all_final$name, "\n", dt_all_final$num)
dt_all_final$name %<>% factor(., levels = .)

p <- ggplot(dt_all_final, aes(x = level, y = value, fill = num)) +
  geom_bar(stat="identity", position = "fill", width = 1, colour = "black")+
  scale_fill_gradientn(colours=c("white", "forestgreen")) +
  geom_text(aes(label = label),color="black", size = 4, position = position_fill(vjust = 0.5))+

  coord_polar(theta="y",direction=-1)+ #direction=-1 逆时针方向 # direction=-1 counterclockwise
  theme_bw() +
  theme(legend.position='none')+
  theme(panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        panel.border=element_blank())

p
ggsave(filename = "Circled_Venn_diagram.pdf", plot = p, width = 10, height = 10)
输入overlap
输入文件
easy_input.csv，这里直接用例文提供的各组之间的overlap基因画图（文章附件Supplemental
Table S3.csv）。
每种组合放到一列，例如第一列的列名ABCDEF，即ABCDEF组的共有基因，有32030个基因名，对应圆心上的数字32030。以此类推其后各列。
Enter overlap
Input files
easy_input.csv, here is the direct use case provided for the mapping
of overlap genes between groups (article attachment Supplemental Table
S3.csv).
Each combination is placed in a column, for example, the first column
is named ABCDEF, which is the common gene of the ABCDEF group, which has
32030 gene names, corresponding to the number 32030 in the center of the
circle. And so on for the next columns.
df <- read.csv("easy_input.csv")
name <- colnames(df) %>% as.vector(.)
dt_all <- c()
for (i in name) {
  sub_df <- df[,i] %>% .[which(!.%in%"")] #删除空值的元素 # Remove null elements # 统计每个区域的元素数量 # Count the number of elements in each region
  dt <- data.frame(name=i, num=length(sub_df))
  dt_all <- rbind(dt_all, dt)
}
画图
与第一部分相同
Drawing
Same as the first part
# 给每个区域一样的值，保证每个区域占据长度高度一致
# Give the same value to each region to ensure that the length of each region is consistent
dt_all$value <- 100
dt_all$level <- nchar(dt_all$name)
dt_all$level %<>% factor(., levels = c(1:max(.)) %>% rev())

level <- levels(dt_all$level)
dt_all_final <- c()
for (i in level) {
  dt <- subset(dt_all,level==i)
  dt_all_final <- rbind(dt_all_final, dt)
}
dt_all_final$label <- paste0(dt_all_final$name, "\n", dt_all_final$num)
dt_all_final$name %<>% factor(., levels = .)

# 小技巧
# 如果等比例按照基因数量填充颜色，圆心数量远大于其他区域，其他区域都会是很浅的颜色
# 为了达到较好的视觉效果，我们把>1000个基因的区域统一定义为1000
# Tips
# If you fill the color according to the number of genes in equal proportions, the number of circle centers is much larger than that of other regions, and the other regions will be very light colors
# In order to achieve a better visual effect, we define the region > 1000 genes as 1000
dt_all_final[dt_all_final$num > 1000, ]$num <- 1000 # 根据自己的数据调整，或删掉这行 # Adjust to your own data, or delete this line

p <- ggplot(dt_all_final,aes(x = level,y = value,fill = num)) +
  geom_bar(stat="identity",position = "fill", width = 1,colour = "black") +
  scale_fill_gradientn(colours=c("white", "forestgreen")) +
  geom_text(aes(label = label),color="black", size = 4, position = position_fill(vjust = 0.5)) +
  
  # 想和原文一样标签为白色底色的话run下面这句，但效果感觉不好
  # If you want to be labeled with a white background like the original text, run the following sentence, but the effect doesn't feel good
  #geom_label(aes(label = name),fill="white",color="black", size = 3, 
  #           label.padding = unit(0.15, "lines"),label.r = unit(0,"lines"),
  #           position = position_fill(vjust = 0.5))+ 
  coord_polar(theta="y",direction=-1)+ #direction=-1 逆时针方向  # direction=-1 counterclockwise
  theme_bw() +
  theme(legend.position='none') +
  theme(panel.grid = element_blank(),
        axis.ticks = element_blank(),
        axis.text = element_blank(),
        axis.title = element_blank(),
        panel.border = element_blank())
p
ggsave("Circled_Venn_diagram_ori.pdf", plot = p, width = 10,height = 10)
Session Info
sessionInfo()