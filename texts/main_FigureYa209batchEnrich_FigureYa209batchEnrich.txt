FigureYa209batchEnrich
FigureYa209batchEnrich
Erqiang Hu
2025-5-20
需求描述
enrichr
的优点是批量获得各个数据库里的富集结果。如果用clusterprofiler做富集分析，也能一次性把各数据库的结果输出一个报告，就会很方便。
输入一个基因列表（gene
symbol和foldchange）和msigdb里的所有gmt文件，用clusterprofiler做富集分析，输出表格和barplot。
Requirement Description
enrichr
has the
advantage of obtaining enrichment results in each database in batches.
If you use ClusterProfiler for enrichment analysis, you can also output
a report of the results of each database at once, which is very
convenient.
Enter a list of genes (gene symbol and foldchange) and all GMT files
in MSIGDB, use ClusterProfiler for enrichment analysis, and output
tables and barplots.
出自
http://www.docin.com/p-2008991503.html
from
http://www.docin.com/p-2008991503.html
应用场景
富集分析用哪个数据库做注释？
读paper找答案。有的文章用GO，有的用KEGG，有的用hallmark，有的从文献中收集基因集。
哪个适合我？挨个尝试太麻烦，批量全都跑出来。
用上调/下调基因分别做富集分析（ORA）？还是用GSEA跑全部基因？
两种方法 X 所有数据库，都跑出来看看。
哪个容易讲故事，最后就选哪个方法、哪个数据库。然后继续做深入研究。后续展示方式可参考
https://k.koudai.com/sm2p0xYn
Application Scenarios
Which database is annotated for enrichment analysis?
Read the paper to find the answer. Some articles use GO, some use
KEGG, some use hallmark, and some collect gene sets from the
literature.
Which one is right for me? It’s too cumbersome to try one by one, and
all the batches run out.
run enrichment analysis (ORA) with up-regulated/down-regulated genes?
Or run all the genes with GSEA?
Two methods X all databases, run out and see.
Which is easy to tell a story, in the end, choose which method and
which database. Then go ahead and do in-depth research. For details on
how to display the follow-up, please refer to
https://k.koudai.com/sm2p0xYn
环境设置
使用国内镜像安装包
Environment settings
Use the domestic mirror installation package
options("repos"= c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
options(BioC_mirror="http://mirrors.tuna.tsinghua.edu.cn/bioconductor/")
install.packages("msigdbr")
install.packages("shadowtext")
install.packages("ggstance")
加载包 load packages
library(clusterProfiler)
library(msigdbr)
library(DOSE)
library(enrichplot)
library(ggplot2)
library(plyr)
library(dplyr)
Sys.setenv(LANGUAGE = "en") #显示英文报错信息 # error messages are displayed in English
options(stringsAsFactors = FALSE) #禁止chr转成factor # It is forbidden to convert chr into factor
自定义函数 Custom functions
注释的准备
三种方法，根据自己的需要任选其一，或组合使用：
方法一：使用R包msigdbr里的注释
最简单常用
Preparation of comments
Choose one of the three methods according to your needs, or use a
combination:
Method 1: Use the annotations in the R package msigdbr
The simplest and most commonly used
# 查看msigdbr所支持的物种
# 这里没有我要的物种怎么办？看方法三

# See which species are supported by MSIGDBR
# What should I do if I don't have the species I want here? Look at method three

msigdbr_species()
# 以人为例
# Take human as an example
gmt <- msigdbr(species = "Homo sapiens") 
gmt2 <- gmt%>%
   dplyr::select(gs_name, entrez_gene)
gmts <- split(gmt2, gmt$gs_cat)
方法二：使用本地gmt文件
可以从
MSigDB
下载自己想要分析的注释对应的gmt文件，保存到当前文件夹。
做单细胞的小伙伴，可以用
FigureYa194pySCENIC
生成的regulon的gmt文件，进一步在更多数据集里深入挖掘，例如TCGA数据。
Method 2: Use a local GMT file
You can download the gmt file corresponding to the annotation you
want to analyze from
MSigDB
and
save it to the current folder.
For single-cell friends, you can use the remt file generated by
‘FigureYa194pySCENIC’ to further dig deeper into more datasets, such as
TCGA data.
# 读取当前文件夹内的所有gmt文件
# Read all gmt files in the current folder
files = list.files(pattern="*.gmt")
gmts <- setNames(lapply(files, read.gmt), gsub(".v7.2.entrez.gmt", "", files))
方法三：自己定义注释文件
如果你研究的领域比较新或小众，那么现有的注释文件可能不能满足你的分析需求。这时往往会自己总结一个基因集：
查文献：你对某篇文章发现的某些基因感兴趣，例如参与某个生物学过程的几十上百个基因；
序列比对：如果你的目标物种现有的注释太少，可以跟模式生物做序列比对，用相似序列的同源基因来注释目标物种的基因。
我们首先来看一下注释文件gmts的结构：
Method 3: Define the annotation file by yourself
If your field of study is relatively new or niche, then the existing
annotation files may not meet your analysis needs. At this point, they
tend to summarize a gene set by themselves:
Literature searching: You are interested in certain genes found in a
certain article, such as dozens or hundreds of genes involved in a
certain biological process;
Sequence alignment: If you have too few existing annotations for
your target species, you can do a sequence comparison with the model
organism and annotate the genes of the target species with homologous
genes of similar sequences.
Let’s first take a look at the structure of the annotation file
gmts:
可以看到，注释数据为一个list，list中的每一项都是一个数据框，代表来源于一个category的注释数据。每个数据框包含两列，第一列为term（如通路/功能/感兴趣的基因集），第二列为gene
id（或gene symbol等）。
当我们从某篇文献中看到一个感兴趣的基因集，希望将它一起放入到已有的注释数据中一起做富集时，可以进行如下操作：
（1）将这些感兴趣的基因集处理成
annotation.txt
所示的格式，此文件有两列，第一列是用户自定义的
term name
，第二列是此
term
中对应的基因。
（2）得到所研究物种的背景基因，它可以是该物种的所有基因，也可以是表达谱中所有具有表达值的基因，如
background.txt
。
（3）将新的注释信息与方法一或二的注释合并：
As you can see, the annotation data is a list, and each item in the
list is a data frame, which represents the annotation data from a
category. Each data frame contains two columns, the first column is term
(e.g., pathway/function/gene set of interest) and the second column is
gene id (or gene symbol, etc.).
When we see a gene set of interest from a document and want to enrich
it together with the existing annotated data, we can do the
following:
Process these gene sets of interest into the format shown in
‘annotation.txt’, this file has two columns, the first column is the
user-defined ‘term name’, and the second column is the corresponding
gene in this ‘term’.
Obtain the background genes of the species under study, which can
be all genes of the species or all genes with expression values in the
expression spectrum, such as ‘background.txt’.
Merge the new annotation information with the annotations of
method 1 or 2:
anno <- read.table("annotation.txt", sep="\t", header = T)
background <- read.table("background.txt", sep="\t", header = F)
background <- setdiff(background[,1], anno$entrez_gene)
bg_anno <- data.frame(gs_name = rep("background", length(background)), entrez_gene = background)
anno_data <- rbind(anno, bg_anno)
gmts$my_anno <- as_tibble(anno_data)
GSEA
输入文件
input files
easy_input_limma.csv，差异表达分析结果。是
FigureYa59Plus_GEO2DEG
的输出文件，可无缝对接。
需要两列：基因名和Foldchange（或其他有意义的连续变量，例如ChIP/ATAC-seq的peak分数）。
easy_input_limma.csv, the results of differential expression
analysis. is the output file of
FigureYa59Plus_GEO2DEG
,
which can be seamlessly connected.
Two columns are required: gene name and Foldchange (or other
meaningful continuous variable, such as the peak score of
ChIP/ATAC-seq).
# 加载差异表达分析结果
# Load differential expression analysis results
gsym.fc <- read.csv("easy_input_limma.csv")
colnames(gsym.fc)[1] <- "SYMBOL"
gsym.fc[1:3,]
# 把gene symbol转换为ENTREZ ID
# gene symbol to ENTREZ ID
# 此处物种是人，其他物种的ID转换方法，请参考FigureYa52GOplot
# For the ID conversion method of this species is human, please refer to FigureYa52GOplot
gsym.id <- bitr(gsym.fc$SYMBOL, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
#让基因名、ENTREZID、foldchange对应起来
#match the gene name, ENTREZID, and foldchange
gsym.fc.id <- merge(gsym.fc, gsym.id, by="SYMBOL", all=F)

#按照foldchange排序
# Sort by foldchange
gsym.fc.id.sorted <- gsym.fc.id[order(gsym.fc.id$logFC, decreasing = T),]

#获得ENTREZID、foldchange列表，做为GSEA的输入
# Get the list of ENTREZID and foldchange as input for GSEA
id.fc <- gsym.fc.id.sorted$logFC
names(id.fc) <- gsym.fc.id.sorted$ENTREZID
GSEA富集分析
GSEA enrichment analysis
查看clusterProfiler的最新用法，请移步Y叔的在线电子书：
https://yulab-smu.top/clusterProfiler-book/
To see the
latest usage of clusterProfiler, please visit Uncle Y’s online eBook:
https://yulab-smu.top/clusterProfiler-book/
# 自定义函数
# Custom functions
gsea_func <- function(x, genelist, readable = FALSE) {
    GSEA_result <- GSEA(genelist, TERM2GENE = x, eps = 0)
    if (readable & nrow(GSEA_result) > 0) 
        GSEA_result <- setReadable(GSEA_result, 'org.Hs.eg.db', #物种 # species
                    'ENTREZID') #转回gene symbol # Go back to the gene symbol
    return(GSEA_result)
}

em <- setNames(lapply(gmts, gsea_func, id.fc, readable = TRUE), names(gmts)) %>% 
    merge_result2(output = "gseaResult")
# 把富集分析结果输出到文件
# Output the results of the enrichment analysis to a file
write.csv(em@result, "output_GSEA.csv", quote = F)
你可能喜欢打开
output_GSEA.csv
，总揽各种注释数据库的富集结果，或者画柱状图来看。
You may like to open the ‘output_GSEA.csv’ to summarize the
enrichment results of various annotation databases, or draw a histogram
to look at.
用自定义函数画柱状图
画柱状图来总揽各个注释数据库的富集分析结果，更直观。
显著的term非常多，不好全部在图中画出来，可以用
showCategory
参数调整每种注释画出的term的个数。
默认情况下条形图的颜色代表此term校正后的P值，可以通过修改fill参数来映射其他变量，如”Category”,
“p.adjust” 和 “log10_p.adjust”。
参数hjust表示gene number的label距离bar顶端的距离，默认为1。
Draw a histogram with a custom function
Draw histograms to summarize the enrichment analysis results of each
annotation database, which is more intuitive.
There are a lot of significant terms, and it is difficult to draw
them all in the diagram, so you can use the ‘showCategory’ parameter to
adjust the number of terms drawn for each annotation.
By default, the color of the bar represents the corrected P-value of
this term, and other variables such as “Category”, “p.adjust” and
“log10_p.adjust” can be mapped by modifying the fill parameter.
The hjust parameter indicates the distance between the label of the
gene number and the top of the bar, which is 1 by default.
em_plot(em, showCategory = 5, fill = "log10_p.adjust", hjust = 5)
em_plot(em, showCategory = 5, fill = "Category", hjust = 5) + scale_fill_brewer(palette="Set1")
ggsave("batchGSEA.pdf", width = 12, height = 12)
NES有正负之分，可以把负的画到左侧，正的画到右侧。 NES has a positive
and negative score, you can draw the negative to the left and the
positive to the right.
em_GSEA1 <- em_GSEA2 <- em
res <- em@result
em_GSEA1@result <- res[which(res$NES > 0), ] # 被激活的通路
em_GSEA2@result <- res[which(res$NES < 0), ] # 被抑制的通路

em_plot(em_GSEA1, em_GSEA2, showCategory = 2, fill = "log10_p.adjust", hjust = 10)
em_plot(em_GSEA1, em_GSEA2, showCategory = 2, fill = "Category", hjust = 12) + scale_fill_brewer(palette="Set1")
ggsave("batchGSEA_sep.pdf", width = 12, height = 12)
确定文章里用哪个注释数据库做富集分析
接下来，结合你对自己研究领域的认识，提取比较理想的数据集的富集结果，作为文件supplementary
file。进而DIY各种富集分析结果图，例如FigureYa11bubble那种泡泡图。
这里提取Catagory列为
H
的hallmark注释：
Determine which annotation database is used for enrichment analysis
in the article
Next, combined with your understanding of your own research field,
extract the enrichment results of the ideal dataset as a supplementary
file. Then DIY various enrichment analysis result graphs, such as the
bubble chart of FigureYa11bubble.
Here is an extract of the hallmark note with Catagory listed as
‘H’:
# 自定义函数
# Custom functions
result_output <- function(em_data, category) {
    em_data <- as.data.frame(em_data)
    file_out <- em_data[which(em_data$Category == category), ]
}

file_out <- result_output(em, "H") # 提取Catagory列为`H`的结果 # Extract the result of Catagory listed as 'H'
write.csv(file_out, "output_GSEA_H.csv", quote = F)
差异基因跟我感兴趣的通路有关吗？
你可能不在乎用哪种注释，只想知道差异表达基因在我感兴趣的生物学过程有没有富集。
我们从所有注释中搜索关键词，例如
CHECKPOINT
，发现在3个注释中都有
cell cycle checkpoints
，说明你获取差异表达基因的那种
处理条件/基因突变可能影响了细胞周期
。
Are differential genes related to the pathway I’m interested
in?
You probably don’t care which annotation is used, you just want to
know if the differentially expressed genes are enriched in the
biological process I’m interested in.
We searched for keywords such as ‘CHECKPOINT’ from all the
annotations and found that there were ‘cell cycle checkpoints’ in all 3
annotations, indicating that the kind of treatment conditions/gene
mutations you obtained for differentially expressed genes may have
affected the cell cycle.
get_term <- function(em_data, term){
    ids <- grep(term, as.data.frame(em_data)$ID)
    em_data[ids, ]
}

file_out <- get_term(em@result, "CHECKPOINT")
DT::datatable(file_out, escape = F, rownames=F)
ORA
输入文件
其实只需要一个基因名文件。如果你已经拿到基因名
easy_input_up.txt
、
easy_input_down.txt
（至少要有一个文件）就可以跳过这步，直接进入“ORA富集分析”。
考虑到差异基因的筛选参数决定了筛出哪些差异表达基因，进而影响ORA的结果。因此，这里从差异表达基因开始，一气呵成，方便调整筛基因的参数。
easy_input_limma.csv，同上，差异表达分析结果。是
FigureYa59Plus_GEO2DEG
的输出文件，可无缝对接
Input file
In fact, all you need is a gene name file. If you already have the
gene name ‘easy_input_up.txt’ or ‘easy_input_down.txt’ (at least one
file), you can skip this step and go straight to the “ORA Enrichment
Analysis”.
Considering the screening parameters of differentially expressed
genes, which differentially expressed genes are screened out, which in
turn affects the results of ORA. Therefore, starting with differentially
expressed genes, it is convenient to adjust the parameters of sieve
genes in one go.
easy_input_limma.csv, as above, differential expression analysis
results. is the output file of
FigureYa59Plus_GEO2DEG
,
which can be seamlessly connected
# 加载差异表达分析结果
# Load differential expression analysis results
gsym.fc <- read.csv("easy_input_limma.csv")
colnames(gsym.fc)[1] <- "SYMBOL"
gsym.fc[1:3,]
# cutoff
logFCcut <- 1 #log2-foldchange
adjPcut <- 0.05 #adj.P.value

# 筛选差异基因
# Screening for differential genes
geneup <- gsym.fc[gsym.fc$logFC > logFCcut & gsym.fc$adj.P.Val < adjPcut, ]$SYMBOL
genedown <- gsym.fc[gsym.fc$logFC < -logFCcut & gsym.fc$adj.P.Val < adjPcut, ]$SYMBOL
# 数量
# Quantity
length(geneup)
length(genedown)
# 保存到文件，便于套用格式
# Save to a file for easy formatting
write.table(geneup, "easy_input_up.txt", quote = F, row.names = F, col.names = F)
write.table(genedown, "easy_input_down.txt", quote = F, row.names = F, col.names = F)
ORA富集分析
ORA enrichment analysis
# 自定义函数
# Custom functions
enrich_func <- function(x, gene, readable = FALSE) {
    en_result <- enricher(gene, TERM2GENE = x)
    if (readable & nrow(en_result) > 0) 
        en_result <- setReadable(en_result, 'org.Hs.eg.db', #物种
                    'ENTREZID')
                    
    return(en_result)
}

# 先以上调表达的基因为例
# 加载基因名
# Let's take the up-regulated expression of the gene as an example
# Load the gene name

geneup <- read.table("easy_input_up.txt")$V1

# 把gene symbol转换为ENTREZ ID
# 此处物种是人，其他物种的ID转换方法，请参考FigureYa52GOplot
# Convert the gene symbol to an ENTREZ ID
# For the ID conversion method of this species is human, please refer to FigureYa52GOplot

geneup.id <- bitr(geneup, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
# 富集分析
# Enrichment analysis
em_ORAup <- setNames(lapply(gmts, enrich_func, geneup.id$ENTREZID, readable = TRUE), names(gmts)) %>%
    merge_result2(output = "enrichResult")

# 输出到文件
# Output to file
write.csv(em_ORAup@result, "output_ORA_up.csv", quote = F)
下调表达的基因也是一样的操作 The same is true for down-regulated
genes
genedown <- read.table("easy_input_down.txt")$V1
genedown.id <- bitr(genedown, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
em_ORAdown <- setNames(lapply(gmts, enrich_func, genedown.id$ENTREZID, readable = TRUE), names(gmts)) %>%
    merge_result2(output = "enrichResult")
或者你想把上下调的放一起也看看 Or maybe you want to put the up and
down together and look at it too
genesupdown <- union(geneup.id$ENTREZID, genedown.id$ENTREZID)

em_ORA <- setNames(lapply(gmts, enrich_func, genesupdown, readable = TRUE), names(gmts)) %>%
    merge_result2(output = "enrichResult")
用自定义函数画柱状图
Draw a histogram with a custom function
# 上调表达基因的富集结果
# Up-regulated enrichment results of expressed genes
em_plot(em_ORAup, showCategory = 5, fill = "Category", hjust = 10) + scale_fill_brewer(palette="Set1")
# 下调表达基因的富集结果
# Down-regulated enrichment results of expressed genes
em_plot(em_ORAdown, showCategory = 5, fill = "Category", hjust = 5) + scale_fill_brewer(palette="Set1")
# 上调的画在右侧，下调的画在左侧
# The upward adjustment is on the right, and the downward adjustment is on the left
em_plot(em_ORAup, em_ORAdown, showCategory = 5, fill = "Category", hjust = 12) + scale_fill_brewer(palette="Set1")
用enrichplot包里的函数画图
带你顺利衔接enrichplot
Draw a plot with the functions in the enrichplot package
Take you to the enrichplot smoothly
# 每种注释筛选3个term
# Filter 3 terms for each annotation
keep1 <- keep_category(em_ORAup, 3)
keep2 <- keep_category(em_ORAdown, 3)
em_ora1 <- em_ORAup[keep1, ]
em_ora2 <- em_ORAdown[keep2, ]

# 上调画右边，下调画左边
# Draw up to the right and down to the left
em_ora2$Count <- -em_ora2$Count 
em_ora <- new("enrichResult",
            result = rbind(em_ora1, em_ora2))

# 画barplot
#draw barplot
#barplot(em_ora, showCategory = nrow(em_ora)) + 
#    scale_x_continuous(label = abs) + 
#    facet_grid(Category ~ ., scales="free",space="free")

# 画dotplot
# draw dotplot
dotplot(em_ora, showCategory = nrow(em_ora)) + 
    scale_x_continuous(label = abs) + 
    facet_grid(Category ~ ., scales="free",space="free")
确定文章里用哪个注释数据库做富集分析
同上，提取Catagory列为
H
的hallmark注释：
Determine which annotation database is used for enrichment analysis
in the article
Same as above, extracting the hallmark note with Catagory listed as
‘H’:
file_out <- result_output(em_ORA, "H") # 上下调一起 # Up and down-regulated together
write.csv(file_out, "output_ORA_H.csv", quote = F)

file_out <- result_output(em_ORAup, "H") #上调表达基因 # Up-regulated expression genes
write.csv(file_out, "output_ORAup_H.csv", quote = F)

file_out <- result_output(em_ORAdown, "H") # 下调表达基因 # Down-regulated expression genes
write.csv(file_out, "output_ORAdown_H.csv", quote = F)
跟前面做GSEA输出的output_GSEA_H.csv文件对比看看，大同小异
差异基因跟我感兴趣的通路有关吗？
同上，从所有注释中搜索
CHECKPOINT
，发现下调表达的基因在多个注释中都有
cell cycle checkpoints
，说明你获取差异表达基因的那种
处理条件/基因突变可能抑制了cell
cycle checkpoints
。
Compared with the output_GSEA_H.csv file that did GSEA output
earlier, it is much the same
Are differential genes related to the pathway I’m interested
in?
Same as above, searching for ‘CHECKPOINT’ from all the annotations
reveals that the down-regulated gene has ‘cell cycle checkpoints’ in
multiple annotations, indicating that the
kind of treatment
conditions/gene mutations you obtained for differentially expressed
genes may have inhibited cell cycle checkpoints
.
# 提取带有`CHECKPOINT`的富集结果
# Extract the enrichment results with a 'CHECKPOINT'
file_out <- get_term(em_ORAup@result, "CHECKPOINT")
DT::datatable(file_out, escape = F, rownames=F)
# 上调表达的基因没有富集到带checkpoint字样的term
# Upregulated expressed genes do not include terms with the word checkpoint

file_out <- get_term(em_ORAdown@result, "CHECKPOINT")
DT::datatable(file_out, escape = F, rownames=F)
# 下调表达基因有多个富集term里有checkpoint字样
# There are multiple enrichment terms for down-regulated expressed genes with the word checkpoint
Session Info
sessionInfo()