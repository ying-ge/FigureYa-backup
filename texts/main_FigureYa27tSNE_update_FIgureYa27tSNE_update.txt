FigureYa27t-SNE_update
FigureYa27t-SNE_update
Zhougeng Xu; Ying Ge, Yijing Chen
2025-5-20
需求描述
requirement description
用R做单细胞RNA-seq的t-SNE图。
Use R to draw a t-SNE plot for single-cell RNA-seq.
出自
https://www.nature.com/articles/nature22973
你可能会卡在两个问题上：R包安装和数据集的预处理。
本代码带你顺利解决这两个问题，画出t-SNE图，把细胞分类和候选marker基因输出到文件。
from
https://www.nature.com/articles/nature22973
You may get stuck on two problems: R package installation and dataset
preprocessing.
This code takes you through these two problems smoothly, drawing
t-SNE plots, exporting cell classification and candidate marker genes to
file.
应用场景
application scenario
场景一：单细胞测序的上百个细胞，识别亚群，找到marker基因；
场景二：上百个肿瘤样本，识别亚型，找到marker基因。像例图那样，用来划分甲基化亚型。
Scenario 1: Hundreds of cells from single cell sequencing, identify
subpopulations, find marker genes;
Scenario 2: Hundreds of tumor samples, identify subtypes, find marker
genes. Used to classify methylation subtypes like the example image.
环境设置
environment setting
安装R包
Seurat
。之前的版本对应2.x, 目前版本对应3.x.x.
Install the R package
Seurat
. The previous version
corresponded to 2.x, the current version corresponds to 3.x.x.
# 加载Seurat
# loading Seurat
if (! require("Seurat")){
  install.packages('Seurat')
  library(Seurat)
} else{
  library(Seurat)
}
# 加载plyr
# loading plyr
if (! require(plyr)){
  install.packages("plyr")
  library(plyr)
} else{
  library(plyr)
}

library(ggplot2)
注
: Windows系统用户安装会很顺利。
MacOS/Linux系统用户要有Root权限，或许会因为hdf5r安装失败而无法顺利安装，不要图省事，听报错的话，用
brew install hdf5
。
因为根据hdf5的源代码，它不支持最新的hdf5 1.10.2，最高只支持hdf5
1.10.0，所以请在root权限下根据源码安装。
Note
: Windows users will have a smooth
installation.
MacOS/Linux system users have to have Root privileges, perhaps
because hdf5r installation failed to install smoothly, do not try to
save time, listen to the words of the error report, use
brew install hdf5
.
Because according to the source code of hdf5, it does not support the
latest hdf5 1.10.2, the highest only support hdf5 1.10.0, so please
install it under root privileges according to the source code.
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0/src/hdf5-1.10.0.tar.gz
tar xf hdf5-1.10.0.tar.gz
cd hdf5-1.10.0
./configure --prefix=/usr/local
make && sudo make install
数据预处理
Data preprocessing
请先解压当前目录的下的tung.zip, 里面存放着测试数据集
输入数据是基于UMI的表达矩阵而不是count数据，其中数据集中的行表示基因，列表示细胞。
出自
https://www.nature.com/articles/srep39921
Please unzip tung.zip in the current directory, which contains the
test dataset.
The input data is based on UMI expression matrix instead of count
data, where rows in the dataset represent genes and columns represent
cells.
from
https://www.nature.com/articles/srep39921
读取数据
read data
molecules <- read.delim("./tung/molecules.txt",header = TRUE,
           row.names = 1)
dim(molecules)
#查看前10个基因在前3个细胞中的表达量
#view the top 10 genes expressed in the top 3 cells
molecules[1:10,1:3]
创建Seurat对象
Create Seurat object
数据初始化，并初步筛选
Data initialization and initial screening
obj <- CreateSeuratObject(counts = molecules, 
                   min.cells = 3, #筛选至少在3个细胞中表达的基因 screen genes expressed in at least 3 cells
                   min.features = 200) #筛选至少有200个基因表达的细胞 screen cells with at least 200 gene expressions
2.x版本是min.genes，现在改成了min.features，因为基因也是一种特征，
此外raw.data改成了counts
Version 2.x was min.genes, now it is changed to min.features, because
gene is also a feature, also raw.data is changed to counts
增加Seurat的元信息(metadata)
Add metadata for Seurat
元信息存放在
obj@meta.data
中，可以是细胞的分组信息，所做处理等，需要自己提供。
此处包含3个人，各96个细胞，各3次重复。
Metadata is stored in
obj@meta.data
, it can be
information about the grouping of cells, processing done, etc., you need
to provide it yourself.
This contains 3 individuals, 96 cells each, 3 replicates each.
ann <- read.delim("./tung/annotation.txt", header = TRUE)
rownames(ann) <- ann$sample_id
head(ann)
summary(ann)
检查样品信息跟表达量矩阵的样品是否一致
Check whether the sample information is consistent with the sample in
the expression matrix
if (all(rownames(ann) %in% colnames(obj))){
  obj <- AddMetaData(obj, ann)
} else{
  warning("row names should be same to the items in object@cell.names")
}
过滤掉低质量细胞
Filter out low quality cells
根据具体情况来确定标准，进行QC，过滤掉低质量的细胞，此处用
VlnPlot
探索可能的离群值
Determine the standards based on specific circumstances, conduct QC,
and filter out low-quality cells. Use
VlnPlot
here to
explore potential outliers.
VlnPlot(obj, features = c("nCount_RNA","nFeature_RNA"), group.by = "orig.ident")
一般我们会过滤掉过低表达基因的细胞，上图中，你可以认为nCount_RNA低于
25000
、nFeature_RNA低于
6000
的细胞是低质量细胞。把这两个值写到下面过滤细胞的参数中：
Generally, we filter out cells with low expression genes. In the
figure above, you can consider cells with nCount_RNA below
25000
and nFeature_RNA below
6000
as
low-quality cells. Write these two values into the parameters for
filtering cells below:
obj <- subset(obj, subset = nCount_RNA  > 25000 & 
                nFeature_RNA > 6000)
此处所用的数据实验深度足够，10X技术单细胞数据标准会不同。
The experimental depth of the data used here is sufficient, and the
standardization of the 10X technology single-cell data will be
different.
标准化
Standardization
标准化这一步和混池RNA-seq类似，一般不会只使用raw
count，而会用log标准化等方式降低其他干扰因素的影响。
The standardization step is similar to mixed-pool RNA-seq, in that
raw counts are not the only thing used, and log normalization is used to
reduce the effect of other confounding factors.
obj <- NormalizeData(
    object = obj, 
    normalization.method = "LogNormalize", 
    scale.factor = 10000
)
寻找细胞间变化明显的基因
Find genes with significant cell-to-cell variation
直接使用全部基因进行后续分析对配置要求很高，而是选择那些在细胞中具有明显变化的基因。在降低资源消耗的同时还保证了结果的可靠性。
Directly using all genes for subsequent analysis is demanding in
terms of configuration; instead, select those genes that have
significant variation from cell to cell. This reduces resource
consumption while ensuring the reliability of the results.
obj <- FindVariableFeatures(
    object = obj,
    mean.function = ExpMean, #计算x轴的值的方法 method for calculating the value of the x-axis
    dispersion.function = LogVMR, #计算y轴的值的方法 method for calculating the value of the y-axis
    do.plot = F,
    x.low.cutoff = 0.0125, 
    x.high.cutoff = 3, 
    y.cutoff = 0.5
)
处理混淆因子
deal with confounder factor
所谓的混淆因子(confounder factor)
指的就是目标因素（如实验处理）以外的因素对结果的影响，
比如说批次效应。这些因素掩盖了你真正想研究的目标，所以要尽可能排除。
The so-called confounder factor refers to the influence on the
results by factors other than the target factor (such as experimental
treatment), such as batch effects. These factors obscure the target you
truly want to study, so they should be eliminated as much as
possible.
obj <- ScaleData(
    object = obj, 
    vars.to.regress = c("nCount_RNA")
)
线性降维（PCA）
Linear dimensionality reduction (PCA)
后续会对细胞进行聚类，直接使用所有特征（即基因）会出现数据挖掘中的“维度爆炸”，即维度越高反而结果越差。因此我们需要用PCA进行线性降维，使用部分主成分代替所有基因进行后续的t-SNE和细胞聚类分析。
根据PCElbowPlot确定主成分个数，曲线变得平缓的横坐标。
这个主成分个数将用在下一部分的
pca_to_use =
参数中
Subsequently, the cells will be clustered. Directly using all
features (i.e., genes) will lead to the “curse of dimensionality” in
data mining, where higher dimensions result in poorer outcomes.
Therefore, we need to perform linear dimensionality reduction using PCA,
employing some principal components to replace all genes for subsequent
t-SNE and cell clustering analysis.
The number of principal components is determined according to
PCElbowPlot, and the curve become flattened in the horizontal
coordinate.
This number of principal components will be used in the next section
in the
pca_to_use =
parameter
obj <- RunPCA(
    object = obj, 
    pc.genes = obj@var.genes, 
    do.print = FALSE
)
ElbowPlot(object = obj)
从图中可以看出：横坐标PC为14时，曲线趋近平缓，因此，此处定为14。
As can be seen from the figure: the curve tends to flatten out when
the horizontal coordinate PC is 14, so it is set at 14 here.
细胞聚类
Cell clustering
细胞聚类是单细胞分析的关键一步，毕竟大部分研究是想找到新的细胞分群、以前没有发现的细胞类型
Cell clustering is a crucial step in single-cell analysis; after all,
most studies are trying to find new cellular subgroups, previously
undiscovered cell types
pca_to_use <- 14 #上一步主成分的个数 number of principal components in the previous step
obj <- FindNeighbors(obj, reduction = "pca",
                      dims = 1:pca_to_use)
obj <- FindClusters(object = obj,
                    resolution = 1.0)
t-SNE非线性降维
t-SNE nonlinear dimensionality reduction
obj <- RunTSNE(
    object = obj,
    dims = 1:pca_to_use,
    do.fast = TRUE
)
开始画图
Start drawing
按照细胞分群(
group.by="ident"
)进行着色
设置
pt_size
修改点的大小，修改
mycol
增加自定义颜色
Color according to cellular subgroups
(
group.by="ident"
)
Set
pt_size
to modify point size, modify
mycol
to add custom colors
#定义足够多的颜色，后面从这里选颜色
#define enough colors, and later select colors from here
mycol <- c("#223D6C","#D20A13","#FFD121","#088247","#11AA4D","#58CDD9","#7A142C","#5D90BA","#431A3D","#91612D","#6E568C","#E0367A","#D8D155","#64495D","#7CC767")
t-SNE可视化
t-SNE visualization
pt_size = 1
df <- obj@reductions$tsne@cell.embeddings
df <- cbind(df, as.data.frame(obj$seurat_clusters))
colnames(df) <- c("x", "y", "ident")
p <- ggplot(df, aes(x=x, y=y)) + geom_point(aes(colour=ident),size=pt_size) + 
  labs(x="t-SNE 1", y ="t-SNE 2") +
  theme_classic()
画椭圆线
Draw elliptical line
用于辅助区分不同细胞类群
Used to assist in distinguishing different cell groups
obs <- p$data[,c("x","y","ident")]
ellipse_pro <- 0.98
theta <- c(seq(-pi, pi, length = 50), seq(pi, -pi, length = 50))
circle <- cbind(cos(theta), sin(theta))

ell <- ddply(obs, 'ident', function(x) {
  if(nrow(x) <= 2) {
    return(NULL)
  }
  sigma <- var(cbind(x$x, x$y))
  mu <- c(mean(x$x), mean(x$y))
  ed <- sqrt(qchisq(ellipse_pro, df = 2))
  data.frame(sweep(circle %*% chol(sigma) * ed, 2, mu, FUN = '+'))
})
names(ell)[2:3] <- c('x', 'y')

ell <- ddply(ell, .(ident) , function(x) x[chull(x$x, x$y), ])
p1 <- p + geom_polygon(data = ell, aes(group = ident), 
                       colour = "black",
                       alpha = 1,fill = NA,
                       linetype="dashed") 
# linetype可选类型:
# linetype optional type:
# blank, solid, dashed, dotted, dotdash, longdash, twodash
修改图例名
Modify the legend name
cell_nums <- as.data.frame(table(p$data$ident))
cell_nums$Var1 <- as.roman(as.numeric(cell_nums$Var1))
cell_labels <- paste0(cell_nums$Var1," ","(n=",cell_nums$Freq,")")

p2 <- p1 + scale_discrete_manual("colour",
                                 name = "Cell type",
                                 labels= cell_labels,
                                 values = mycol)
p2
ggsave("t-SNE.pdf")
突出显示某些细胞
Highlight certain cells
实际做图时，要结合你手中的样品信息给出这个列表，例如结合DNA测序数据挑出带有某个基因突变的细胞，或者结合DNA甲基化测序数据挑出高甲基化的细胞。
When actually making the graph, give this list in conjunction with
the information about the samples you have, for example, in conjunction
with DNA sequencing data to pick out cells with a certain gene mutation,
or in conjunction with DNA methylation sequencing data to pick out cells
that are hypermethylated.
#此处取排名前100个细胞
#the top 100 cells are taken here
mutList<-colnames(molecules)[1:100]

DimPlot(obj, reduction = "tsne", 
        cells.highlight = mutList,
        cols.highlight = mycol[3], #用黄色突出显示，其余细胞是黑色 highlighted in yellow, the rest of the cells are black
        sizes.highlight = 1.5, #把点调大，更突出 make the dots larger and more prominent.
        group.by = "ident")
按照其他元信息的列进行着色。
Colorize by columns of other meta-information
按照个体着色，查看来源于三个人的细胞的分布情况
Colorize by individual to see the distribution of cells originating
from three individuals
DimPlot(obj, reduction = "tsne", 
        cols = mycol,
        group.by = "individual")
输出分类信息
Output classification information
输出marker基因
Output marker genes
获取每个分类的可能标记基因(候选分子标记)
Get possible marker genes (candidate molecular markers) for each
classification
markers <- FindAllMarkers(obj,
                         test.use = "wilcox",
                         min.pct = 0.1,
                         min.diff.pct = -Inf)
write.csv(markers, file="cell_type_markers.csv",quote = FALSE,
          row.names = TRUE)
展示候选marker基因的表达量
Show the expression of candidate marker genes
可以画一个基因，也可以同时画多个基因
通常会用候选marker基因画图，参考例图paper里的
Extended Data Figure 8d
从上一部分“输出marker基因”输出的
cell_type_markers.csv
文件里选出每类
p_val_adj
排名第一的基因，例如第II类(class为1)的
ENSG00000205364
。
You can plot one gene or multiple genes at the same time.
Usually, we will use the candidate marker gene to draw a graph, refer
to
Extended Data Figure 8d
in the example paper.
From the
cell_type_markers.csv
file output from the
previous section “Output marker genes”, select the top-ranked gene in
each class
p_val_adj
, for example,
ENSG00000205364
in class II (class 1).
FeaturePlot(obj, reduction = "tsne",
            features = c("ERCC-00025","ENSG00000205364","ENSG00000164265","ENSG00000154556","ENSG00000014641","ENSG00000053438","ENSG00000053438","ENSG00000131969","ENSG00000135549"), 
            ncol  = 2, #画在2列里 draw in 2 columns
            cols = c("green","grey","red"), #用三种颜色，分别展示低表达、中表达和高表达 using three colors, show low expression, medium expression and high expression respectively
            #do.return =T, #返回ggplot2对象，便于组图 return ggplot2 object for easy combining plots
            #no.legend = F, #显示图例 show legend
            pt.size = 1
            )
ggsave("marker.pdf")
输出分类信息及表达矩阵
Output categorization information and expression matrix
可用于下一步分析、作图：
后续应用一：像例图paper的Figure4c那样，用各组样品ID提取临床信息和高频突变基因，绘制瀑布图oncoprint，见
FigureYa18 oncoprint
；
后续应用二：用各组候选marker基因表达矩阵画heatmap，见
FigureYa17 heatmap
。
输出样本ID对应的分类信息，这里输出的是所有基因的标准化、去除混淆因子的表达矩阵。
It can be used for the next step of analysis and graphing:
Follow-up application 1: extract clinical information and
high-frequency mutated genes using the sample IDs of each group as in
Figure4c of the example paper, and draw oncoprint, see
FigureYa18 oncoprint
;
Follow-up application 2: draw heatmap using the candidate marker
gene expression matrix for each group, see
FigureYa17 heatmap
.
Output the categorical information corresponding to the sample IDs,
in this case the normalized, confounder-removed expression matrix for
all genes.
cell_type_df <- as.data.frame(obj$seurat_clusters)
colnames(cell_type_df) <- "CellType"
cell_type_df <- cbind(cell_type_df, t(LayerData(obj, layer="scale.data")))
write.csv(t(cell_type_df),"molecules_in_cell_types.csv")
会话信息
Session Info
sessionInfo()