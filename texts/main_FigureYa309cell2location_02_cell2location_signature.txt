02_cell2location_signature
In [1]:
import
scanpy
as
sc
import
numpy
as
np
import
matplotlib.pyplot
as
plt
import
matplotlib
as
mpl
import
cell2location
from
cell2location.utils
import
select_slide
from
matplotlib
import
rcParams
rcParams
[
'pdf.fonttype'
]
=
42
# enables correct plotting of text for PDFs
In [2]:
results_folder
=
'./results/'
# create paths and names to results folders for reference regression and cell2location models
ref_run_name
=
f
'
{
results_folder
}
/reference_signatures'
run_name
=
f
'
{
results_folder
}
/cell2location_map'
Load datasets
¶
读入scRNA-seq参考数据
In [3]:
# Read data
adata_ref
=
sc
.
read
(
"data/RCC_upload_final_raw_counts.h5ad"
)
作者原文做了两层注释：
major cell type:
adata_ref.obs['broad_type']
minor cell type:
adata_ref.obs['annotation']
In [4]:
adata_ref
.
obs
.
head
()
Out[4]:
orig.ident
nCount_RNA
nFeature_RNA
patient
percent.mt
summaryDescription
annotation
region
broad_type
5739STDY7958790_AACTCAGTCCTCAACC-1
5739STDY7958790
4916.0
301
PD43948
3.641172
Blood
Plasma-IgG
b
Plasma
5739STDY7958790_AAGTCTGTCGGATGGA-1
5739STDY7958790
2708.0
903
PD43948
7.053176
Blood
Switched-memory_B
b
B-cell
5739STDY7958790_ACACCCTGTGTGAAAT-1
5739STDY7958790
4575.0
672
PD43948
2.710383
Blood
Plasma-IgA
b
Plasma
5739STDY7958790_ACATGGTTCAGTTTGG-1
5739STDY7958790
2931.0
1361
PD43948
8.597748
Blood
Naïve_B.2
b
B-cell
5739STDY7958790_ACCGTAAGTCTTCTCG-1
5739STDY7958790
5965.0
266
PD43948
0.670578
Blood
Plasma-IgA
b
Plasma
In [5]:
adata_ref
.
shape
Out[5]:
In [6]:
sc
.
pl
.
umap
(
adata_ref
,
color
=
"annotation"
)
Two major steps were in analysis using cell2location:
We applied a negative binomial regression model implemented in cell2location and estimated the reference signature of cell types we annotated based on scRNA-seq data. In this step, we used an unnormalized mRNA count matrix as input and filtered it to 13,042 genes and 261,202 cells (cells that were annotated as unknown, low-quality and patient specific were removed from this analysis). Donor IDs were regarded as the batch category and the following parameters were used to train the model: ‘max_epochs’ = 120, ‘batch_size’ = 2500, ‘train_size’ = 1 and ‘Ir’ = 0.002.
按照作者Method部分的描述，我们首先对单细胞数据中的
unknown
,
low quanlity
以及
patient-specific
细胞类型进行过滤
In [7]:
removed_labels
=
[
'Unknown'
,
'Low quality'
,
'CD4+T_Naïve/CM-patient-specific.1'
,
'CD4+T_Naïve/CM-patient-specific.2'
]
adata_ref
.
obs
[
'annotation'
]
.
isin
(
removed_labels
)
.
value_counts
()
Out[7]:
In [8]:
adata_ref
=
adata_ref
[
~
adata_ref
.
obs
[
'annotation'
]
.
isin
(
removed_labels
)]
adata_ref
Out[8]:
过滤基因
作者最终保留了13,042个基因，但由于他没有告诉我们过滤标准，这里我们采用官方文档采用的过滤参数。
In [9]:
from
cell2location.utils.filtering
import
filter_genes
selected
=
filter_genes
(
adata_ref
,
cell_count_cutoff
=
5
,
cell_percentage_cutoff2
=
0.03
,
nonz_mean_cutoff
=
1.12
)
# filter the object
adata_ref
=
adata_ref
[:,
selected
]
.
copy
()
step1 Training reference models
¶
patient
were regarded as the batch category
In [10]:
# prepare anndata for the regression model
cell2location
.
models
.
RegressionModel
.
setup_anndata
(
adata
=
adata_ref
,
# 10X reaction / sample / batch
batch_key
=
'patient'
,
# cell type, covariate used for constructing signatures
labels_key
=
'annotation'
# multiplicative technical effects (platform, 3' vs 5', donor effect)
# categorical_covariate_keys=['Method']
)
In [11]:
# create the regression model
from
cell2location.models
import
RegressionModel
mod
=
RegressionModel
(
adata_ref
)
# view anndata_setup as a sanity check
mod
.
view_anndata_setup
()
the following parameters were used to train the model:
‘max_epochs’ = 120,
‘batch_size’ = 2500, (default)
‘train_size’ = 1 (default)
‘Ir’ = 0.002 (default)
保证服务器有足够多空闲的核，默认使用一半线程
In [16]:
import
torch
if
torch
.
cuda
.
is_available
():
mod
.
train
(
max_epochs
=
120
,
batch_size
=
2500
,
train_size
=
1
,
lr
=
0.002
,
use_gpu
=
True
)
In [13]:
mod
.
train
(
max_epochs
=
120
,
batch_size
=
2500
,
train_size
=
1
,
lr
=
0.002
,
use_gpu
=
False
)
# 使用CPU计算
In [14]:
mod
.
plot_history
(
20
)
In [17]:
# In this section, we export the estimated cell abundance (summary of the posterior distribution).
adata_ref
=
mod
.
export_posterior
(
adata_ref
,
sample_kwargs
=
{
'num_samples'
:
1000
,
'batch_size'
:
2500
,
'use_gpu'
:
False
}
)
In [18]:
# Save model
mod
.
save
(
f
"
{
ref_run_name
}
"
,
overwrite
=
True
)
# Save anndata object with results
adata_file
=
f
"
{
ref_run_name
}
/sc.h5ad"
adata_ref
.
write
(
adata_file
)
adata_file
Out[18]:
这里两个散点图(诊断图)具有正相关的趋势说明模型能够用来解释数据
In [19]:
mod
.
plot_QC
()
In [20]:
# export estimated expression in each cluster
if
'means_per_cluster_mu_fg'
in
adata_ref
.
varm
.
keys
():
inf_aver
=
adata_ref
.
varm
[
'means_per_cluster_mu_fg'
][[
f
'means_per_cluster_mu_fg_
{
i
}
'
for
i
in
adata_ref
.
uns
[
'mod'
][
'factor_names'
]]]
.
copy
()
else
:
inf_aver
=
adata_ref
.
var
[[
f
'means_per_cluster_mu_fg_
{
i
}
'
for
i
in
adata_ref
.
uns
[
'mod'
][
'factor_names'
]]]
.
copy
()
inf_aver
.
columns
=
adata_ref
.
uns
[
'mod'
][
'factor_names'
]
inf_aver
.
iloc
[
0
:
5
,
0
:
5
]
Out[20]:
ACKR+_EC
Activated KRT+ NK
Activated NK
Activated_B-AREG
Activated_B-RHOB
FO538757.2
0.095478
0.090512
0.110985
0.055967
0.075919
NOC2L
0.138662
0.127062
0.117580
0.117451
0.114746
PERM1
0.002008
0.000344
0.000227
0.001351
0.002163
HES4
0.011849
0.006743
0.051286
0.004431
0.004672
ISG15
0.412864
0.386006
0.502053
0.174437
0.136781
In [21]:
# save inf_aver
inf_aver
.
to_csv
(
f
"
{
ref_run_name
}
/inf_aver.csv"
)
In [ ]: