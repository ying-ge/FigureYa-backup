FigureYa150diversityScore
FigureYa150diversityScore
Zongcheng Li
2025-5-20
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
Requirements description
用R实现文中计算diversity score的算法。 Use R to implement the
algorithm for calculating diversity score in the article.
出自
https://www.sciencedirect.com/science/article/pii/S1535610819303757
From
https://www.sciencedirect.com/science/article/pii/S1535610819303757
顺便画出下图： By the way, draw the following figure:
Figure 3. Intratumoral Heterogeneity in Liver Cancer. (E) Diversity
score of tumor samples according to the median value of diversity:
Div-Low, below median value; Div-High, above median value. Data are
presented as means ± SEM.
应用场景
Application scenario
用单细胞DNA测序数据计算diversity score，用来评价肿瘤异质性。 Use
single-cell DNA sequencing data to calculate the diversity score to
evaluate tumor heterogeneity.
环境设置
Environment settings
source("install_dependencies.R")
library(Seurat)
library(magrittr)
library(ggplot2)
library(ggpubr)
Sys.setenv(LANGUAGE = "en") #显示英文报错信息 #Display English error message
options(stringsAsFactors = FALSE) #禁止chr转成factor #Disable chr conversion to factor
根据文章方法描述，自定义计算diversity score的函数 According to the
method described in the article, customize the function to calculate the
diversity score
calcDiversityScore <- function(eigenvectorSpace, 
                               inWhichTumor,
                               removeOutiler = T,
                               nsd = 2, topPCs = 1:3){
  message("get centroid...")
  centroidMean <- apply(eigenvectorSpace, 2, function(x) tapply(x, inWhichTumor, mean))
  centroidMeanExpand <- centroidMean[match(inWhichTumor, rownames(centroidMean)),]
  if(removeOutiler){
    message("remove outlier...")
    centroidSD <- apply(eigenvectorSpace, 2, function(x) tapply(x, inWhichTumor, sd))
    centroidSDExpand <- centroidSD[match(inWhichTumor, rownames(centroidSD)),]
    outlierMatrix <- (eigenvectorSpace < centroidMeanExpand - nsd* centroidSDExpand) |
      (eigenvectorSpace > centroidMeanExpand + nsd* centroidSDExpand)
    outlierInd <- apply(outlierMatrix[,topPCs], 1, all)
    centroidMeanExpand <- centroidMeanExpand[!outlierInd, ]
    eigenvectorSpace <- eigenvectorSpace[!outlierInd,]
    inWhichTumor <- inWhichTumor[!outlierInd]
    message(sum(outlierInd), " outlier cells were removed")
  }
  tapply(sqrt(rowSums((eigenvectorSpace - centroidMeanExpand)^2)), inWhichTumor, mean)
}
输入文件
Input file
按照这个方式，下载和挖掘GEO上已发表的单细胞测序数据： Download and
mine the single-cell sequencing data published on GEO in this way:
打开页面
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125449
，拖到底，在Supplementary
file里，点击ftp，下载下面四个文件：
Open the page
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE125449
,
scroll to the bottom, click ftp in Supplementary file, and download the
following four files:
GSE125449_Set1_barcodes.tsv.gz
GSE125449_Set1_genes.tsv.gz
GSE125449_Set1_matrix.mtx.gz
GSE125449_Set1_samples.txt.gz
ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE125nnn/GSE125449/suppl
Set 1 contains scRNA-seq data of twelve samples, i.e., S16_P10_LCP18,
S02_P01_LCP21, S10_P05_LCP23, S09_P04_LCP25, S08_P03_LCP26,
S07_P02_LCP28, S11_P06_LCP29, S12_P07_LCP30, S20_P12_LCP35,
S21_P13_LCP37, S15_P09_LCP38, and S19_P11_LCP39.
!!! Important
!!!
把这四个文件放到
./data/
文件夹里
!!!
Important !!!
Put these four files in the
./data/
folder
解压缩，按以下规则重命名:
Unzip and rename as follows:
GSE125449_Set1_barcodes.tsv ==> barcodes.tsv
GSE125449_Set1_genes.tsv ==> genes.tsv
GSE125449_Set1_matrix.mtx ==> matrix.mtx
GSE125449_Set1_samples.txt ==> samples.txt
Samples used for scoring
H23 - S10_P05_LCP23,
C25 - S09_P04_LCP25,
C26 - S08_P03_LCP26,
C29 - S11_P06_LCP29,
H30 - S12_P07_LCP30,
H37 - S21_P13_LCP37,
H38 - S15_P09_LCP38,
C39 - S19_P11_LCP39.
umi <- Read10X(data.dir = "data/")
dim(umi)
annot <- read.table(file = "data/samples.txt", sep = "\t", header = T)
rownames(annot) <- annot$Cell.Barcode
dim(annot)
identical(colnames(umi), rownames(annot))
sampleUsed <- c(H23 = "S10_P05_LCP23", 
                C25 = "S09_P04_LCP25", 
                C26 = "S08_P03_LCP26", 
                C29 = "S11_P06_LCP29", 
                H30 = "S12_P07_LCP30", 
                H37 = "S21_P13_LCP37",
                H38 = "S15_P09_LCP38", 
                C39 = "S19_P11_LCP39")
cellUsed <- rownames(subset(annot, Sample %in% sampleUsed & Type == "Malignant cell"))
tme <- CreateSeuratObject(counts = umi[, cellUsed], 
                          meta.data = annot[cellUsed,],
                          min.cells = 3, min.features = 500)
#可以暂时先保存一下
#You can save it temporarily
#save(tme, file = "tme.Rdata")
Analysis using Seurat
#(load("tme.Rdata"))
tme %<>% 
  NormalizeData(scale.factor = 1e4) %<>%  # Normalization
  ScaleData() %>%                         # Scaling
  FindVariableFeatures(selection.method = "mvp", # HVGs
                       mean.cutoff = c(0.05, 3), 
                       dispersion.cutoff = c(0.5, Inf)) %<>% 
  RunPCA(npcs = 50,verbose = F)  # PCA
ElbowPlot(tme, ndims = 50, reduction = "pca")
Calc Diversity Score
eigenvectorSpace <- tme@reductions$pca@cell.embeddings[,1:30] # top 20 PCs were used

#用自定义函数calcDiversityScore计算diversity score
# Use custom function calcDiversityScore to calculate diversity score
diversityScores <- calcDiversityScore(eigenvectorSpace, tme@meta.data$Sample, removeOutiler = T)
sampleUsed <- c(H23 = "S10_P05_LCP23", 
                C25 = "S09_P04_LCP25", 
                C26 = "S08_P03_LCP26", 
                C29 = "S11_P06_LCP29", 
                H30 = "S12_P07_LCP30", 
                H37 = "S21_P13_LCP37",
                H38 = "S15_P09_LCP38", 
                C39 = "S19_P11_LCP39")
sampleUsed[match(names(diversityScores), sampleUsed)]
diversityScores
# 整理数据格式用于画图
# Arrange data format for plotting
ggData <- data.frame(score = diversityScores,
                     Group = ifelse(diversityScores > 12.3, "High", "Low"), 
                     ID = names(sampleUsed[match(names(diversityScores), sampleUsed)]),
                     row.names = names(diversityScores))
ggData$Group <- factor(ggData$Group, levels = c("Low", "High"))
table(ggData$Group, ggData$ID)
#保存到文件
#Save to file
write.csv(ggData, "output_diversity_score.csv", quote = F)
开始画图
Start plotting
ggplot(ggData,
       mapping = aes(Group, score, color = Group)) +
  geom_jitter(width = 0.3) +
  scale_color_manual(values = c("blue", "red"))+
  geom_point(stat="summary", fun.y="mean", 
             size = 6, shape = "—",
             show.legend = F) + 
  geom_errorbar(stat="summary", fun.data="mean_se", 
                width = 0.3) +
  stat_compare_means(comparisons = list(c("Low", "High")))+
  lims(y = c(0,40)) + 
  theme_classic() +
  theme(legend.position = "none")
ggsave("diversityScore.pdf", width = 2, height = 3)
Session Info
sessionInfo()