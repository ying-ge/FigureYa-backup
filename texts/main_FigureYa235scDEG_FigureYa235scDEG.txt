FigureYa235scDEG
FigureYa235scDEG
Xiao Gu
2025-9-12
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
单细胞测序分不同的cluster，然后在每个cluster上做DEGs的点图，最好是log2FC为负的标蓝。然后自定义显示想要的点。
输入数据用seurat用的PBMC那个测试数据吧
Requirement Description
Single-cell sequencing is divided into different clusters, and then a
dot plot of DEGs is made on each cluster, preferably with a negative
log2FC in blue. Then customize the display of the desired points. The
input data will be the PBMC test data for the seurat
出自
https://www.sciencedirect.com/science/article/pii/S0092867419312826?via%3Dihub
from
https://www.sciencedirect.com/science/article/pii/S0092867419312826?via%3Dihub
Figure 2. Global Spatiotemporal Analysis of Three Cardiac
Developmental Stages (H) Differential gene expression analysis showing
up- and down-regulated genes across all ten clusters. An adjusted p
value < 0.01 is indicated in red, while an adjusted p value R 0.01 is
indicated in black.
应用场景
分类展示各cluster的marker gene表达趋势变化的分布情况。
可以像原文那样标注显著上调或下调表达的基因名，或者标注参与某一通路的基因名。
Application Scenarios
The distribution of marker gene expression trends in each cluster is
displayed by category.
Gene names that are significantly up- or down-regulated, or gene
names involved in a pathway, can be labeled as in the original text.
环境设置
Environment settings
source("install_dependencies.R")
library(dplyr)
library(Seurat)
library(patchwork)
library(reshape2)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)  # Used to annotate text
library(magrittr)

Sys.setenv(LANGUAGE = "en") #显示英文报错信息 # error messages are displayed in English
options(stringsAsFactors = FALSE) #禁止chr转成factor # chr is not allowed to be converted to factor
输入文件及预处理
输入文件
这部分与“FigureYa224scMarker”相同
以Seurat官网PBMC数据为例，跟FigureYa111markerGene和FigureYa160scGSVA用的是同一套数据，出自不同作者之手，可相互参考。
下载
https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz
，解压到当前文件夹。
预处理过程参考
https://satijalab.org/seurat/v3.2/pbmc3k_tutorial.html
Input files and preprocessing
Input files
This part is the same as “FigureYa224scMarker”.
Taking the PBMC data on the official website of Seurat as an example,
it uses the same set of data as FigureYa111markerGene and
FigureYa160scGSVA, which are from different authors and can be
cross-referenced.
Download the
https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz
and extract it to the current folder.
Refer to
https://satijalab.org/seurat/v3.2/pbmc3k_tutorial.html
for the pretreatment process
# 解压缩
# Unzip
tar -zxvf pbmc3k_filtered_gene_bc_matrices.tar.gz
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
预处理
Preprocessing
# 进行QC
# 计算mitochondria基因比例
# Perform QC
# Calculate the mitochondria gene ratio
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
# Normalizing the data
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
#Identification of highly variable features
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
# top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
# plot1 <- VariableFeaturePlot(pbmc)
# plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# plot1 + plot2

# Scale the data
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
# Perform linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
#print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time

##以下酌情运行，比较耗时，可以不运行，直接看ElbowPlot
## The following is run as appropriate, it is more time-consuming, you can not run it, and directly look at ElbowPlot
#pbmc <- JackStraw(pbmc, num.replicate = 100)
#pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
#JackStrawPlot(pbmc,dims = 1:20)
ElbowPlot(pbmc)
ElbowPlot对主要PC进行排序，“拐弯”处之前的PC均可被选择，这里看到第10个PC处出现拐点，所以后续选择前10个PC进行降维
ElbowPlot sorts the main PCs, and the PCs before the “bend” can be
selected, and here we see that there is an inflection point at the 10th
PC, so the first 10 PCs are selected for dimensionality reduction
# Cluster the cells
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
#Run non-linear dimensional reduction (UMAP/tSNE)
pbmc <- RunUMAP(pbmc, dims = 1:10)
pA1 <- DimPlot(pbmc, reduction = "umap", label = T)+ NoLegend()
ggsave("plotA_1_UMAP_cluster.pdf", plot = pA1, width = 6, height = 6)
找cluster biomarkers
Find cluster biomarkers
# Finding differentially expressed features (cluster biomarkers)

# find markers for every cluster compared to all remaining cells
pbmc.markers <- FindAllMarkers(pbmc, 
                               min.pct = 0.25, 
                               logfc.threshold = 0.25)
最新版本的Seurat的cutoff跟以前不一样，Seurat
3.X.X以下用的是自然对数log，Seurat 4.X.X用的是log2，所以用Seurat
4.X.X的话，最后画出的图里的点会更多。
The cutoff of the latest version of Seurat is different from before,
Seurat 3.X.X and below use the natural logarithmic log, and Seurat 4.X.X
uses log2, so if you use Seurat 4.X.X, you will end up with more points
in the graph.
# 这里用的Seurat版本是4.0.1
# 如果你用的是Seurat 3.X.X以下版本，需要把本文档所有的avg_log2FC替换为avg_logFC，或者运行下面这行
# The Seurat version used here is 4.0.1
# If you are using Seurat 3.X.X or earlier, you will need to replace all the avg_log2FC in this document with avg_logFC, or run the following line
#pbmc.markers$avg_log2FC <- pbmc.markers$avg_logFC

# 查看top10 marker gene
# View the top 10 marker gene
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
鉴定细胞类型
如果只是为了复现文章中的图，可以不鉴定细胞类型，以下部分可不run，根据结合每个cluster的marker基因和生物学知识确定细胞类型。
为了接近真实情况并结合示例数据，这里不将细胞类型划分的这么详细，进行以下更改
Identify cell types
If you don’t need to identify the cell types just to reproduce the
diagram in the article, the following section can be done without
running and determine the cell type based on the knowledge of the marker
genes and biology that binds each cluster.
In order to get close to the real situation and combine the example
data, the cell types are not divided into such details here, and the
following changes are made
# 给每个cluster标注细胞类型
# Label each cluster with cell types
new.cluster.ids <- c("T", "Mono", "T", "B", "T", "Mono", "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
# 添加细胞类型至meta data
# Add cell types to meta data
pbmc@meta.data$celltype <- pbmc@active.ident
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
pA2 <-  pA2 <- DimPlot(pbmc, reduction = "umap", label = F,group.by = "celltype")
ggsave("plotA_1_UMAP_celltype.pdf", plot = pA2, width = 6, height = 6)

# 自定义颜色
# Custom colors
colourCount <- length(unique(pbmc@meta.data$celltype))
getPalette <- colorRampPalette(brewer.pal(8, "Dark2"))
celltype_colors <- getPalette(colourCount)
pA2 <- pA2 <- DimPlot(pbmc, reduction = "umap", label = F,group.by = "celltype",cols = celltype_colors)
ggsave("plotA_1_UMAP_celltype_color.pdf", plot = pA2, width = 6,height = 6)

## 拼图
## Puzzles
pA_all <- pA1 + pA2 + plot_layout(ncol = 2, widths = c(1, 1))
## 保存
## Save
ggsave("plotA_all.pdf", plot = pA_all, width = 12, height = 6)

celltype <- c("T","Mono","B","NK","DC","Platelet")
pbmc@meta.data$celltype <- factor(pbmc@meta.data$celltype, celltype)
saveRDS(pbmc, "pbmc_test_final.rds")
设置cutoff，定义显著/非显著的上/下调marker gene
Set cutoff to define significant/non-significant up/down marker
gene
# 查看每个cluster的marker gene
# View the marker gene of each cluster
pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, # 前两个 # The first two
                                             wt = avg_log2FC)
# 查看每个cluster的marker基因数量
# Check the number of marker genes in each cluster
table(pbmc.markers$cluster)
# 根据自己计算的marker基因数量确定log2FC的阈值，这里先定为0.5
# Determine the threshold of log2FC based on the number of marker genes calculated by yourself, here it is set to 0.5 first
pbmc.markers <- subset(pbmc.markers, p_val_adj < 0.05 & abs(avg_log2FC) > 0.5)
pbmc.markers$threshold <- as.factor(ifelse(pbmc.markers$avg_log2FC > 0 , 'Up', 'Down'))
dim(pbmc.markers)
table(pbmc.markers$threshold)
pbmc.markers$adj_p_signi <- as.factor(ifelse(pbmc.markers$p_val_adj < 0.01 , 'Highly', 'Lowly'))
pbmc.markers$thr_signi <- paste0(pbmc.markers$threshold, "_", pbmc.markers$adj_p_signi)
pbmc.markers$cluster %<>% as.vector(.) %>% as.numeric(.)

# 保存到文件
# Save to file
write.csv(pbmc.markers, "output_pbmc.markers.csv", quote = F)
自定义显示想要展示的基因名
这里挑选log2FC为top5的基因进行展示
Customize the display of the gene name you want to display
Here, log2FC is selected as the top 5 genes for display
top_up_label <- pbmc.markers %>% 
  subset(., threshold%in%"Up") %>% 
  group_by(cluster) %>% 
  top_n(n = 5, wt = avg_log2FC) %>% 
  as.data.frame()

top_down_label <- pbmc.markers %>% 
  subset(., threshold %in% "Down") %>% 
  group_by(cluster) %>% 
  top_n(n = -5, wt = avg_log2FC) %>% 
  as.data.frame()

top_label <- rbind(top_up_label,top_down_label)
top_label$thr_signi %<>% 
  factor(., levels = c("Up_Highly","Down_Highly","Up_Lowly","Down_Lowly"))

# 保存到文件，便于小白套用格式
# Save to a file for easy formatting
#write.csv(top_label, "easy_input_label.csv", quote = F)
也可以基于output_pbmc.markers.csv文件，手动挑选出想要标注名字的基因，例如标注参与某一通路的基因，然后将文件命名为easy_input_label.csv
You can also manually pick out the genes you want to name based on
output_pbmc.markers.csv files, such as genes involved in a pathway, and
then name the file easy_input_label.csv
开始画图
Start drawing
# 读取修改后的要标注的基因名文件
# Read the modified gene name file to be labeled
#top_label <- read.csv("easy_input_label.csv")

### 准备绘制暗灰色背景所需数据 
### Prepare the data needed to draw a dark gray background
background_position <- pbmc.markers %>%
  group_by(cluster) %>%
  summarise(Min = min(avg_log2FC) - 0.2, Max = max(avg_log2FC) + 0.2) %>%
  as.data.frame()
background_position$cluster %<>% as.vector(.) %>% as.numeric(.)
background_position$start <- background_position$cluster - 0.4
background_position$end <- background_position$cluster + 0.4

### 准备绘制中间区域cluster彩色bar所需数据
### Prepare the data required to plot the cluster color bar in the middle region
cluster_bar_position <- background_position
cluster_bar_position$start <- cluster_bar_position$cluster - 0.5
cluster_bar_position$end <- cluster_bar_position$cluster + 0.5
cluster_bar_position$cluster %<>% 
  factor(., levels = c(0:max(as.vector(.))))

## 设置填充颜色
## Set the fill color
cols_thr_signi <- c("Up_Highly" = "#d7301f",
                    "Down_Highly" = "#225ea8",
                    "Up_Lowly" = "black",
                    "Down_Lowly" = "black")
cols_cluster <- c("0" = "#35978f",
                  "1" = "#8dd3c7",
                  "2" = "#ffffb3",
                  "3" = "#bebada",
                  "4" = "#fb8072",
                  "5" = "#80b1d3",
                  "6" = "#fdb462",
                  "7" = "#b3de69",
                  "8" = "#fccde5")

p <- ggplot() +
  geom_rect(data = background_position, aes(xmin = start, xmax = end, ymin = Min,
                                          ymax = Max),
            fill = "#525252", alpha = 0.1) + ###添加灰色背景色 ### Add a gray background color
  geom_jitter(data = pbmc.markers, aes(x = cluster, y = avg_log2FC, colour = thr_signi),
              size = 1,position = position_jitter(seed = 1)) +
  scale_color_manual(values = cols_thr_signi) +
  scale_x_continuous(limits = c(-0.5, max(pbmc.markers$cluster) + 0.5),
                     breaks = seq(0, max(pbmc.markers$cluster), 1),
                     label = seq(0, max(pbmc.markers$cluster),1)) + #修改坐标轴显示刻度 # Modify the axis display scale
  
  # 根据top_label标注基因名
  # Label the gene name according to the top_label
  geom_text_repel(data = top_label, aes(x = cluster, y = avg_log2FC, label = gene),
                  position = position_jitter(seed = 1), show.legend = F, size = 2.5,
                  box.padding = unit(0, "lines")) +
  
  geom_rect(data = cluster_bar_position, aes(xmin = start, xmax = end, ymin = -0.4,
                                           ymax = 0.4, fill = cluster), color = "black", alpha = 1, show.legend = F) +
  scale_fill_manual(values = cols_cluster) +
  labs(x = "Cluster", y = "average log2FC") +
  theme_bw()

plot1 <- p + theme(panel.grid.minor = element_blank(), ##去除网格线 ## Remove grid lines
                   panel.grid.major = element_blank(),
                   axis.text.y = element_text(colour = 'black', size = 14),
                   axis.text.x = element_text(colour = 'black', size = 14, vjust = 50), #调整x轴坐标,vjust的值按照最终结果稍加调整 # Adjust the x-axis coordinates, and the value of vjust will be slightly adjusted according to the final result
                   panel.border = element_blank(), ## 去掉坐标轴 ## Remove the axes
                   axis.ticks.x = element_blank(), ## 去掉的坐标刻度线 ## Removed coordinate tick marks
                   axis.line.y = element_line(colour = "black")) #添加y轴坐标轴 # Add the y-axis
ggsave(filename = "Marker_gene_pointplot.pdf", plot = plot1, width = 9, height = 6)
Session Info
sessionInfo()