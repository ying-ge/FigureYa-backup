FigureYa111markerGene_step1
FigureYa111markerGene_step1
Zhougeng Xu, Taojun Ye
2025-5-20
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
用Seurat找marker基因，用scanpy画出文章里这种热图，中间顺利衔接。
Requirement description
Use Seurat to find marker genes, and use scanpy to draw this heatmap
in the article, smoothly connecting the middle.
出自
https://www.nature.com/articles/s41586-019-0933-9
from
https://www.nature.com/articles/s41586-019-0933-9
Fig. 2d, Heat map illustrating the row-normalized mean expression of
marker genes for each maturing gut cluster.
应用场景
本文档用Seurat进行单细胞上游分析，得到聚类信息和聚类注释信息，使用我写的函数保存结果，然后打开FigureYa111markerGene.ipynb文件，用Scanpy画美图。
这里是前面用Seurat，后面只是用scanpy的画图功能。当然你也可以从头到尾都用Scanpy来做，这个不包含在本文档范围内。
Application scenarios
This document uses Seurat for single-cell upstream analysis to obtain
clustering information and cluster annotation information. Use the
function I wrote to save the results, then open the
FigureYa111markerGene.ipynb file and draw a beautiful image using
Scanpy.
Here, Seurat was used earlier, and only the drawing function of
scanpy was used later. Of course, you can also use Scanpy from start to
finish, which is not included in the scope of this document.
环境设置
要求:
操作系统: Windows10（内存64G)的运行环境是WSL，
MacOS，Linux(Ubuntu/CentOS)，
电脑内存: 最低8G， 推荐16G起步，上不封顶
掌握shell的基本使用方法
安装Seurat包
Environment settings
requirement:
-Operating System: The operating environment for Windows 10 (64GB of
memory) is WSN, MacOS, Linux (Ubuntu/CentOS), -Computer memory: minimum
8GB, recommended starting at 16GB, with no upper limit -Master the basic
usage of shell
source("install_dependencies.R")
# 加载dplyr包，提供数据处理和转换的函数
# Load the dplyr package, which provides functions for data manipulation and transformation
library(dplyr)
# 加载Seurat包，用于单细胞RNA测序数据分析
# Load the Seurat package, which is used for single-cell RNA sequencing data analysis
library(Seurat)
# 设置环境变量，使R显示英文错误信息，便于统一错误排查的语言
# Set the environment variable to display error messages in English for consistency in troubleshooting
Sys.setenv(LANGUAGE = "en")

# 设置选项，禁止将字符型变量自动转换为因子类型，避免意外的数据转换
# Set an option to prevent automatic conversion of character variables to factors, 
# avoiding unexpected data type conversions
options(stringsAsFactors = FALSE)
输入文件
示例文件保存在当前文件夹下的filtered_gene_bc_matrices/hg19/文件夹里
Input file
The example file is saved in the filtered_gene-bc_tricks/hg19/folder
in the current folder
# 从指定目录读取10X Genomics单细胞RNA测序数据
# Read 10X Genomics single-cell RNA sequencing data from the specified directory
pbmc.data <- Read10X(data.dir = "filtered_gene_bc_matrices/hg19/")

# 创建Seurat对象，这是单细胞数据分析的核心数据结构
# Create a Seurat object, which is the core data structure for single-cell data analysis
pbmc <- CreateSeuratObject(
  counts = pbmc.data,  # 输入的基因表达矩阵数据
                      # Input gene expression matrix data
  project = "pbmc3k",  # 项目名称，用于标识该数据集
                      # Project name used to identify this dataset
  min.cells = 3,       # 保留至少在3个细胞中表达的基因
                      # Keep genes expressed in at least 3 cells
  min.features = 200   # 保留至少检测到200个基因的细胞
                      # Keep cells with at least 200 detected genes
)
Seurat聚类分析
下面的步骤是常规的单细胞数据处理流程, 主要是将细胞进行聚类分析,
从而知道每个细胞属于哪一类, 同时根据差异分析结果, 选择标记基因。
数据预处理
Seurat clustering analysis
The following steps are the conventional single-cell data processing
flow, mainly clustering analysis of cells to determine which category
each cell belongs to, and selecting marker genes based on the results of
differential analysis.
Data preprocessing
# 计算线粒体基因表达比例，线粒体高比例可能表示细胞质量不佳
# Calculate the percentage of mitochondrial gene expression. High mitochondrial percentage may indicate poor cell quality
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# 基于特征基因数和线粒体基因比例过滤细胞，保留高质量细胞
# Filter cells based on the number of detected features and mitochondrial gene percentage to retain high-quality cells
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 &  # 保留检测到至少200个基因的细胞
                              nFeature_RNA < 2500 &  # 排除检测到过多基因的可能为多核或破碎的细胞
                              percent.mt < 5)        # 保留线粒体基因比例低于5%的细胞

# 对基因表达数据进行归一化处理，默认使用LogNormalize方法
# Normalize the gene expression data using the default LogNormalize method
pbmc <- NormalizeData(pbmc, 
                      normalization.method = "LogNormalize",  # 对数归一化方法
                      scale.factor = 10000)                   # 缩放因子
# 识别高变基因，这些基因在细胞间差异表达，对聚类和细胞类型鉴定很重要
# Identify highly variable genes, which show significant expression differences between cells and are crucial for clustering and cell type identification
pbmc <- FindVariableFeatures(pbmc, 
                             selection.method = "vst",  # 使用方差稳定变换方法
                             nfeatures = 2000)         # 保留前2000个高变基因

# 获取所有基因名称，用于后续数据缩放
# Get all gene names for subsequent data scaling
all.genes <- rownames(pbmc)

# 对所有基因表达数据进行缩放，使不同基因间具有可比性
# Scale the expression data of all genes to make them comparable across different genes
pbmc <- ScaleData(pbmc, features = all.genes)
# 执行主成分分析(PCA)降维，使用之前识别的高变基因
# Perform principal component analysis (PCA) dimensionality reduction using the previously identified highly variable genes
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# 构建细胞间的K近邻图，基于前10个主成分计算细胞相似性
# Construct a K-nearest neighbor graph based on the first 10 principal components to compute cell-cell similarities
pbmc <- FindNeighbors(pbmc, dims = 1:10)
聚类分析
cluster analysis
# 基于之前构建的K近邻图对细胞进行聚类，识别具有相似表达模式的细胞群体
# Cluster cells based on the previously constructed K-nearest neighbor graph to identify cell populations with similar expression patterns
pbmc <- FindClusters(pbmc, 
                    resolution = 0.5)  # 聚类分辨率参数，值越大产生的聚类越多
# Clustering resolution parameter; higher values result in more clusters
定义cluster
Define cluster
# 创建新的聚类ID名称向量，用于将聚类结果注释为具体的细胞类型
# Create a vector of new cluster ID names to annotate clustering results with specific cell types
new.cluster.ids <- c("Naive CD4 T",       # 初始CD4阳性T细胞
                     "Memory CD4 T",      # 记忆CD4阳性T细胞
                     "CD14+ Mono",        # CD14阳性单核细胞
                     "B",                 # B细胞
                     "CD8 T",             # CD8阳性T细胞
                     "FCGR3A+ Mono",      # FCGR3A阳性单核细胞
                     "NK",                # 自然杀伤细胞
                     "DC",                # 树突状细胞
                     "Platelet")          # 血小板

# 将新的聚类ID名称与当前聚类水平一一对应
# Map the new cluster ID names to the current cluster levels
names(new.cluster.ids) <- levels(pbmc)

# 重命名Seurat对象中的聚类标识，使用新的细胞类型名称替换原聚类ID
# Rename the cluster identities in the Seurat object with the new cell type names
pbmc <- RenameIdents(pbmc, new.cluster.ids)
这里可以接UMAP看聚类结果，关于UMAP的安装和详细用法，可参考FigureYa93UMAP。
Here, UMAP can be connected to view the clustering results. For
installation and detailed usage of UMAP, please refer to
FigureYa93UMAP.
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap", label = T)
开始画图
用Seurat展示标记基因
Start drawing
Display marker genes using Seurat
定义基因
Define genes
# 定义标记基因向量，用于后续的细胞类型鉴定和可视化
# Define a vector of marker genes for subsequent cell type identification and visualization
marker_gene <- c(
  "IL7R", "CCR7",       # Naive CD4 T细胞的标记基因（初始CD4+ T细胞）
                    # Marker genes for Naive CD4 T cells (naive CD4+ T cells)
  "S100A4",            # Memory CD4 T细胞的标记基因（记忆CD4+ T细胞）
                    # Marker gene for Memory CD4 T cells (memory CD4+ T cells)
  "CD14", "LYZ",       # CD14+ Mono细胞的标记基因（CD14+单核细胞）
                    # Marker genes for CD14+ Mono cells (CD14+ monocytes)
  "MS4A1",             # B细胞的标记基因
                    # Marker gene for B cells
  "CD8A",              # CD8 T细胞的标记基因（CD8+ T细胞）
                    # Marker gene for CD8 T cells (CD8+ T cells)
  "FCGR3A", "MS4A7",   # FCGR3A+ Mono细胞的标记基因（FCGR3A+单核细胞）
                    # Marker genes for FCGR3A+ Mono cells (FCGR3A+ monocytes)
  "GNLY", "NKG7",      # NK细胞的标记基因（自然杀伤细胞）
                    # Marker genes for NK cells (natural killer cells)
  "FCER1A", "CST3",    # DC细胞的标记基因（树突状细胞）
                    # Marker genes for DC cells (dendritic cells)
  "PPBP"               # Platelet细胞的标记基因（血小板）
                    # Marker gene for Platelet cells (platelets)
)
热图
Heat map
# 绘制热图展示标记基因在不同细胞聚类中的表达模式
# Generate a heatmap to visualize the expression patterns of marker genes across different cell clusters
DoHeatmap(pbmc, 
          features = marker_gene)  # 指定要展示的特征基因为之前定义的标记基因向量
# Specify the features to plot using the previously defined marker gene vector
小提琴图
Violin Diagram
# 绘制小提琴图展示IL7R和CCR7基因在各细胞聚类中的表达分布
# Generate violin plots to show the expression distribution of IL7R and CCR7 genes across cell clusters
VlnPlot(pbmc, 
        features = marker_gene[1:2])  # 选取marker_gene向量中的前两个基因(IL7R和CCR7)
# Select the first two genes (IL7R and CCR7) from the marker_gene vector
除了这两种，还能不能有更加好看的展现方式？
Scanpy提供了许多种好看的展示方式，见
https://scanpy-tutorials.readthedocs.io/en/latest/visualizing-marker-genes.html
那么如何将Seruat的结果和Scanpy进行结合呢？我们首先需要把结果输出到文件，然后用Scanpy画美图。
输出Seurat结果
Seurat的表达量数据存放在
@assays$RNA
下,
counts: TPM或者UMI信息, 最初的输入信息
data: 标准化结果
scale.data: scale后的数据
Seurat的细胞的各种元信息在
@meta.data
下
Seurat定义后细胞类型的数据在
@active.ident
下,
我写了一个函数
seurat2scanpy
,
将上面信息保存在同一个文件夹下
Can there be a more visually appealing way of presenting besides
these two?
Scanpy provides many visually appealing display options, see<
https://scanpy-tutorials.readthedocs.io/en/latest/visualizing-marker-genes.html
>
So how to combine the results of Seruat with Scanpy? We first need to
output the results to a file, and then use Scanpy to draw beautiful
images.
Output Seurat results
The expression level data of Seurat is stored under ‘@ assay
$RNA’,
-Counts: TPM or UMI information, initial input information -Data:
Standardized results -Scale.data: scaled data
The various meta information of Seurat’s cells can be found under ‘@
meta. data’
The data of cell types defined by Seurat can be found under ‘@
active. dent’,
I wrote a function called ‘seurat2scanpy’ and saved the above
information in the same folder
# 导入自定义函数脚本，该脚本包含将Seurat对象转换为Scanpy兼容格式的功能
# Source a custom function script that contains functions to convert Seurat objects to Scanpy-compatible formats
source("seurat2scanpy.R")

# 调用seurat2scanpy函数将处理好的pbmc Seurat对象转换为AnnData格式
# 以便后续使用Scanpy(Python)进行下游分析，如轨迹推断、RNA速度等
# Convert the processed Seurat object 'pbmc' into AnnData format
# for downstream analysis using Scanpy (Python), such as trajectory inference or RNA velocity analysis
seurat2scanpy(x = pbmc)  # x = 需要转换的Seurat对象
                         # x = Seurat object to be converted
后续的操作在Jupyter notebook进行。你需要：
下载并安装Anaconda发行版，
https://www.anaconda.com/distribution/#download-section
用Jupyter
notebook打开FigureYa111markerGene_step2_linuxMAC.ipynb或FigureYa111markerGene_step2_win10.ipynb文档继续画图。
ipynb文档的用法参考这篇：
https://mp.weixin.qq.com/s/G-CQhNEJBmMRuDe2kxND_w
参考资料
https://scanpy.readthedocs.io/
The subsequent operations will be carried out in the Jupyter
notebook. You need:
-Download and install the Anaconda distribution,
https://www.anaconda.com/distribution/#download
-section
-Open the FigureYa111markerGene_step2.nuxmAC.ipynb or
FigureYa111markerGene_step2w_in10.ipynb document with Jupyter notebook
to continue drawing. -The usage of the ipynb document can be found in
this article:
https://mp.weixin.qq.com/s/G-CQhNEJBmMRuDe2kxND_w
Reference materials
<
https://scanpy.readthedocs.io/
>
Session Info
sessionInfo()