FigureYa56Immune_inflitrationV3
FigureYa56Immune_inflitrationV3
Jingze Gao, Ying Ge, Yijing Chen
2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
用TCGA的表达数据，计算免疫浸润，画出paper里的heatmap
Requirement description
Calculate immune infiltration using TCGA expression data and draw
heatmap in the paper
出自
https://www.tandfonline.com/doi/full/10.1080/2162402X.2017.1382792?scroll=top&needAccess=true
from
https://www.tandfonline.com/doi/full/10.1080/2162402X.2017.1382792?scroll=top&needAccess=true
应用场景
深入挖掘肿瘤RNA-seq数据，跟免疫建立联系。
例文用的是MCPcounter包，输入的表达矩阵可以是microarray，也可以是RNA-seq。TPM、FPKM、normalized
read count等等都可以，要取log2。
物种：人，组织（包括血液）的表达数据
参考资料:
作者ebecht的回复：“The data should be log2-transformed.”
https://github.com/ebecht/MCPcounter/issues/4
更多经过测试的基因表达平台，参考这篇：
https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-1070-5
Application scenarios
Deeply explore tumor RNA seq data and establish a connection with
immunity.
The example text uses MCPcounter package, and the input expression
matrix can be microarray or RNA seq. TPM, FPKM, normalized read count,
and so on are all acceptable, and log2 needs to be taken.
Species: human, tissue (including blood) expression data
reference material:
-Author ebecht’s response: “The data should be log2-transformed<
https://github.com/ebecht/MCPcounter/issues/4
>
-For more tested gene expression platforms, please refer to this
article:<
https://genomebiology.biomedcentral.com/articles/10.1186/s13059-016-1070-5
>
环境设置
Environment settings
source("install_dependencies.R")
# 加载MCPcounter包，用于免疫细胞丰度估计
# Load the MCPcounter package for immune cell abundance estimation
library(MCPcounter)
# 加载stringr包，用于字符串处理
# Load the stringr package for string manipulation
library(stringr)

# 加载data.table包，用于高效处理大数据集
# Load the data.table package for efficient handling of large datasets
library(data.table)

# 加载pheatmap包，用于绘制热图
# Load the pheatmap package for creating heatmaps
library(pheatmap)

# 设置环境变量使R显示英文错误信息
# Set environment variable to display English error messages
Sys.setenv(LANGUAGE = "en") 

# 禁止字符串自动转换为因子类型
# Disable automatic conversion of strings to factors
options(stringsAsFactors = FALSE)
参数设置
Parameter settings
# 指定用于排序的目标基因名称（如PD-L1）
# Specify the target gene name for sorting (e.g., PD-L1)
targetGene <- "CD274" 

# 注释掉的癌症类型（多形性胶质母细胞瘤）
# Commented out cancer type (glioblastoma multiforme)
#targetCancer <- "glioblastoma multiforme" 

# 指定目标癌症类型（低级别脑胶质瘤）
# Specify the target cancer type (brain lower grade glioma)
targetCancer <- "brain lower grade glioma" #LGG

# 指定目标突变基因（异柠檬酸脱氢酶）
# Specify the target mutation gene (Isocitrate Dehydrogenase)
targetMut <- "IDH"
输入数据下载
如果你的数据已经整理成“easy_input_expr.csv”的格式，就跳过这步，直接进入“计算免疫细胞”。
如果你只需要计算免疫细胞，就只需要用到基因表达矩阵：easy_input_expr.csv
如果你要画出paper里那样的图，就还需要临床、突变信息：easy_input_cli.csv
Input data download
If your data has already been organized into the format of
“easy_input-expr. csv”, skip this step and go directly to “Calculate
Immune Cells”.
If you only need to calculate immune cells, you only need to use the
gene expression matrix: easyinput-expr.csv
If you want to draw a graph like the one in the paper, you also need
clinical and mutation information: easyinput_cli.csv
文件地址
从UCSC xena
https://xenabrowser.net/datapages/
进入Pan-Cancer
(PANCAN) (39 datasets)
点击gene expression RNAseq里的TOIL RSEM tpm (n=10,535) UCSC Toil
RNAseq Recompute，下载TPM：
https://toil.xenahubs.net/download/tcga_RSEM_gene_tpm.gz
。
点击phenotype里的sample type and primary disease (n=12,804)
Pan-Cancer Atlas Hub，下载phenotype：
https://pancanatlas.xenahubs.net/download/TCGA_phenotype_denseDataOnlyDownload.tsv.gz
点击phenotype里的Curated clinical data (n=12,591) Pan-Cancer
Atlas Hub，下载带临床信息的生存数据：
https://pancanatlas.xenahubs.net/download/Survival_SupplementalTable_S1_20171025_xena_sp.gz
点击somatic mutation (SNP and INDEL)里的MC3 public version*
(n=9,104) Pan-Cancer Atlas Hub，下载突变：
https://pancanatlas.xenahubs.net/download/mc3.v0.2.8.PUBLIC.xena.gz
ID和Gene symbol对应列表下载：
https://toil.xenahubs.net/download/probeMap/gencode.v23.annotation.gene.probemap
从UCSC xena
https://xenabrowser.net/datapages/
进入TCGA Glioblastoma
(GBM) (29 datasets)
点击phenotype里的Phenotypes (n=629) TCGA
hub，下载带亚型的临床数据：
https://tcga.xenahubs.net/download/TCGA.GBM.sampleMap/GBM_clinicalMatrix.gz
File address
From UCSC Xena<
https://xenabrowser.net/datapages/
>Enter Pan Cancer
(PANCAN) (39 datasets)
-Click on the TOIL RSEM tpm (n=10535) UCSC Toil RNAseq Reconciliation
in the gene expression RNAseq to download the TPM:<
https://toil.xenahubs.net/download/tcga_RSEM_gene_tpm.gz
>.
-Click on the sample type and primary disease (n=12804) Pan Cancer
Atlas Hub in the prototype to download the prototype:<
https://pancanatlas.xenahubs.net/download/TCGA_phenotype_denseDataOnlyDownload.tsv.gz
>
-Click on Cured clinical data (n=12591) Pan Cancer Atlas Hub in
phenotype to download survival data with clinical information:
https://pancanatlas.xenahubs.net/download/Survival_SupplementalTable_S1_20171025_xena_sp.gz
-Click on MC3 public version * (n=9104) Pan Cancer Atlas Hub in
somatic mutation (SNP and INDEL) to download the mutation:<
https://pancanatlas.xenahubs.net/download/mc3.v0.2.8.PUBLIC.xena.gz
>
-Download the corresponding list of ID and Gene symbol:<
https://toil.xenahubs.net/download/probeMap/gencode.v23.annotation.gene.probemap
>
From UCSC Xena<
https://xenabrowser.net/datapages/
>Enter TCGA
Glioblastoma (GBM) (29 datasets)
-Click on the Phenotypes (n=629) TCGA hub in Phenotype to download
clinical data with subtypes:<
https://tcga.xenahubs.net/download/TCGA.GBM.sampleMap/GBM_clinicalMatrix.gz
>
解压缩
*.gz文件是压缩包，解压缩到当前文件夹
Decompress
*The. gz file is a compressed file that can be extracted to the
current folder
检查一下：现在你的文件夹里应该有这些输入文件：
tcga_RSEM_gene_tpm
TCGA_phenotype_denseDataOnlyDownload.tsv
Survival_SupplementalTable_S1_20171025_xena_sp
mc3.v0.2.8.PUBLIC.xena
gencode.v23.annotation.gene.probemap
GBM_clinicalMatrix
Check: There should be these input files in your folder now:
tcga_RSEM_gene_tpm
TCGA_phenotype_denseDataOnlyDownload.tsv
Survival_SupplementalTable_S1_20171025_xena_sp
mc3.v0.2.8.PUBLIC.xena
gencode.v23.annotation.gene.probemap
GBM_clinicalMatrix
输入数据整理
提取目标癌症的sample
Input data organization
Extract samples of target cancer
# 读取TCGA表型数据文件（包含患者临床信息）
# Read TCGA phenotype data file (containing patient clinical information)
tcgacase <- read.delim(file="TCGA_phenotype_denseDataOnlyDownload.tsv",header=T,as.is = T)

# 查看数据集中所有癌症类型及其样本数量分布
# View all cancer types and their sample count distribution in the dataset
table(tcgacase$X_primary_disease)
# 筛选出指定癌症类型（如低级别脑胶质瘤）的样本信息
# Filter sample information for the specified cancer type (e.g., LGG)
targetCancerCase <- tcgacase[which(tcgacase$X_primary_disease == targetCancer),]

# 仅保留肿瘤样本，排除正常组织样本
# Keep only tumor samples, exclude normal tissue samples
targetCancerCase <- targetCancerCase[targetCancerCase$sample_type %like% "Tumor",] 

# 查看筛选后的样本信息前几行
# View the first few rows of the filtered sample information
head(targetCancerCase)
# 查看筛选后的样本数量和特征数
# View the number of samples and features after filtering
dim(targetCancerCase)
提取目标癌症的表达矩阵
Extract the expression matrix of the target cancer
# 提取TCGA基因表达数据的首行（列名）到临时文件
# Extract the first line (column names) of TCGA gene expression data to a temporary file
system('head -1 tcga_RSEM_gene_tpm >headtcga')

# 读取首行数据，包含所有样本ID信息
# Read the first line containing all sample IDs
headtcga <- read.delim("headtcga", as.is=T, check.names = F)

# 获取所有样本ID列表
# Get the list of all sample IDs
tcgasample <- colnames(headtcga)

# 找出符合目标癌症类型的样本在数据中的列索引
# Find the column indices of samples matching the target cancer type
targetnum <- which(tcgasample %in% targetCancerCase$sample)

# 将列索引转换为逗号分隔的字符串（用于shell命令）
# Convert column indices to comma-separated string for shell command
targetnumChr <- str_c(targetnum, collapse = ",")

# 构建shell命令：从原始数据中提取目标样本的表达量数据
# Build shell command: Extract expression data of target samples from original dataset
shellcmd <- paste0("cut -f 1,",targetnumChr," tcga_RSEM_gene_tpm >targetCancerTPM")

# 执行shell命令（约需2分钟）
# Execute shell command (takes about 2 minutes)
system(shellcmd) 

# 读取提取的目标癌症表达矩阵（行名为基因，列名为样本）
# Read the extracted expression matrix of target cancer (row: genes, column: samples)
targetCancerTPM <- read.delim("targetCancerTPM", row.names = 1, check.names = F)

# 查看表达矩阵的前几行和几列
# View the first few rows and columns of the expression matrix
targetCancerTPM[1:3, 1:3]
# 查看表达矩阵的维度（基因数×样本数）
# View the dimensions of the expression matrix (genes x samples)
dim(targetCancerTPM)
# 保存有TPM值的目标癌症样本ID，供后续分析使用
# Save sample IDs with TPM values for downstream analysis
targetSample <- colnames(targetCancerTPM)
TCGA的GBM共有607个sample；
TOIL RSEM tpm流程跑出来的表达数据当中，GBM有166个sample；
GDC来源的表达数据当中，GBM有176个sample。
TCGA’s GBM has a total of 607 samples;
Among the expression data generated by the TOIL RSEM tpm process, GBM
has 166 samples;
Among the expression data from GDC sources, GBM has 176 samples.
把gene symbol加到最后一列
Add gene symbol to the last column
# 读取基因ID映射表（包含基因ID与基因符号的对应关系）
# Read gene ID mapping table (contains correspondence between gene IDs and symbols)
idmap <- read.delim("gencode.v23.annotation.gene.probemap",as.is=T)

# 查看映射表的基本结构
# View the basic structure of the mapping table
head(idmap)
# 将基因ID设为映射表的行名
# Set gene ID as the row name of the mapping table
rownames(idmap) <- idmap$id

# 为表达矩阵添加基因符号列（通过基因ID匹配）
# Add gene symbol column to the expression matrix (matched by gene ID)
targetCancerTPM$gsym <- idmap[rownames(targetCancerTPM),]$gene

# 此处仅保存前2个样本和前1000个基因的数据作为格式参考
# Save only the first 2 samples and 1000 genes for format reference
write.csv(targetCancerTPM[1:1000,c(1:2,ncol(targetCancerTPM))],"easy_input_expr_part.csv", quote = F)

# 取消注释此行以保存完整基因表达矩阵
# Uncomment this line to save the full gene expression matrix
#write.csv(targetCancerTPM,"easy_input_expr.csv", quote = F)
提取目标基因的表达量
Extract the expression level of the target gene
# 提取目标基因(如CD274)在所有样本中的表达量数据
# Extract the expression data of the target gene (e.g., CD274) across all samples
targetGeneExp0 <- targetCancerTPM[targetCancerTPM$gsym %in% targetGene,]

# 移除最后一列的基因名称列，仅保留表达量数据
# Remove the last column containing gene names, keeping only expression values
targetGeneExp0 <- targetGeneExp0[,-ncol(targetGeneExp0)] 

# 按表达量值对样本进行升序排序
# Sort samples by expression values in ascending order
targetGeneExp <- targetGeneExp0[,order(as.numeric(targetGeneExp0))] 

# 添加样本ID作为第一行
# Add sample IDs as the first row
targetGeneExp <- rbind(colnames(targetGeneExp),targetGeneExp)

# 转置数据框，使样本成为行、表达量成为列
# Transpose the data frame to make samples as rows and expression as columns
targetGeneExp <- data.frame(t(targetGeneExp))

# 设置列名：样本ID列和目标基因表达量列
# Set column names: sample ID and target gene expression
colnames(targetGeneExp) <- c("bcr_patient_barcode", targetGene )

# 查看整理后的表达量数据前几行
# View the first few rows of the formatted expression data
head(targetGeneExp)
# 将样本ID中的点号替换为连字符(与TCGA标准格式一致)
# Replace dots with hyphens in sample IDs to match TCGA standard format
targetGeneExp$bcr_patient_barcode <- str_replace_all(rownames(targetGeneExp),"[.]","-")
提取目标癌症的临床信息
Extract clinical information of target cancer
# 读取临床信息数据（包含生存分析相关指标）
# Read clinical information data (including survival analysis metrics)
clinical <- read.delim("Survival_SupplementalTable_S1_20171025_xena_sp", header = T)

# 筛选出目标癌症样本对应的临床信息
# Filter clinical information corresponding to target cancer samples
targetCancer_cli <- clinical[clinical$sample %in% targetSample,]

# 查看筛选后的临床数据维度（样本数×临床特征数）
# View dimensions of the filtered clinical data (samples x clinical features)
dim(targetCancer_cli)
# 查看临床数据的基本结构
# View the basic structure of clinical data
head(targetCancer_cli)
# 查看肿瘤分期分布情况（注释掉的代码）
# View distribution of tumor stages (commented out)
#table(targetCancer_cli$ajcc_pathologic_tumor_stage)
#table(targetCancer_cli$clinical_stage)
# Note: AJCC stages are empty for GBM samples

# 如需去除分期中的亚分类（如IA→I），取消注释此行
# Uncomment this line to remove subcategories from stage information (e.g., IA → I)
#targetCancer_cli$ajcc_pathologic_tumor_stage <- str_replace_all(targetCancer_cli$ajcc_pathologic_tumor_stage,"[ABC]","")

# 查看样本的种族分布情况
# View racial distribution of samples
table(targetCancer_cli$race)
# 查看样本的性别分布情况
# View gender distribution of samples
table(targetCancer_cli$gender)
这些信息都可以画到最后的图上，不同肿瘤情况不一样，自己决定画哪列信息。
These pieces of information can be drawn to the end of the graph, and
different tumor conditions are different. You can decide which column of
information to draw.
提取目标癌症的亚型信息
不同癌症的列不一样，GBM有一列GeneExp_Subtype，与例文中的Expression
subtype一致。
Extract subtype information of target cancer
The columns for different cancers are different, and GBM has a column
called GeneExp_Subtype, which is consistent with the Expression subtype
in the example text.
# 读取GBM分子亚型数据（已注释，当前使用LGG数据）
# Read GBM molecular subtype data (commented out, using LGG data currently)
targetCancer_sub <- read.delim("GBM_clinicalMatrix.gz")

# 读取LGG临床与分子特征数据
# Read LGG clinical and molecular feature data
targetCancer_sub <- read.delim("LGG_clinicalMatrix.gz")

# 筛选出目标样本对应的分子特征数据
# Filter molecular feature data corresponding to target samples
targetCancer_sub <- targetCancer_sub[targetCancer_sub$sampleID %in% targetSample,]

# 查看GBM的基因表达亚型分布（已注释，适用于GBM数据）
# View distribution of GBM gene expression subtypes (commented out, for GBM data)
#table(targetCancer_sub$GeneExp_Subtype)

# 查看LGG的组织学类型分布（LGG有组织学分型列）
# View distribution of LGG histological types (LGG has histological subtype column)
table(targetCancer_sub$histological_type)
提取目标癌症的突变信息
Extract mutation information of target cancer
# 读取TCGA全肿瘤突变数据（MAF格式）
# Read TCGA pan-cancer mutation data (MAF format)
mutation <- read.delim("mc3.v0.2.8.PUBLIC.xena.gz", header = T)

# 筛选目标癌症样本的突变数据
# Filter mutation data for target cancer samples
targetCancer_mut <- mutation[mutation$sample %in% targetSample,]

# 获取所有发生突变的样本ID（去重）
# Get unique sample IDs with any mutations
all_mutSample <- unique(targetCancer_mut$sample)

# 查看该肿瘤类型中具有突变信息的样本数量
# Check how many samples have mutation information
length(all_mutSample)
# 筛选目标基因突变数据（使用模糊匹配，如IDH1/2）
# Filter mutations in the target gene (using fuzzy match, e.g., IDH1/2)
# For exact match, replace %like% with ==
targetCancer_mut_gene <- targetCancer_mut[targetCancer_mut$gene %like% targetMut,]

# 提取发生目标基因突变的样本ID（去重）
# Get unique sample IDs with mutations in the target gene
mutSample <- unique(targetCancer_mut_gene$sample)

# 文件中未发生目标基因突变的样本定义为野生型
# Samples without target gene mutations are defined as wild-type
wildSample <- setdiff(all_mutSample, mutSample)

# 注：不在该文件中的样本将被视为未检测到突变，后续会标记为NA
# Note: Samples not in this file are considered mutation-undetected and will be labeled NA
合并以上多个层面的信息
Merge information from multiple levels above
# 以目标基因表达量数据为基础创建注释表
# Create annotation table based on target gene expression data
targetAnno <- targetGeneExp
rownames(targetAnno) <- targetGeneExp$bcr_patient_barcode

# 初始化临床注释字段，默认值为"NA"
# Initialize clinical annotation fields with default value "NA"
targetAnno$race <- rep("NA", length(targetSample))
targetAnno$gender <- rep("NA", length(targetSample))
targetAnno$subtype <- rep("NA", length(targetSample))
targetAnno$mut <- rep("NA", length(targetSample))

# 从临床数据中添加种族信息
# Add race information from clinical data
targetAnno[targetCancer_cli$sample,]$race <- targetCancer_cli$race
# 将空值替换为"NA"
# Replace empty values with "NA"
targetAnno$race[targetAnno$race == ""] <- "NA"

# 从临床数据中添加性别信息
# Add gender information from clinical data
targetAnno[targetCancer_cli$sample,]$gender <- targetCancer_cli$gender
# 将空值替换为"NA"
# Replace empty values with "NA"
targetAnno$gender[targetAnno$gender == ""] <- "NA"

# 从分子特征数据中添加肿瘤亚型信息（LGG使用组织学类型）
# Add tumor subtype information from molecular feature data (histological type for LGG)
targetAnno[targetCancer_sub$sampleID,]$subtype <- targetCancer_sub$histological_type
# GBM使用基因表达亚型（已注释）
# Use gene expression subtype for GBM (commented out)
#targetAnno[targetCancer_sub$sampleID,]$subtype <- targetCancer_sub$GeneExp_Subtype
# 将空值替换为"NA"
# Replace empty values with "NA"
targetAnno$subtype[targetAnno$subtype == ""] <- "NA"

# 标记目标基因突变状态（突变型）
# Mark samples with target gene mutations as "mutant"
targetAnno[mutSample,]$mut <- "mutant"
# 标记目标基因野生型状态（未突变）
# Mark samples without target gene mutations as "wildtype"
targetAnno[wildSample,]$mut <- "wildtype"

# 查看突变型、野生型和未知状态的样本数量分布
# Check distribution of mutant, wildtype and unknown samples
table(targetAnno$mut)
# 查看注释表基本结构
# View basic structure of the annotation table
head(targetAnno)
# 保存注释表为CSV文件，用于后续分析
# Save annotation table as CSV file for downstream analysis
write.csv(targetAnno, "easy_input_cli.csv", quote = F, row.names = F)
计算免疫细胞
计算免疫浸润，只需要全部基因的表达矩阵。
要求:
基因ID为HUGO_symbols或ENTREZ_ID。
取log2，此处输入文件已经过
log2(x+0.001)
转换。
https://xenabrowser.net/datapages/?dataset=tcga_RSEM_gene_tpm&host=https%3A%2F%2Ftoil.xenahubs.net&removeHub=https%3A%2F%2Fxena.treehouse.gi.ucsc.edu%3A443
:
“Data (file names: *.rsem_genes.results) are downloaded, tpm values are
extracted, log2(x+0.001) transformed, and combined.”
Calculate immune cells
To calculate immune infiltration, only the expression matrix of all
genes is needed.
requirement:
-The gene ID is HUGO_Symbols or ENTREZ-ID. -Take log2, the input file
here has already undergone * * log2 (x+0.001) * * conversion<
https://xenabrowser.net/datapages/?dataset=tcga_RSEM_gene_tpm&host=https%3A%2F%2Ftoil.xenahubs.net&removeHub=https%3A%2F%2Fxena.treehouse.gi.ucsc.edu%3A443
>: “Data (file names: *.rsem_genes.results) are downloaded, tpm
values are extracted, log2(x+0.001) transformed, and combined.”
# 查看MCPcounter函数使用说明（已注释）
# View documentation for MCPcounter function (commented out)
#?MCPcounter.estimate

# MCPcounter分析要求输入基因名称(HUGO_symbols)或基因ID(ENTREZ_ID)
# MCPcounter requires gene names (HUGO_symbols) or IDs (ENTREZ_ID) as input
# 当前数据第一列是ENSEMBL ID，最后一列是基因符号(gene symbol)
# Current data has ENSEMBL IDs in first column and gene symbols in last column

# 读取表达矩阵（已注释，使用现有变量）
# Read expression matrix (commented out, using existing variable)
#targetCancerTPM <- read.csv("easy_input_expr.csv", row.names = 1)

# 查看表达矩阵维度（基因数×样本数）
# Check dimensions of expression matrix (genes x samples)
dim(targetCancerTPM)
# 处理多个ENSEMBL ID对应同一个基因符号的情况
# Handle cases where multiple ENSEMBL IDs map to the same gene symbol

# 按基因符号分组，对每个基因取表达量的中位数（也可改为mean取平均值）
# Group by gene symbol and compute median expression for each gene (or use mean)
targetCancerTPM_uniq <- aggregate(.~gsym, targetCancerTPM, median) # Takes ~5min

# 查看去重后的基因数量
# Check number of unique genes after aggregation
dim(targetCancerTPM_uniq)
# 将基因符号设为行名
# Set gene symbols as row names
row.names(targetCancerTPM_uniq) <- targetCancerTPM_uniq$gsym

# 删除冗余的基因符号列
# Remove redundant gene symbol column
targetCancerTPM_uniq <- targetCancerTPM_uniq[,-1]

# 查看处理后的表达矩阵前几行
# View first few rows of processed expression matrix
targetCancerTPM_uniq[1:3,1:3]
# 使用MCPcounter算法估计免疫细胞浸润度
# Estimate immune cell infiltration using MCPcounter algorithm
targetCancerTPMestimates <- MCPcounter.estimate(targetCancerTPM_uniq, featuresType = "HUGO_symbols")

# 查看输出结果维度（细胞类型数×样本数）
# Check dimensions of output (cell types x samples)
dim(targetCancerTPMestimates)
# 保存免疫细胞浸润度分析结果
# Save immune cell infiltration results to CSV
write.csv(targetCancerTPMestimates, "MCPcounter_output.csv", quote = F)
开始画图
Start drawing
# 读取MCPcounter算法输出的免疫细胞浸润度估计结果
# Read immune cell infiltration estimates from MCPcounter output
targetCancerTPMestimates <- read.csv("MCPcounter_output.csv", row.names = 1, check.names = F)

# 读取样本注释信息（包含临床特征和基因突变状态）
# Read sample annotation data (including clinical features and mutation status)
targetAnno <- read.csv("easy_input_cli.csv", row.names = 1)

# 准备热图列注释数据
# Prepare column annotations for heatmap
annotation_col_pre <- targetAnno
annotation_col <- data.frame(annotation_col_pre)

# 按照目标基因表达量对样本进行排序
# Sort samples by target gene expression level (same order as annotation)
targetCancerTPMestimates <- targetCancerTPMestimates[,row.names(annotation_col)]

# 使用pheatmap绘制免疫细胞浸润度热图
# Generate heatmap of immune cell infiltration using pheatmap
pheatmap(targetCancerTPMestimates, 
         method = "spearman",             
         cluster_rows = T, cluster_cols = F,  
         cellwidth = 1, cellheight = 30,   
         fontsize = 10,                   
         color = colorRampPalette(c("navy","white","red"))(100),  
         scale = "row",                   
         show_colnames = F,               
         border_color = "NA",             
         annotation_col = annotation_col, 
         filename = "MCPcounter.pdf")
Session Info
sessionInfo()