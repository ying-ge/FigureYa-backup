FigureYa93UMAP
FigureYa93UMAP
Zhougeng Xu, Taojun Ye
2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
文章里用的是t-SNE，我想用UMAP画这样的图。
t-SNE可参考FigureYa27t-SNE
Requirement Description
The article uses t-SNE and I want to draw such a graph using
UMAP.
The t-SNE can be found in FigureYa27t-SNE
出自
https://www.sciencedirect.com/science/article/pii/S1534580719301455?via%3Dihub
from
https://www.sciencedirect.com/science/article/pii/S1534580719301455?via%3Dihub
应用场景
UMAP，三大主流的降纬方法之一。UMAP相对于t-SNE的优势在于能够保存局部结构信息，也就是空间距离比较近的细胞类群在结果展示的时候也会比较近。这里用到的Seurat的
RunUMAP
其实是调用Python的UMAP进行处理。
Application Scenarios
UMAP, one of the three mainstream latitude reduction methods. the
advantage of UMAP over t-SNE is that it can preserve local structural
information, that is, spatially closer cell taxa will be closer in the
result display. The
RunUMAP
of Seurat used here actually
calls Python’s UMAP for processing.
环境设置
Environment Setup
先查看install_UMAP.md，安装anaconda和UMAP和添加环境变量。
First check install_UMAP.md to install anaconda and UMAP and add
environment variables.
source("install_dependencies.R")
# 加载Seurat包 - 用于单细胞RNA测序数据分析
# Load the Seurat package - for single-cell RNA sequencing data analysis
library(Seurat)
# 加载dplyr包 - 提供数据处理和操作的函数
# Load the dplyr package - provides functions for data manipulation and processing
library(dplyr)
# 加载data.table包 - 用于高效处理大型数据集
# Load the data.table package - for efficient handling of large datasets
library(data.table)
# 加载cowplot包 - 用于创建复杂的图形组合
# Load the cowplot package - for creating complex figure compositions
library(cowplot)

# 设置环境变量使R显示英文错误信息（便于搜索解决方案）
# Set environment variable to display English error messages (facilitates searching for solutions)
Sys.setenv(LANGUAGE = "en")

# 禁用字符串自动转换为因子的功能（避免意外的数据类型转换）
# Disable automatic conversion of strings to factors (prevents unexpected data type conversions)
options(stringsAsFactors = FALSE)
数据读取
Seurat可以直接读取以下两种类型：
CellRanger分析结果
表达量矩阵
后文将以表达量矩阵作为输入为例。
Data reading
Seurat can directly read the following two types:
CellRanger analysis results
Expression matrices
In the following, we will use the expression matrix as an example of
input.
读入表达量矩阵CSV/TXT文件
如果是表达量矩阵，是用
data.table::fread()
进行读取。本次的案例数据提供的就是csv文件.
Reading an expression matrix CSV/TXT file
In case of expression matrix, it is read with
data.table::fread()
. The data provided for this case is the
csv file .
# 使用data.table包中的fread函数读取压缩的CSV格式单细胞表达矩阵
# 注：fread在处理大型数据集时比read.csv更高效
# Use fread function from data.table package to read compressed CSV-format single-cell expression matrix
# Note: fread is more efficient than read.csv for handling large datasets
df <- fread("GSE123818_Root_single_cell_wt_datamatrix.csv.gz",
            data.table = FALSE)

# 提取表达数据部分（排除第一列）并转换为矩阵格式
# 第一列通常包含基因名称或ID，因此被排除在外
# Extract the expression data part (excluding the first column) and convert it to a matrix format
# The first column usually contains gene names or IDs, so it is excluded
expression_matrix <- as.matrix(df[,-1])

# 将第一列（基因名称）设置为表达矩阵的行名
# Set the first column (gene names) as the row names of the expression matrix
row.names(expression_matrix) <- df$V1

# 删除原始数据框以释放内存（大型表达矩阵可能占用大量内存）
# Remove the original data frame to free up memory (large expression matrices can be memory-intensive)
rm(df)
数据来源:
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE123818
data source:
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE123818
附：CellRanger结果的读取
对于CellRanger分析结果，Seurat有专门的函数
Read10X()
进行读取,
以Seurat下载PMBC为例, 将filtered_gene_bc_matrices.zip解压缩得到
filtered_gene_bc_matrices
Attachment: Read CellRanger results
For CellRanger analysis results, Seurat has a special function
Read10X()
to read, take Seurat download PMBC as an example,
extract filtered_gene_bc_matrices.zip to get
filtered_gene_bc_matrices
data_dir <- 'filtered_gene_bc_matrices/hg19/'
list.files(data_dir)
expression_matrix <- Read10X(data.dir = data_dir)
无论是那种来源, 最终得到的expreesion_matrix都是表达矩阵, 行是基因名,
列是细胞名
Regardless of the source, the resulting expression_matrix is an
expression matrix with rows of gene names and columns of cell names.
# 查看表达矩阵的前2行和前2列
# 作用：确认数据结构是否正确（行名应为基因名，列名应为细胞ID）
# 查看内容包括：矩阵维度、数据类型、数值范围等
# View the first 2 rows and first 2 columns of the expression matrix
# Purpose: Verify the data structure is correct (row names should be gene names, column names should be cell IDs)
# Check content includes: matrix dimensions, data types, value ranges, etc.
expression_matrix[1:2,1:2]
构建Seurat对象
使用
CreateSeuratObject
从表达量矩阵中构建
SeuratObject
Constructing a Seurat Object
Use
CreateSeuratObject
to construct a
SeuratObject
from an expression matrix.
# 使用表达矩阵创建Seurat对象（单细胞数据分析的核心数据结构）
# Create a Seurat object (the core data structure for single-cell data analysis)
seurat_obj <- CreateSeuratObject(count = expression_matrix,
                                 min.cells = 0,       
                                 min.features = 0)    

# 显示Seurat对象的基本信息
# 内容包括：细胞数、基因数、元数据信息等
# Display basic information about the Seurat object
# Content includes: number of cells, number of genes, metadata information, etc.
seurat_obj
这里的结果是4727 samples, 27629 features
参数解释：
count: 原始的count或者TPM
min.cells: 只保留至少在N个细胞中出现的基因或蛋白
min.features: 保留至少有N个检测基因或蛋白的细胞
The result here is 4727 samples, 27629 features
Parameter explanation:
count: original count or TPM
min.cells: retain only genes or proteins that occur in at least N
cells
min.features: keep cells with at least N detected genes or
proteins
数据预处理
过滤死细胞
通常是看线粒体基因和基因组基因的比例来检查。
这里的pattern指的是线粒体命名的规则，示例数据是拟南芥。
如果是人类，则是
pattern = "^MT-"
Data preprocessing
Filtering for dead cells
This is usually checked by looking at the ratio of mitochondrial
genes to genomic genes.
Here pattern refers to the rules for mitochondrial naming, example
data is Arabidopsis thaliana.
In case of human, it would be
pattern = “^MT-”
# 计算线粒体基因表达量占比（评估细胞活性和质量的重要指标）
# pattern参数指定线粒体基因的命名模式，植物中通常为"ATMG"（Arabidopsis thaliana mitochondrial gene）
# 在动物细胞中通常使用"^MT-"模式（如人类基因MT-CO1）
# Calculate the percentage of mitochondrial gene expression (an important indicator for assessing cell viability and quality)
# The pattern parameter specifies the naming pattern of mitochondrial genes, typically "ATMG" (Arabidopsis thaliana mitochondrial gene) in plants
# In animal cells, the pattern "^MT-" is commonly used (e.g., human gene MT-CO1)
seurat_obj[['percent.mt']] <- PercentageFeatureSet(seurat_obj, pattern = "ATMG")
之后用小提琴图可视化基因表达量的分布
Afterwards, the distribution of gene expression was visualized with a
violin plot
# 使用小提琴图可视化单细胞数据的关键质量指标
# Visualize key quality metrics of single-cell data using violin plots
VlnPlot(seurat_obj, 
        features = c("nFeature_RNA", 
                     "nCount_RNA",   
                     "percent.mt"),  
        ncol = 3)
这里的过滤标准根据实际展示结果来决定。比如说本次的mFeature_RNA大部分都集中在1000以下,
线粒体比例都是在0.2以下，那么过滤代码就是
The filtering criteria here are based on the actual display results.
For example, if most of the mFeature_RNA is below 1000, and the
mitochondrial ratio is below 0.2, then the filtering code is
# 基于质量控制指标过滤低质量细胞，保留符合条件的细胞
# Filter low-quality cells based on quality control metrics, retaining cells that meet the criteria
seurat_obj <- subset(seurat_obj, subset = nFeature_RNA < 10000 & percent.mt < 0.2)

# 过滤条件说明：
# subset参数中的逻辑表达式定义过滤条件
# - nFeature_RNA < 10000：排除检测到过多基因的细胞（可能是双细胞或多核细胞）
# - percent.mt < 0.2：排除线粒体基因比例过高的细胞（可能是凋亡或受损细胞）
# Explanation of filtering criteria:
# The logical expression in the subset parameter defines the filtering criteria
# - nFeature_RNA < 10000: Exclude cells with an unusually high number of detected genes (likely doublets or multinucleated cells)
# - percent.mt < 0.2: Exclude cells with high mitochondrial gene percentage (likely apoptotic or damaged cells)

# 执行后查看Seurat对象的基本信息
# View basic information of the Seurat object after filtering
seurat_obj
过滤之后, 细胞剩下4568个。
After filtration, 4568 cells remained.
数据标准化
细胞过滤后的下一步是标准化，通常用
LogNormalize
即可
Data normalization
The next step after cell filtering is standardization, which is
usually done with
LogNormalize
# 对单细胞RNA-seq数据进行归一化处理
# Normalize single-cell RNA-seq data
seurat_obj <- NormalizeData(seurat_obj,
                            normalization.method = "LogNormalize",  
                            scale.factor = 10000)
参数说明:
normalization.method: 标准化方法, 可选有LogNormalize, CLR, RC
scale.factor: 一般10000即可
Parameter Description.
normalization.method: standardization method, options are
LogNormalize, CLR, RC
scale.factor: typically 10000
识别HVG(highly variable features)
为了降低运算量，我们通常使用哪些在样本间存在变化的基因(HVG)用于下游分析，而非全部的基因集
这一步用到的函数
FindVariableFeatures
Identify HVGs (highly variable features)
In order to reduce the computational effort, we usually use which
genes (HVGs) have variations between samples for downstream analysis,
instead of the full set of genes.
The function
FindVariableFeatures
is used in this
step.
# 识别高变基因（在不同细胞间表达差异较大的基因）
# 这些基因对后续的降维和聚类分析至关重要
# Identify highly variable features (genes with high cell-to-cell expression variability)
# These genes are crucial for downstream dimensionality reduction and clustering
seurat_obj <- FindVariableFeatures(seurat_obj, 
                                   selection.method = "vst",       
                                   nfeatures = 2000,               
                                   num.bin = 20)
参数解释:
selection.method: 筛选方法,
vst
mean.var.plot
dispersion
nfeatures: 最终选择前N个基因, 配合vst和dispersion使用
num.bin：样本分组,默认20, 不需要修改
Parameter explanation.
selection.method: the selection method, the
vst
mean.var.plot
dispersion
nfeatures: final selection of the top N genes, used in conjunction
with vst and dispersion.
num.bin: grouping of samples, default is 20, no need to change
it
# 提取前10个高变基因的名称
# Extract the names of the top 10 highly variable genes
top10 <- head(VariableFeatures(seurat_obj), 10)

# 可视化高变基因筛选结果
# Visualize the results of highly variable gene selection
plot1 <- VariableFeaturePlot(seurat_obj)  # 创建高变基因散点图（x轴：平均表达量，y轴：变异度）
# Create a scatter plot of variable features (x-axis: average expression, y-axis: variability)

# 在散点图上标记前10个高变基因
# Label the top 10 highly variable genes on the scatter plot
plot2 <- LabelPoints(plot = plot1,        
                    points = top10,       
                    repel = TRUE)
# 显示最终标记好的高变基因图
# Display the final plot with labeled variable features
plot2
数据缩放(scale)
在PCA之前需要使用线性转换(scaling)对数据进行预处理，其目的是
将每个基因的表达量进行偏移，使其均值在细胞间为0
对每个基因的表达量进行缩放，使其在细胞间的方差(variance)为1
Data scaling
The data needs to be pre-processed prior to PCA using linear
transformation (scaling), the purpose of which is to
Offset the expression of each gene so that its mean value is 0
across cells.
Scale the expression of each gene so that the variance between cells
is 1.
# 获取Seurat对象中所有基因的名称
# Retrieve the names of all genes in the Seurat object
all.genes <- rownames(seurat_obj)

# 对所有基因的表达量进行标准化处理
# Standardize expression levels for all genes
seurat_obj <- ScaleData(seurat_obj, features = all.genes)
如果处理速度太慢，可以不加任何参数运行，默认会用HVGF。
If the processing is too slow, you can run it without any parameters
and it will use HVGF by default.
线性降维(PCA)
对缩放后的结果进行PCA线性降维
Linear dimensionality reduction (PCA)
Perform PCA linear dimensionality reduction on the scaled results
# 执行主成分分析(PCA)降维，提取数据的主要变异模式
# Perform Principal Component Analysis (PCA) for dimensionality reduction
seurat_obj <- RunPCA(seurat_obj,
                     features = NULL,      
                     npcs = 100,           
                     ndims.print = 1:5,    
                     nfeatures.print = 5)
参数说明:
features: 用于计算PCA的基因，默认NULL表示选择HVG
npcs: 总的PC数，默认50
ndims.print: 输出前N个PC
nfeatures.print: 输出每个PC的前N个基因
用滚石图确定聚类和UMAP用的PC数
Parameter description.
features: genes used to calculate PCA, default NULL means HVG is
selected
npcs: total number of PCs, default 50
ndims.print: output the first N PCs.
nfeatures.print: output the first N genes of each PC.
Determine the number of PCs used for clustering and UMAP using a
rolling stone plot
# 绘制PCA手肘图，确定数据中显著主成分的数量
# Plot the PCA elbow plot to determine the number of significant principal components
ElbowPlot(seurat_obj, ndims = 100)
我们选择拐点处，趋于平缓的PC。这里感觉
50
可能就够了。
选择PC数是一个不确定的过程，因此有以下几种方法可以考虑：
根据每个PC里的基因，根据背景知识确定哪些PC比较重要
使用统计学的方法，也就是后面的
JackStraw
,
找p值小于0.05(0.01)的PC
先用滚石图确定，然后分析结果，根据分析结果调整PC数
如果计算能力够，可以用下面的代码进行分析
We choose the PCs at the inflection point, which tend to level off.
here it feels like
50
might be enough.
Choosing the number of PCs is an uncertain process, so there are
several approaches to consider:
determine which PCs are more important based on background knowledge
based on the genes in each PC
use a statistical method, the
JackStraw
that follows,
to find PCs with p-values less than 0.05 (0.01)
use a rolling stone chart to determine, then analyze the results and
adjust the number of PCs accordingly
If you have enough computing power, you can use the following code
for analysis
seurat_obj <- JackStraw(seurat_obj, num.replicate = 100)
seurat_obj <- ScoreJackStraw(seurat_obj, dims = 1:100)
JackStrawPlot(seurat_obj, dims = 1:100)
细胞聚类
这部分内容并非这次UMAP的重点，但是UMAP展示聚类时需要用到
聚类分析是一个非常复杂的过程，并非这个教程所能说清，因此不是本教程的重点，只简单演示代码
Cell clustering
This part is not the focus of UMAP, but it is needed for UMAP to show
clustering.
Cluster analysis is a very complex process, not this tutorial can not
be clear, so it is not the focus of this tutorial, only a simple
demonstration of code
# 构建细胞邻域图，用于后续聚类分析
# Construct a k-nearest neighbor (KNN) graph for cells
seurat_obj <- FindNeighbors(seurat_obj, 
                           dims = 1:50)
# 执行聚类分析，识别细胞亚群
# Perform graph-based clustering to identify cell subsets
seurat_obj <- FindClusters(seurat_obj, 
                          resolution = 0.8)
最终得到了18个分群，比文章的分群数目多。
This resulted in 18 clusters, which is more than the number of
clusters in the article.
定义细胞类群
为了体现UMAP的优势，我根据文章给定的标记基因(附件TableS1)定义了这次分析的分群
通常使用DEG来鉴定不同分群的marker
Defining cell taxa
To demonstrate the advantages of UMAP, I defined the taxa for this
analysis based on the marker genes given in the article (Appendix
TableS1).
Usually DEG is used to identify markers for different taxa
# 为每个鉴定出的细胞簇寻找差异表达基因（标记基因）
# Find differentially expressed genes (marker genes) for each identified cell cluster
markers <- FindAllMarkers(seurat_obj, 
               test.use = "bimod",               
               logfc.threshold = 0.25)
差异分析完成之后, 在挑选marker时, 尽可能保证基因在聚类中表达细胞数多,
除此之外的细胞数少, 然后可以按照Fold Change进行排序,
选择每个cluster前10个
After the analysis of differences is completed, when selecting
markers, try to ensure that the gene is expressed in as many cells as
possible in the clusters, and the number of cells other than that is
small, and then you can sort according to the Fold Change, and select
the top 10 cells in each cluster.
# 加载dplyr包用于数据处理（如果尚未加载）
# Load the dplyr package for data manipulation (if not already loaded)
library(dplyr)

# 筛选高可信度的标记基因
# Filter high-confidence marker genes
marker2 <- markers[ markers$pct.1 > 0.1 & markers$pct.2 < 0.1 ,]




# 为每个细胞簇选择最具代表性的前10个标记基因
# Select the top 10 representative marker genes for each cell cluster
marker3 <- marker2 %>% 
  group_by(cluster) %>%
  top_n(n = 10, wt = avg_log2FC)
  
         

# 将筛选后的标记基因保存为CSV文件
# Save the filtered marker genes to a CSV file
write.table(marker3, "markers.csv", 
            sep = ",",                
            row.names = FALSE,        
            col.names = TRUE)
打开csv文件，然后根据附件”devcel_4493_mmc3.xlsm”里的标记信息，命名我们的cluster
Open the csv file and name our cluster according to the tag
information in the attachment “devcel_4493_mmc3.xlsm”.
# 定义细胞簇的新命名规则（基于标记基因和生物学知识进行注释）
# Define new naming rules for cell clusters (annotation based on marker genes and biological knowledge)
new.cluster.ids <- c(
  "0" = "Mature",         
  "1" = "Meristem",       
  "2" = "Meristem/QC/Colummela",  
  "3" = "Trichoblast",    
  "4" = "Meristem",       
  "5" = "Unknown",        
  "6" = "Atrichoblast",   
  "7" = "Meristem",       
  "8" = "Stele",          
  "9" = "Mature",         
  "10" = "Cortex/Endodermis",  
  "11" = "Atrichoblast",  
  "12" = "QC/Colummela",  
  "13" = "Xylem",         
  "14" = "Mature",        
  "15" = "Endodermis",    
  "16" = "Trichoblast",   
  "17" = "Mature" ,
  "18" = "Other"
)

# 将新命名规则与Seurat对象中的细胞簇编号绑定
# Bind the new naming rules to the cluster IDs in the Seurat object
names(new.cluster.ids) <- levels(seurat_obj)

# 使用新名称重命名Seurat对象中的细胞簇
# Rename cell clusters in the Seurat object with biological annotations
seurat_obj <- RenameIdents(seurat_obj, new.cluster.ids)
UMAP非降维分析
UMAP相对于t-SNE的优势在于能够保存局部结构信息，也就是空间距离比较近的细胞类群在结果展示的时候也会比较近。
Seurat的
RunUMAP
其实是调用Python的UMAP进行处理，UMAP的GitHub地址为
https://github.com/lmcinnes/umap
UMAP non-dimensionality reduction analysis
The advantage of UMAP over t-SNE is the ability to preserve local
structural information, i.e. cell taxa that are spatially closer
together will also be closer together when the results are
presented.
Seurat’s
RunUMAP
actually calls Python’s UMAP for
processing, the GitHub address for UMAP is
https://github.com/lmcinnes/umap
# 版本1：使用默认参数执行UMAP降维，生成二维可视化结果
# Version 1: Perform UMAP dimensionality reduction with default parameters
seurat_obj <- RunUMAP(seurat_obj, dims = 1:50)
# 版本2：使用自定义参数执行UMAP降维（调参版本）
# Version 2: Perform UMAP with customized parameters (parameter-tuned version)
seurat_obj2 <- RunUMAP(seurat_obj, 
                      dims = 1:50,               
                      n.neighbors = 15,          
                      min.dist = 0.1,            
                      metric = "correlation")
UMAP有很多参数可供调整，但是最重要的是下面几个：
dims: 使用维度数, 即之前选择的PC数
n_neighbors: 每个细胞的邻近细胞数。默认是30,
值越大会导致局部细节信息缺失, 但是全局结构更好.
参数应该在5-50之间，
min_dist: 值越大, 点的在图上分布越均匀, 值越小, 局部结构更好.
默认是0.3, 建议范围在0.001-0.5
metric: 计算距离聚类的算法, 推荐看
https://umap-learn.readthedocs.io/en/latest/parameters.html#metric
UMAP has many parameters to adjust, but the most important are the
following:
dims: number of dimensions to use, i.e. the number of PCs previously
selected
n_neighbors: number of neighboring cells per cell. The default is
30, larger values result in missing local details, but better global
structure. The parameter should be between 5 and 50.
min_dist: the larger the value, the more evenly the points are
distributed on the graph, the smaller the value, the better the local
structure. The default value is 0.3, the recommended range is
0.001-0.5.
metric: the algorithm for calculating distance clustering, see
https://umap-learn.readthedocs.io/en/latest/parameters.html#metric
.
UMAP展示聚类结果
用DimPlot进行可视化展示，默认用聚类进行上色,
标签输出在旁边，用自定义颜色
UMAP showing clustering results
Visual presentation with DimPlot, default coloring with clustering,
label output next to it with custom colors
# 可视化默认参数UMAP降维结果
# Visualize UMAP dimensionality reduction results with default parameters
p1 <- DimPlot(seurat_obj, 
              reduction = "umap",       
              pt.size = 1,              
              label = FALSE)            

# 可视化调整参数后的UMAP降维结果
# Visualize UMAP results with adjusted parameters
p2 <- DimPlot(seurat_obj2, 
              reduction = "umap",       
              pt.size = 1,              
              label = FALSE)
参数说明：
cols: 使用自己定义的颜色
pt.size: 图中点的大小
label: 是否将标签输出在细胞类群上
repel: 如果标签有可能重叠，设置为TRUE
结果展示:
默认参数UMAP结果
Parameter Description:
cols: use your own defined colors
pt.size: size of the points in the plot
label: whether to output the label on the cell taxa
repel: set to TRUE if labels are likely to overlap
Results display.
Default parameter UMAP results
print(p1)
调整参数后的UMAP结果
UMAP results after adjusting the parameters
print(p2)
将两个图合并比较
Combine and compare the two graphs
# 使用cowplot包的plot_grid函数将两个UMAP可视化结果垂直排列
# Use plot_grid function from cowplot package to arrange two UMAP visualizations vertically
p12 <- cowplot::plot_grid(p1, p2, ncol = 1)

# 显示组合后的图形
# Display the combined plot
print(p12)
默认颜色不是特别的好看，我们需要给聚类自定义颜色
第一步: 先看看有多少个levels
The default color is not very nice, we need to customize the color
for the clusters.
Step 1: Let’s see how many levels there are.
levels(seurat_obj)
第二步: 对每个level定义颜色 (颜色建议多看看单细胞的文章,
然后保存他们的颜色)
Step 2: Define colors for each level (for colors, we recommend
reading more about single cells and saving their colors).
# 定义细胞类型与颜色的映射关系
# Define color mapping for different cell types
mycols <- c(
  "Mature" = "#d7301f",                
  "Meristem" = "#31a354",              
  "Meristem/QC/Colummela" = "#ffeda0", 
  "Trichoblast/Trichoblast" = "#b4e28b",
  "Atrichoblast" = "#1f78b4",          
  "Stele" = "#984ea3",                 
  "Cortex/Endodermis" = "#006d2c",     
  "QC/Colummela" = "#db4622",          
  "Xylem" = "#68c2cb",                 
  "Endodermis" = "#0e8cf8",            
  "Trichoblast" = "#04889d",           
  "Unknown" = "#b4b4b5"                
)
调整之后的颜色如下
The adjusted colors are as follows
# 可视化UMAP降维结果，使用自定义颜色和标签
# Visualize UMAP dimensionality reduction results with custom colors and labels
p3 <- DimPlot(seurat_obj, 
              reduction = "umap",       
              pt.size = 0.5,            
              label = TRUE,             
              cols = mycols)            

# 显示图形
# Display the plot
print(p3)
如果不想要右边的legend
If you don’t want the right-legend
# 从已有的UMAP可视化结果中移除图例
# Remove the legend from the existing UMAP visualization
p4 <- p3 + NoLegend()

# 显示无图例的图形
# Display the plot without legend
print(p4)
保存结果: 调整width和height改变PDF的长宽比
Save Result: Adjust width and height to change PDF aspect ratio
pdf("UMAP_cluster.pdf", width = 8,height = 4)
print(p1)
print(p2)
print(p12)
print(p3)
print(p4)
dev.off()
UMAP展示基因表达量
可以在UMAP上展示部分基因的分布
UMAP Display of Gene Expression
You can display the distribution of some genes on UMAP
# 可视化特定基因在UMAP空间中的表达模式
# Visualize expression patterns of specific genes in UMAP space
fp <- FeaturePlot(seurat_obj, 
                 features = c("AT4G34970", "AT2G04025", "AT1G13620"),  # 待可视化的基因ID
                 cols = c("lightgrey", "#e41a1c"),  
                 pt.size = 0.5,                     
                 label = FALSE,                     
                 label.size = 4,                    
                 reduction = "umap")                

# 显示基因表达特征图
# Display the feature plot
print(fp)
参数说明:
features: 要展示的基因
cols: 背景色和高亮色
pt.size: 点的大小
label: 是否在图中展示细胞的来源信息, 保持默认FALSE即可
label.size: 标签字体大小
保存结果
Parameter description.
features: genes to be displayed
cols: background and highlight colors
pt.size: size of the point
label: if or not to show the cell’s source information in the graph,
keep the default FALSE
label.size: the size of the label font
Saving results
pdf("UMAP_gene_dist.pdf", width = 8,height = 4)
print(fp)
dev.off()
Session Info
sessionInfo()