FigureYa113MutSigCV
FigureYa113MutSigCV
Author(s)
: Xiaofan Lu, Taojun Ye
Reviewer(s)
: Ying Ge
Date
: 2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
用MutSigCV推断SMG（significantly mutated gene），画出文章里的图。
MutSigCV是用matlab写成的，带我顺利用上它。
Requirement description
Infer SMG (significantly mutated gene) using MutSigCV and draw the
graph in the article.
MutSigCV is written in Matlab, let me use it smoothly.
出自
https://www.frontiersin.org/articles/10.3389/fonc.2019.00488/full
from
https://www.frontiersin.org/articles/10.3389/fonc.2019.00488/full
应用场景
画基因突变瀑布图时，展示哪几个基因呢？可以展示显著突变基因。看例文描述：We
used MutSigCV_v1.41 (20) (www.broadinstitute.org) to infer significant
cancer mutated genes (q < 0.05) across the two classes currently
identified with default parameters.
MutSigCV是用来推断SMG（significantly mutated
gene）的，会综合考虑基因长度，以及沉默突变和非沉默突变的频率，因此如果没有沉默突变（silent
mutation），或沉默突变过少（算法内有固定阈值），这个算法是无法运行的。
注意：
若使用MutSigCV，请引用： Lawrence MS, Stojanov
P, Polak P, Kryukov GV, Cibulskis K, Sivachenko A, Carter SL, Stewart C,
Mermel CH, Roberts SA (2013) Mutational heterogeneity in cancer and the
search for new cancer-associated genes. Nature 499(7457): 214
如果只想直接从TCGA下载MAF文件画图，可直接使用FigureYa18oncoplot，还可以进一步用FigureYa42oncoprint自己定制瀑布图。
Application scenarios
When drawing a waterfall diagram of gene mutations, which genes are
displayed? Can display significantly mutated genes. According to the
example text description: We used MutSigCV_v1.41 (20)
(www.broadinstitute.org) to infer significant cancer mutated genes (q
< 0.05) across the two classes currently identified with default
parameters.
MutSigCV is used to infer SMG (significantly mutated genes), taking
into account gene length, as well as the frequency of silent and non
silent mutations. Therefore, if there are no silent mutations or too few
silent mutations (with a fixed threshold within the algorithm), this
algorithm cannot run.
**Note: * * If using MutSigCV, please cite: Lawrence MS, Stojanov P,
Polak P, Kryukov GV, Cibulskis K, Sivachenko A, Carter SL, Stewart C,
Mermel CH, Roberts SA (2013) Mutational heterogeneity in cancer and the
search for new cancer-associated genes. Nature 499(7457): 214
If you only want to download MAF files directly from TCGA for
drawing, you can use FigureYa18oncoplot directly, or you can further
customize waterfall plots yourself using FigureYa42oncoprint.
环境设置
先在R里准备MutSigCV所需的输入数据，然后用MutSigCV推断SMG，最后在R里用MutSigCV的输出文件画瀑布图。
（其实Matlab的使用方式很傻瓜，比R更容易，更像Excel）
Environment settings
First, prepare the input data required for MutSigCV in R, then infer
SMG using MutSigCV, and finally draw a waterfall plot using MutSigCV’s
output file in R.
(Actually, the way Matlab is used is quite simple, easier than R, and
more like Excel)
安装MutSigCV
第一步：安装Matlab。目前MutSigCV的源码是用Matlab编写的，可前往Matlab网站注册，下载30天试用版：
https://ww2.mathworks.cn/campaigns/products/trials.highResolutionDisplay.html?prodcode=ML
。
第二步：把
MutSigCV.m
文件拷贝到当前文件夹就可以使用了。
Install MutSigCV
Step 1: Install Matlab. At present, the source code of MutSigCV is
written in Matlab. You can register on the Matlab website and download
the 30 day trial version:<
https://ww2.mathworks.cn/campaigns/products/trials.highResolutionDisplay.html?prodcode=ML
>.
Step 2: Copy the ‘MutSigCV. m’ file to the current folder to use.
安装并加载画图所需的R包
Install and load the R package required for drawing
source("install_dependencies.R")
library(tidyverse)      # 数据处理和可视化工具集 | Data processing and visualization toolkit
library(magrittr)       # 提供管道操作符 %>% | Provides pipe operator %>%
library(readxl)         # 读取Excel文件 | Read Excel files
library(stringr)        # 字符串处理工具 | String processing tools
library(forcats)        # 因子处理工具 | Factor processing tools
library(ComplexHeatmap) # 复杂热图绘制 | Complex heatmap plotting
library(RColorBrewer)   # 颜色方案 | Color schemes
Sys.setenv(LANGUAGE = "en") # 显示英文报错信息 | Display error messages in English
options(stringsAsFactors = FALSE) # 禁止chr转成factor | Prevent converting strings to factors
输入文件
easy_input_meta.local
mutation.full.txt，MAF文件，用于推断SVG。从TCGA下载MAF文件的方法可参考FigureYa19Lollipop。
meta.mut.rda和local.mut.rda，用于画图时展示两组，非必需。里面分别保存了两组样品名称（字符串）。此处只是为了重现原图，实际使用时请选用自己不同亚型的样本。
另外，在后面的“使用MutSigCV推断SMG”的“参数设置”部分需要下载默认文件。
Input file
Easyinput_ceta.local mutation.full.txt, MAF file, used for inferring
SVG. The method of downloading MAF files from TCGA can refer to
FigureYa19Lollipop.
Meta.mut.rda and local.mut.rda are used to display two sets during
drawing and are not mandatory. There are two sets of sample names
(strings) saved inside. This is only for reproducing the original image.
Please choose your own samples of different subtypes for actual use.
In addition, the default file needs to be downloaded in the
“Parameter Settings” section of “Inferring SMG using MutSigCV” later
on.
# 读取MAF文件 | Read MAF file
meta.maf <- as.data.frame(read_tsv("easy_input_meta.local mutation.full.txt", comment = "#"))
head(meta.maf)
# 读取两组样品名，仅在画图时需要它 | Read two groups of sample names, only needed for plotting
meta.mut <- read.table("easy_input_meta.mut.txt")[,1]  # 转移组样品名 | Metastasis group sample names
local.mut <- read.table("easy_input_local.mut.txt")[,1]  # 原发组样品名 | Primary group sample names
输入文件预处理
把MAF文件整理成MutSigCV所需的输入文件的格式，生成文件：meta.local
mutation.full_for_MutSig_input.txt
阅读MutSigCV教程，了解数据格式要求，就能理解下面的预处理过程了
Input file preprocessing
Organize the MAF file into the input file format required by
MutSigCV, and generate the file: meta. local
mutation.full_for_SutSig_input. txt
By reading the MutSigCV tutorial and understanding the data format
requirements, one can comprehend the preprocessing process below
# 确认Tumor_Seq_Allele1和Tumor_Seq_Allele2是否一致（见MutSigCV教程） | Check if Tumor_Seq_Allele1 and Tumor_Seq_Allele2 are identical (see MutSigCV tutorial)
if(!identical(meta.maf$Tumor_Seq_Allele1,meta.maf$Tumor_Seq_Allele2)) {

  cat("Tumor_Seq_Allele1 and Tumor_Seq_Allele2 should be the same!\n")  # 提示两个等位基因列应保持一致 | Prompt that the two allele columns should be identical
  cat("Processing is running...\n")  # 提示正在处理数据 | Indicate data processing in progress
  meta.maf$Tumor_Seq_Allele1 <- meta.maf$Tumor_Seq_Allele2  # 将Allele2的值赋给Allele1，确保两者一致 | Assign Allele2 values to Allele1 to ensure consistency
  if(all(meta.maf$Tumor_Seq_Allele1 == meta.maf$Tumor_Seq_Allele2) &  !all(meta.maf$Tumor_Seq_Allele1 == meta.maf$Reference_Allele)) {
    cat("Your data is free to go now!\n")  # 确认数据已处理完毕且符合要求 | Confirm data processing is complete and meets requirements
  }
}
# 选择MutSigCV算法需要的列，输出到当前文件夹 | Select columns required by MutSigCV algorithm and output to current directory
outTable <- meta.maf %>%
  select(Hugo_Symbol,               # 基因名称 | Gene name
         Tumor_Sample_Barcode,      # 肿瘤样本条形码 | Tumor sample barcode
         Variant_Classification,    # 变异分类 | Variant classification
         Reference_Allele,          # 参考等位基因 | Reference allele
         Tumor_Seq_Allele1,         # 肿瘤测序等位基因1 | Tumor sequencing allele 1
         Tumor_Seq_Allele2)         # 肿瘤测序等位基因2 | Tumor sequencing allele 2
write.table(outTable,              # 输出表格 | Output table
            "meta.local mutation.full_for_MutSig_input.txt",  # 输出文件名 | Output file name
            sep = "\t",            # 使用制表符分隔 | Separate with tab
            row.names = F,         # 不包含行名 | Exclude row names
            quote = F)             # 不使用引号引述文本 | Do not enclose text with quotes
使用MutSigCV推断SMG
这一步要用到Matlab，会生成meta.local
mutation.full_MutSig_output.sig_genes.txt文件，用于下一步画图。
也可以在GenePattern云服务器上运行，不想使用Matlab的小伙伴就自行探究在线模式吧。
Inferring SMG using MutSigCV
This step requires the use of Matlab, which will generate the
meta.local mutation.full_SutSig_out.sig_genes. txt file for the next
step of drawing.
It can also be run on GenePattern cloud server. For those who don’t
want to use Matlab, just explore online patterns on your own.
参数设置
MutSigCV算法，这里采用：
默认参数：hg19注释文件, chr_files_hg19文件夹
默认的突变字典文件：mutation_type_dictionary_file.txt
默认的coverage文件：gene.covariates.txt和exome_full192.coverage.txt
以上默认文件的源文件下载自
https://software.broadinstitute.org/cancer/cga/mutsig_download
，注册后就能下载。下载后全部解压到当前文件夹。
若对该算法非常熟悉，或者有其他个性化需求，可以自定义这些文件，技术细节请参考：
http://software.broadinstitute.org/cancer/software/genepattern/modules/docs/MutSigCV
Parameter settings
The MutSigCV algorithm is used here:
-Default parameters: hg19 comment file, chr_files_hg19 folder
-Default mutation dictionary file: mutation_type-dictionary_file. txt
-Default coverage files: gene.comvariates.txt and
exome_full192.cCovered. txt
The source files for the default files above were downloaded from<
https://software.broadinstitute.org/cancer/cga/mutsig_download
>After registration, you can download it. After downloading, unzip
everything to the current folder.
If you are very familiar with the algorithm or have other
personalized needs, you can customize these files. For technical
details, please refer to:<
http://software.broadinstitute.org/cancer/software/genepattern/modules/docs/MutSigCV
>
运行MutSigCV
前面已经攒齐了输入文件，都保存在当前文件夹里。
现在，在Matlab的Current
Folder里选择进入当前文件夹，然后把下面这行代码复制粘贴到Matlab的Command
Window，敲回车，就开始运行啦！
Run MutSigCV
I have already collected all the input files and saved them in the
current folder.
Now, select enter the current folder in Matlab’s Current Folder, then
copy and paste the following line of code into Matlab’s Command Window,
press Enter, and start running!
MutSigCV('meta.local mutation.full_for_MutSig_input.txt','exome_full192.coverage.txt','gene.covariates.txt','meta.local mutation.full_MutSig_output','mutation_type_dictionary_file.txt','chr_files_hg19')
数据格式以及输入命令的参数意义：
第一个参数：maf文件（请注意我使用的maf文件的格式，抬头最好完全一致，且Variant_Classification中的突变名称也必须匹配突变字典中的名字，举个简单的例子，沉默突变必须叫Silent，不能叫silent，不能叫silence，也不能叫synonymous）；此外，Reference_Allele为参考碱基，Tumor_Seq_Allele1为突变碱基，且必须与Allele2完全一致，而在有些MAF
calling的方法里，这两列是不一致的，请仔细确认并且在R代码的预处理部分根据实际情况修改！！！
第二个参数以及第三个参数默认，第四个参数为输出文件的前缀，后两个参数也默认，一个是数据字典，一个是使用的注释文件。
我将网页上比较关键的一页
How to run
MutSigCV
转成了pdf，供大家查看详情。
程序运行结束后，无论是成功还是失败，都会再次出现fx>>。可以看到程序提示显著突变的结果被保存到sig_genes后缀的txt文件：Wrote
results to meta.local mutation.full_MutSig_output.sig_genes.txt
随后在文件夹下会生成4个文件：
meta.local mutation.full_MutSig_output.sig_genes.txt
meta.local mutation.full_MutSig_output.categs.txt
meta.local mutation.full_MutSig_output.coverage.txt
meta.local mutation.full_MutSig_output.mutations.txt
这四个文件中后缀为sig_genes是显著突变基因，打开根据qvalue或者pvalue筛选即可，一般qvalue
< 0.05，类似调整的p值：
Data format and parameter meanings of input commands:
-The first parameter is the maf file (please note that the format of
the maf file I am using should be exactly the same, and the mutation
name in Variant Classification must also match the name in the mutation
dictionary. For example, a silent mutation must be called Silent, not
Silent, not Synonymous); In addition, Refered_Allele is the reference
base, while Tumor_Seq_Selle1 is the mutated base and must be completely
identical to Allele2. However, in some MAF calling methods, these two
columns are inconsistent. Please carefully confirm and modify them in
the pre-processing section of the R code according to the actual
situation!!! -The second and third parameters are default, the fourth
parameter is the prefix of the output file, and the last two parameters
are also default, one is the data dictionary and the other is the
annotation file used. -I have converted the crucial page * * How to run
MutSigCV * * on the webpage into a PDF for everyone to view the
details.
After the program runs successfully or fails, fx>>will appear
again. You can see that the program prompts significant mutations and
the results are saved to a txt file with the sig_genes suffix: Wrote
results to meta.local mutation.full_MutSig_output.sig_genes.txt
Subsequently, four files will be generated in the folder:
meta.local mutation.full_MutSig_output.sig_genes.txt
meta.local mutation.full_MutSig_output.categs.txt
meta.local mutation.full_MutSig_output.coverage.txt
meta.local mutation.full_MutSig_output.mutations.txt
The suffix sig_genes in these four files represents significantly
mutated genes, which can be filtered based on qvalue or pvalue.
Generally, qvalue<0.05, similar to adjusted p-values:
开始画图
提取显著突变基因SMGs，用q < 0.05筛选
Start drawing
Extract significant mutated genes SMGs and screen with q<0.05
# 读取MutSigCV输出的显著突变基因结果 | Read significant mutated genes output from MutSigCV
mutsigcv <- read.table("meta.local mutation.full_MutSig_output.sig_genes.txt", 
                       sep = "\t",           # 指定制表符分隔 | Specify tab separator
                       row.names = 1,        # 使用第一列作为行名 | Use first column as row names
                       header = T,           # 包含表头 | Include header
                       stringsAsFactors = F) # 禁止自动转换字符串为因子 | Prevent string to factor conversion

# 筛选q值小于0.05的显著突变基因 | Filter significantly mutated genes with q-value < 0.05
mutsigcv <- rownames(mutsigcv[mutsigcv$q < 0.05,])  # q值：多重假设检验校正后的p值 | q-value: p-value adjusted for multiple hypothesis testing

# 查看筛选得到的显著突变基因 | View the filtered significant mutated genes
mutsigcv
画图
plot
# 创建光谱渐变调色板 | Create spectral color palette
mycol <- colorRampPalette(brewer.pal(11,'Spectral'))(12)[12:1]  # 反转色序 | Reverse color order

# 定义每种变异类型的绘图函数 | Define plotting functions for each variant type
alter_fun = list(
  background = function(x, y, w, h) {  # 背景色 | Background color
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = lightgrey, col = NA))
  },
  Missense_Mutation = function(x, y, w, h) {  # 错义突变 | Missense mutation
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[1], col = NA)) 
  },
  Nonsense_Mutation = function(x, y, w, h) {  # 无义突变 | Nonsense mutation
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[2], col = NA)) 
  },
  Frame_Shift_Del = function(x, y, w, h) {  # 移码缺失 | Frameshift deletion
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[3], col = NA)) 
  },
  Frame_Shift_Ins = function(x, y, w, h) {  # 移码插入 | Frameshift insertion
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[4], col = NA)) 
  },
  UTR5 = function(x, y, w, h) {  # 5'非翻译区变异 | 5'UTR variant
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[5], col = NA)) 
  },
  Splice_Site = function(x, y, w, h) {  # 剪接位点变异 | Splice site variant
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[6], col = NA)) 
  },
  Silent = function(x, y, w, h) {  # 沉默突变 | Silent mutation
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[7], col = NA)) 
  },
  UTR3 = function(x, y, w, h) {  # 3'非翻译区变异 | 3'UTR variant
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[8], col = NA)) 
  },
  In_Frame_Del = function(x, y, w, h) {  # 框内缺失 | In-frame deletion
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[9], col = NA))
  },
  Flank5 = function(x, y, w, h) {  # 5'侧翼区变异 | 5'Flank variant
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[10], col = NA))
  },
  Intron = function(x, y, w, h) {  # 内含子变异 | Intron variant
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[11], col = NA)) 
  },
  In_Frame_Ins = function(x, y, w, h) {  # 框内插入 | In-frame insertion
    grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), gp = gpar(fill = mycol[12], col = NA)) 
  }
)

# 定义变异类型与颜色的映射 | Define color mapping for variant types
col = c("Missense_Mutation" = mycol[1], 
        "Nonsense_Mutation" = mycol[2], 
        "Frame_Shift_Del" = mycol[3], 
        "Frame_Shift_Ins" = mycol[4], 
        "UTR5" = mycol[5],
        "Splice_Site" = mycol[6],
        "Silent" = mycol[7],
        "UTR3" = mycol[8],
        "In_Frame_Del" = mycol[9],
        "Flank5" = mycol[10],
        "Intron" = mycol[11],
        "In_Frame_Ins" = mycol[12])

# 创建样本注释信息 | Create sample annotations
my_annotation = HeatmapAnnotation(df = data.frame(MetaStatus=rep(c("Meta","Local"),c(49,144))),
                                  col = list(MetaStatus=c("Meta"=jco[2],"Local"=jco[1])))

# 绘制OncoPrint热图并保存为PDF | Generate OncoPrint heatmap and save as PDF
pdf("oncoprint_mutsigcv_detailed_variationtype.pdf",width = 10,height = 4)
oncoPrint(mygene, alter_fun = alter_fun, col = col,
          show_pct = T,                # 左侧显示突变百分比 | Show mutation percentage on left
          column_title = "",           # 列标题为空 | Empty column title
          bottom_annotation = my_annotation,  # 底部添加样本注释 | Add sample annotation at bottom
          show_heatmap_legend=T,       # 显示图例 | Show legend
          column_title_gp = gpar(fontsize = 8),  # 列标题字体大小 | Column title font size
          row_names_gp = gpar(fontsize = 7),     # 行名(基因名)字体大小 | Row name font size
          column_names_gp = gpar(fontsize = 6))  # 列名(样本名)字体大小 | Column name font size
dev.off()
附：
Matlab R2019a的30天试用版本，已运行成功。
Attachment:
The 30 day trial version of Matlab R2019a has been successfully
run.
Session Info
sessionInfo()