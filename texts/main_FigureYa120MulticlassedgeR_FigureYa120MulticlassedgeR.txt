FigureYa120MulticlassedgeR
FigureYa120MulticlassedgeR
Author(s)
: Xiaofan Lu, Taojun Ye
Reviewer(s)
: Ying Ge
Date
: 2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
用edgeR实现多组差异分析。能用来替换FigureYa109SubtypeGSEA中的配对差异表达过程（亚型数目>=3），并跟它无缝对接。
Requirement description
Implement multi group difference analysis using EdgeR. Can be used to
replace the paired differential expression process (subtype
number>=3) in FigureYa109SubtypeGSEA and seamlessly integrate with
it.
应用场景
结合FigureYa109subtypeGSEA，分析每一组与其他样品的差异基因，进而找出亚型特异富集的通路；
结合FigureYa116supervisedCluster，分析每一组与其他样品的差异基因，进而找出亚型特异的marker基因。
注意：
本次不涉及批次效应消除，若样本间含有批次效应，请阅读edgeR的document，在设计矩阵中纳入batch
effect。
https://bioconductor.org/packages/release/bioc/vignettes/edgeR/inst/doc/edgeRUsersGuide.pdf
，有个完整的例子：4.2
RNA-Seq of pathogen inoculated arabidopsis with batch effects
这里针对read
count表达矩阵作为输入的情况，还可以用FigureYa118MulticlassDESeq2。如果你的数据是FPKM/RPKM或芯片数据，请参考FigureYa119Multiclasslimma。
Application scenarios
Based on Figure Ya109 subtype GSEA, analyze the differentially
expressed genes between each group and other samples, and identify
subtype specific enriched pathways;
Using FigureYa116supervisedCluster, analyze the differentially
expressed genes between each group and other samples, and identify
subtype specific marker genes.
**Note: * * This time does not involve batch effect elimination. If
there are batch effects between samples, please read the edgeR document
and include batch effects in the design matrix<
https://bioconductor.org/packages/release/bioc/vignettes/edgeR/inst/doc/edgeRUsersGuide.pdf
>Here is a complete example: 4.2 RNA Seq of pathogenic uncoordinated
arabidopsis with batch effects
For the case where the read count expression matrix is used as input,
FigureYa118MulticlassDESeq2 can also be used. If your data is FPKM/RPKM
or chip data, please refer to FigureYa119 Multiclasslimma.
环境设置
Environment settings
source("install_dependencies.R")
library(edgeR)
Sys.setenv(LANGUAGE = "en") #显示英文报错信息
options(stringsAsFactors = FALSE) #禁止chr转成factor
自定义函数，分别比较每一组跟其他样品之间的差异，如果有更多组，按规律补充进去即可。
Customize the function to compare the differences between each group
and other samples separately. If there are more groups, simply add them
according to the pattern.
# 创建需要配对比较的列表 [Create a list for pairwise comparisons]
# 参数：group - 样本分组信息，命名向量，格式为样本名=分组名 [Parameter: group - Sample grouping information, named vector with format sample_name=group_name]
createList <- function(group=NULL) {
  
  tumorsam <- names(group)  # 获取所有肿瘤样本名称 [Get names of all tumor samples]
  sampleList = list()       # 存储所有比较的样本集合 [Store sample sets for all comparisons]
  treatsamList =list()      # 存储处理组样本集合 [Store treatment group sample sets]
  treatnameList <- c()      # 存储处理组名称 [Store treatment group names]
  ctrlnameList <- c()       # 存储对照组名称 [Store control group names]
  
  #A-1: 类1 vs 其他 [Class 1 vs Others]
  sampleList[[1]] = tumorsam  # 所有样本参与比较 [All samples included in comparison]
  treatsamList[[1]] = intersect(tumorsam, names(group[group=="immune"])) # 亚型名称需要根据情况修改 [Subtype name needs to be modified according to actual situation]
  treatnameList[1] <- "immune" # 该亚型的命名 [Name of this subtype]
  ctrlnameList[1] <- "Others"  # 其他亚型的命名 [Name of other subtypes]
  
  #A-2: 类2 vs 其他 [Class 2 vs Others]
  sampleList[[2]] = tumorsam
  treatsamList[[2]] = intersect(tumorsam, names(group[group=="keratin"]))
  treatnameList[2] <- "keratin"
  ctrlnameList[2] <- "Others"
  
  #A-3: 类3 vs 其他 [Class 3 vs Others]
  sampleList[[3]] = tumorsam
  treatsamList[[3]] = intersect(tumorsam, names(group[group=="MITF-low"]))
  treatnameList[3] <- "MITF-low"
  ctrlnameList[3] <- "Others"
  
  # 返回：包含四个元素的列表 [Returns: A list containing four elements]
  # 1. 所有比较的样本集合 [Sample sets for all comparisons]
  # 2. 处理组样本集合 [Treatment group sample sets]
  # 3. 处理组名称 [Treatment group names]
  # 4. 对照组名称 [Control group names]
  return(list(sampleList, treatsamList, treatnameList, ctrlnameList))
  
}

# 配对edgeR差异表达分析 [Paired edgeR differential expression analysis]
# 参数：res.path - 结果保存路径 [Parameter: res.path - Path to save results]
# 参数：countsTable - 表达量计数矩阵，行名为基因，列名为样本 [Parameter: countsTable - Expression count matrix, row names are genes, column names are samples]
# 参数：prefix - 结果文件前缀 [Parameter: prefix - Prefix for result files]
# 参数：complist - 比较列表，由createList函数生成 [Parameter: complist - Comparison list generated by createList function]
# 参数：overwt - 是否覆盖已存在的结果文件 [Parameter: overwt - Whether to overwrite existing result files]
twoclassedgeR <- function(res.path=NULL, countsTable=NULL, prefix=NULL, complist=NULL, overwt=FALSE) {
  
  #Groupinfo could contain "batch", which will be considered by edgeR design matrix
  sampleList <- complist[[1]]      # 所有比较的样本集合 [Sample sets for all comparisons]
  treatsamList <- complist[[2]]    # 处理组样本集合 [Treatment group sample sets]
  treatnameList <- complist[[3]]   # 处理组名称 [Treatment group names]
  ctrlnameList <- complist[[4]]    # 对照组名称 [Control group names]
  allsamples <- colnames(countsTable)  # 获取所有样本名称 [Get names of all samples]
  
  options(warn=1)  # 设置警告级别 [Set warning level]
  for (k in 1:length(sampleList)) { # 循环读取每一次比较的内容 [Loop through each comparison]
    samples <- sampleList[[k]]      # 当前比较的样本集合 [Sample set for current comparison]
    treatsam <- treatsamList[[k]]   # 当前比较的处理组样本 [Treatment samples for current comparison]
    treatname <- treatnameList[k]   # 当前处理组名称 [Name of current treatment group]
    ctrlname <- ctrlnameList[k]     # 当前对照组名称 [Name of current control group]
    
    compname <- paste(treatname, "_vs_", ctrlname, sep="") # 生成最终文件名 [Generate final file name]
    tmp = rep("others", times=length(allsamples))  # 初始化样本类型 [Initialize sample types]
    names(tmp) <- allsamples
    tmp[samples]="control"          # 设置当前比较的样本为control [Set samples in current comparison as control]
    tmp[treatsam]="treatment"       # 设置当前处理组样本为treatment [Set treatment samples as treatment]
    outfile <- file.path( res.path, paste(prefix, "_edgeR_test_result.", compname, ".txt", sep="") )  # 结果文件路径 [Path of result file]
    
    # 因此差异表达分析较慢，因此如果文件存在，在不覆盖的情况下（overwt=F）不再次计算差异表达
    # Since differential expression analysis is time-consuming, skip if file exists and overwt is FALSE
    if (file.exists(outfile) & (overwt==FALSE)) { 
      cat(k, ":", compname, "exists and skipped;\n")
      next
    }
  
    # 创建样本信息数据框 [Create sample information data frame]
    saminfo <- data.frame("Type"=tmp[samples],"SampleID"=samples,stringsAsFactors = F)
    
    # 将样本类型转换为因子，指定水平顺序 [Convert sample type to factor with specified level order]
    group=factor(saminfo$Type,levels = c("control","treatment"))    
    
    # 设计矩阵仅包含亚型信息，若有批次效应请修改，例如design <- model.matrix(~group+treat)
    # Design matrix only includes subtype information. Modify if batch effect exists, e.g., design <- model.matrix(~group+treat)
    design <- model.matrix(~group)
    rownames(design) <- samples
    
    # 差异表达过程，具体参数细节及输出结果解释，请参阅相关document
    # Differential expression analysis process. Refer to documentation for parameter details and result interpretation
    y <- DGEList(counts=countsTable[,samples],group=saminfo$Type)  # 创建DGEList对象 [Create DGEList object]
    y <- calcNormFactors(y)         # 计算标准化因子 [Calculate normalization factors]
    y <- estimateDisp(y, design, robust=TRUE)  # 估计离散度 [Estimate dispersion]
    fit <- glmFit(y, design)        # 拟合广义线性模型 [Fit generalized linear model]
    lrt <- glmLRT(fit)              # 进行似然比检验 [Perform likelihood ratio test]
    ordered_tags <- topTags(lrt, n=100000)  # 获取差异表达基因 [Get differentially expressed genes]
    allDiff=ordered_tags$table      # 提取差异表达结果表 [Extract differential expression results table]
    allDiff=allDiff[is.na(allDiff$FDR)==FALSE,]  # 过滤掉FDR为NA的行 [Filter out rows with NA FDR]
    diff=allDiff                    # 简化变量名 [Simplify variable name]
    
    # 整理结果表格 [Format result table]
    diff$id <- rownames(diff)
    res <- diff[,c("id","logFC","logCPM","LR","PValue","FDR")]
    colnames(res) <- c("id","log2FC","logCPM","LR","PValue","FDR")
    
    # 保存结果到文件 [Save results to file]
    write.table(res, file=outfile, row.names=F, col.names=T, sep="\t", quote=F)
    cat(k, ",")  # 输出进度 [Output progress]
  }
  options(warn=0)  # 恢复默认警告级别 [Restore default warning level]
}
输入文件
Input file
# 读取read count表达矩阵 [Read read count expression matrix]
# 参数说明：
# "easy_input_counts.txt" - 输入文件路径 [Input file path]
# sep = "\t" - 字段分隔符为制表符 [Field separator is tab]
# header = T - 文件包含表头 [File contains header]
# check.names = F - 不检查列名有效性 [Do not check column name validity]
# stringsAsFactors = F - 不将字符串转换为因子 [Do not convert strings to factors]
# row.names = 1 - 使用第一列作为行名 [Use first column as row names]
expr <- read.table("easy_input_counts.txt",sep = "\t",header = T,check.names = F,stringsAsFactors = F,row.names = 1)
expr[1:3, 1:3]  # 显示前3行3列数据 [Display first 3 rows and 3 columns of data]
# 读取亚型信息 [Read subtype information]
# 参数说明与上面类似 [Parameter explanations similar to above]
subt <- read.table("easy_input_subtype.txt", sep = "\t", check.names = F, stringsAsFactors = F, header = T, row.names = 1)
head(subt)  # 显示数据前几行 [Display first few rows of data]
# 获取唯一的亚型名称 [Get unique subtype names]
n.sub.label <- unique(subt$TCGA_Subtype)
n.sub.label  # 打印亚型名称 [Print subtype names]
# 计算亚型个数 [Calculate number of subtypes]
n.sub <- length(table(subt$TCGA_Subtype))
n.sub  # 打印亚型个数 [Print number of subtypes]
开始分析
Start analyzing
在当前文件夹会生成3个文件，可以作为FigureYa116supervisedCluster的输入：
SKCM_edgeR_test_result.immune_vs_Others.txt
SKCM_edgeR_test_result.keratin_vs_Others.txt
SKCM_edgeR_test_result.MITF-low_vs_Others.txt
如果想跟FigureYa109SubtypeGSEA无缝对接，就继续运行下面这段，生成degs.list，然后从FigureYa109SubtypeGSEA里的“自定义分析函数”开始运行，手动把“自定义分析函数”里第160行的
geneList <- degs$log2FoldChange
改为
geneList <- degs$log2FC
：
Three files will be generated in the current folder, which can be
used as input for FigureYa116supervisedCluster:
SKCM_edgeR_test_result.immune_vs_Others.txt
SKCM_edgeR_test_result.keratin_vs_Others.txt
SKCM_edgeR_test_result.MITF-low_vs_Others.txt
If you want to seamlessly integrate with FigureYa109SubtypeGSEA,
continue running the following paragraph to generate degs.list, and then
start running from “Custom Analysis Functions” in
FigureYa109SubtypeGSEA. Manually change the “geneList<- degs
$log2FoldChange” in line 160 of “Custom Analysis Functions” to
“geneList<- degs $log2FC”:
# 定义差异表达结果文件列表 [Define list of differential expression result files]
DEfiles <- c("SKCM_edgeR_test_result.immune_vs_Others.txt",
             "SKCM_edgeR_test_result.keratin_vs_Others.txt",
             "SKCM_edgeR_test_result.MITF-low_vs_Others.txt")

# 初始化差异表达基因数据框列表 [Initialize list to store differential expression gene data frames]
degs.list <- list()

# 循环读取每个差异表达分析结果文件 [Loop through each differential expression analysis result file]
for (i in 1:n.sub) {  # n.sub是之前计算的亚型数量 [n.sub is the number of subtypes calculated earlier]
  
  # 读取差异表达分析结果文件 [Read differential expression analysis result file]
  # 参数说明：
  # DEfiles[i] - 当前循环的文件名 [Name of current file in loop]
  # sep = "\t" - 使用制表符分隔 [Use tab as field separator]
  # header = T - 文件包含表头 [File contains header]
  # check.names = F - 不检查列名有效性 [Do not check column name validity]
  # stringsAsFactors = F - 不将字符串转换为因子 [Do not convert strings to factors]
  # row.names = 1 - 使用第一列作为行名 [Use first column as row names]
  degs <- read.table(DEfiles[i],sep = "\t",header = T,check.names = F,stringsAsFactors = F,row.names = 1)
  
  # 显示数据前几行 [Display first few rows of data]
  head(degs)
  
  # 将结果存入列表，使用亚型名称作为键，同时去除含有NA值的行 [Store results in list with subtype name as key, removing rows with NA values]
  degs.list[[n.sub.label[i]]] <- as.data.frame(na.omit(degs))  # n.sub.label是之前获取的亚型名称向量 [n.sub.label is the subtype name vector obtained earlier]
}
sessionInfo()