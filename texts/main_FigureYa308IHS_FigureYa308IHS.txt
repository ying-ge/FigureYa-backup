FigureYa308IHS
FigureYa308IHS
Author(s)
: Xiaofan Lu; Yasi Zhang
Reviewer(s)
: Ying Ge
Date
: 2025-05-20
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
Requirements Description
我想实现一下这篇文章里Figure5D，作者写了一个计算基因异质性的方法，然后用VIPER推断检查点蛋白活性以后计算了检查点蛋白的异质性，我想这个方法应该也可以用来计算其他种类蛋白的异质性，应该挺实用的。
FigureYa296VIPER跟这个不一样。这篇里面用的是新版的weighted
VIPER，和之前的算法不一样，而且这个图重点是IHS分数的计算，不仅是蛋白活性的计算。
I’d like to draw Figure 5D from this article. The author developed a
method to calculate gene heterogeneity, then used VIPER to infer
checkpoint protein activity before calculating the heterogeneity of
checkpoint proteins. I think this method could also be applied to
calculate heterogeneity for other types of proteins - it seems quite
practical.
FigureYa296VIPER is different from this one. Here, they used the new
weighted VIPER, which has a different algorithm from the previous
version. Moreover, the focus of this figure is on the calculation of IHS
scores, not just protein activity inference.
出自：
https://genomemedicine.biomedcentral.com/articles/10.1186/s13073-022-01143-6
图5. HCC中的免疫异质性。
D，9种共抑制性免疫检查点基因蛋白活性的IHS值。
虚线表示5099种蛋白质的中位IHS值。
Source:
https://genomemedicine.biomedcentral.com/articles/10.1186/s13073-022-01143-6
Fig. 5 Immune heterogeneity in HCC. D, IHS of protein activity of 9
co-inhibitory immune checkpoint genes. Dotted lines indicate the median
IHS value across 5099 proteins
应用场景
Requirements Description
通过weighted viper推断检查点蛋白活性并计算异质性。
更多异质性FigureYa
FigureYa114ternaryCluster，在一组样本中某个geneset表达谱变异很大时，
展示这个geneset的所有基因表达异质性
。
FigureYa223scNMF，适合
异质性较大的样本的聚类分析
。
FigureYa150diversityScore，用
单细胞DNA测序
数据计算diversity
score，用来评价肿瘤异质性。
FigureYa241scRNA_NMI，利用
单细胞
数据评估同一(时间点)肿瘤样本的
转录异质性
。
FigureYa308IHS，推断检查点
蛋白活性并计算异质性
。
FigureYa95pairwise，
多维度相关性
研究，可用于推断体细胞突变和免疫浸润在影响肿瘤异质性上的相关程度。
FigureYa216MetaREM，
meta分析
的异质性检验，给出Q和pvalue。
Infer checkpoint protein activity and calculate heterogeneity using
weighted VIPER.
For more heterogeneity figures
FigureYa114ternaryCluster: When the expression profile of a geneset
varies significantly in a group of samples, it
displays the
expression heterogeneity of all genes in this geneset
.
FigureYa223scNMF: Suitable for
cluster analysis of samples
with high heterogeneity
.
FigureYa150diversityScore: Uses
single-cell DNA
sequencing
data to calculate a diversity score, which evaluates
tumor heterogeneity.
FigureYa241scRNA_NMI: Utilizes
single-cell
data to
assess
transcriptional heterogeneity
within the same
tumor sample (at a given time point).
FigureYa308IHS: Infers checkpoint
protein activity and
calculates heterogeneity
.
FigureYa95pairwise:
Multi-dimensional correlation
analysis, useful for investigating the relationship between somatic
mutations and immune infiltration in influencing tumor
heterogeneity.
FigureYa216MetaREM:
Meta-analysis
heterogeneity
test, providing Q and p-value.
环境设置
Environment Setup
source("install_dependencies.R")
library(viper)
library(nlme)
library(spatstat.explore)
library(ggplot2)
library(ggrepel)

# 显示英文报错信息
# Show English error messages
Sys.setenv(LANGUAGE = "en") 

# 禁止chr转成factor
# Prevent character to factor conversion
options(stringsAsFactors = FALSE)
自定义函数以计算IHS
Custom function to calculate IHS
CalIHS <- function(vec, clin, method){
  # vec：各样本的活性值
  # clin：样本临床信息，样本顺序应当与活性值的顺序一致，应有Patient列标识样本的患者来源
  # method：nlme和hclust两种
  # 患者内肿瘤异质性越强，得分越高
  # vec: Activity values for each sample
  # clin: Clinical info (must contain 'Patient' column), sample order should match vec
  # method: 'nlme' or 'hclust' 
  # Higher scores indicate stronger intratumor heterogeneity
  
  IHS <- switch(
    method,
    "nlme" = {
      df <- cbind(clin, "regulon" = vec)
      fit <- lme(regulon~1, random=~1|Patient, data=df)
      var <- as.numeric(data.frame(as.character(VarCorr(fit)))[,1])
      
      var_sum <- data.frame(between_group=var[1],
                            within_group=var[2],
                            std1=var[3],
                            std2=var[4],
                            all=var[1]+var[2],
                            WT=var[2]/(var[1]+var[2]))
      return(var_sum$WT)
    },
    "hclust" = {
      hcs <- unlist(lapply(1:length(unique(clin$Patient)), function(x){
        hc = cutree(hclust(d = dist(vec), method = "ward.D2"), k = x)
        df = cbind(clin, "clust" = hc)
        df = split(df, df$Patient)
        sum(unlist(lapply(df, function(x) length(unique(x$clust)) == 1)))
      }))
      a = auc(ppp(x = (1:length(hcs))/length(hcs), y = hcs/length(hcs)), covariate = "x")
      1-a/(length(hcs-1))
    }
  )
}
输入文件
Input Files
Renji_cohort_MR_exp.matrix，样本表达矩阵。每行一个基因，每列一个样本。第一行是样本名，第一列是基因名。下载自
https://zenodo.org/record/7336311#.ZBE6xbRBzt0
easy_input_cli.csv，样本分组信息。共三列，第一列为样本名，跟表达矩阵里面的样本名一致；第二列是Patient
ID；第三列是该Patient的Sample ID。
Renji_cohort_MR_exp.matrix, the sample expression matrix. Each row
represents a gene, each column represents a sample. The first row
contains sample names, the first column contains gene names. Downloaded
from
https://zenodo.org/record/7336311#.ZBE6xbRBzt0
easy_input_cli.csv, the sample grouping information. Contains three
columns: the first column is sample names (matching those in the
expression matrix); the second column is Patient ID; the third column is
the Sample ID for each Patient.
# 工作目录路径
# Working directory path
work.path <- "."; #setwd(work.path)

# 存放脚本的路径
# Path for storing scripts
pkg.path <- file.path(work.path, "Packages") 

# 存放结果的路径
# Path for storing results 
res.path <- file.path(work.path, "Results") 

# 读取样本表达矩阵，构建样本分组信息
# Read expression matrix and build sample grouping info
expr <- read.table("Renji_cohort_MR_exp.matrix", header = T, row.names = 1)

# 去除正常样本(列名以"N"开头)
# Remove normal samples (columns starting with "N")
expr <- expr[, -grep("^N", colnames(expr))]

# 保存表达矩阵
# Save the expression matrix
saveRDS(expr, file.path(res.path, "expr.rds")) 

# 例文的样本名中带有分组信息，格式为：T患者编号_该患者的样本编号。我们从中提取出分组信息
# The sample names in example data contain grouping info with format: TPatientID_SampleID
#clin.info <- data.frame(row.names = colnames(expr),
#                        "Patient" = gsub("(.+)_(.+)", "\\1", colnames(expr)),
#                        "Sample" = gsub("(.+)_(.+)", "\\2", colnames(expr)))
#write.csv(clin.info, "easy_input_cli.csv", quote = F)

# 自己的数据，可以参考easy_input_cli.csv的格式提供分组信息
# For custom data, provide grouping info referencing easy_input_cli.csv format
clin.info <- read.csv("easy_input_cli.csv", header = T)
计算蛋白活性
Protein Activity Calculation
由于需要进行200次bootstrap，耗时较长大概在2天左右，请耐心等待。
Since 200 bootstrap iterations are required, the process will take
approximately 2 days to complete. Please wait patiently.
# pisce所在的文件夹
# Directory containing pisce 
pisce.path <- pkg.path 
system(paste("Rscript", file.path(pisce.path, "pisce.R"), # pisce主代码位置 | Main pisce script location
             file.path(pisce.path),                       # pisce输入数据路径 | Data directory for pisce
             file.path(res.path),                         # pisce结果存放位置 | Output directory for pisce results
             "human", "symbol", 1e-8, 200))               # 物种(human, mouse)，基因名称类型(ensg, symbol)、P值阈值，bootstrap次数 | Species (human/mouse), Gene ID type (ensg/symbol), P-value threshold, Bootstrap iterations
这里会生成
out_unPruned.rds
文件，用于下一步计算。
out_unPruned.rds
文件已上传至百度网盘，便于测试。下载地址：
https://pan.baidu.com/s/18_Q329zr_33edK2TSJYYnQ?pwd=a6hx
。下载后删除扩展名
.txt
，存入Result文件夹，即可继续往下运行。
An
out_unPruned.rds
file will be generated here, which
is used for the next step of calculation. The
out_unPruned.rds
file has been uploaded to Baidu Netdisk
for testing purposes. Download link:
https://pan.baidu.com/s/18_Q329zr_33edK2TSJYYnQ?pwd=a6hx
.
After downloading, delete the .txt file extension, save the file to the
“Result” folder, and then you can continue to run the subsequent
processes.
# 读取ARACNe网络推断结果
# Read ARACNe network results 
out_unPruned <- readRDS(file.path(res.path, "out_unPruned.rds")) 

# 使用VIPER计算蛋白活性矩阵
# Compute protein activity matrix using VIPER 
vip.mat <- viper(expr, out_unPruned, method = "none",     
                 eset.filter = FALSE, minsize = 5)
# 保存活性矩阵结果
# Save activity matrix
saveRDS(vip.mat, file.path(res.path, "vip.mat.rds"))
计算IHS
Calculating IHS
患者内肿瘤异质性越强，integrated heterogeneity score (IHS)
得分越高。
The higher the integrated heterogeneity score (IHS), the greater the
intratumor heterogeneity within patients.
# 读取蛋白活性矩阵
# Load protein activity matrix
vip.mat <- readRDS(file.path(res.path, "vip.mat.rds"))

# 计算整合异质性分数 (IHS) 
# Calculate Integrated Heterogeneity Score (IHS) 
IHS <- data.frame(
  "Protein" = rownames(vip.mat),
  "lme" = apply(vip.mat, 1, function(x){
    CalIHS(vec = x, clin = clin.info, method = "nlme")
  }),
  "hclust" = apply(vip.mat, 1, function(x){
    CalIHS(vec = x, clin = clin.info, method = "hclust")
  })
)

# 计算两种方法的几何平均数
# Compute geometric mean of two methodss
IHS$IHS <- sqrt(IHS$lme * IHS$hclust) 

# 保存结果文件
# Save results
write.table(IHS, file.path(res.path, "output_IHS.txt"), row.names = T, col.names = T, sep = "\t", quote = F)
开始画图
Plotting
# 自定义要在图中标注基因名的点
# Define genes to highlight in plot
to.plot <- c("CD47", "CEACAM1", "CD274", "LGALS9", "PDCD1", "CD160", "CD244", "LAG3", "CD48")

# 读取IHS评分结果
# Load IHS scores
IHS <- read.table(file.path(res.path, "output_IHS.txt"))

# 计算中位值作参考线
# Calculate median for reference line
medianIHS <- median(IHS$IHS)

# 准备绘图数据
# Prepare plotting data
plot.data <- data.frame(
  "protein" = IHS$Protein,
  "IHS" = IHS$IHS
)

# 创建标注列
# Create annotation columns 
plot.data$label <- ifelse(plot.data$protein %in% to.plot, plot.data$protein, NA)

# 配色方案：蓝色=目标基因，灰色=其他
# Color scheme: blue=highlighted, grey=others 
plot.data$color <- ifelse(plot.data$protein %in% to.plot, "deepskyblue3", "grey80")

# 点大小区分
# Size differentiation
plot.data$size <- ifelse(plot.data$protein %in% to.plot, 2, 1)

# 按IHS分数排序因子水平 
# Order proteins by IHS score
plot.data$protein <- factor(plot.data$protein, levels = plot.data$protein[order(plot.data$IHS)])

# 绘制落石图
# Generate dot plot
ggplot(plot.data, aes(x = protein, y = IHS, label = label)) +
  
  # 添加中位数参考线
  # Add median reference line
  geom_hline(yintercept = medianIHS, color="black", 
             linetype="longdash", lwd = 0.5) +
  
  # 基础点图
  # Base points 
  geom_point(col = plot.data$color, size = plot.data$size) +
  
  # 标签定位
  # Label positioning
  geom_label_repel() +
  #geom_text_repel() +
  
  # 颜色映射
  # Color mapping 
  scale_color_manual(values = c("deepskyblue3" = "deepskyblue3", "grey80" = "grey80")) +
  
  # 重新绘制高亮点确保图层顺序
  # Re-plot highlights for z-ordering 
  geom_point(mapping = aes(x = protein, y = IHS, col = color), data = plot.data[plot.data$color == "deepskyblue3", ]) +
  
  # 坐标轴标签
  # Axis labels 
  labs(x="Heterogeneity of protein activity of \n co-inhibitory checkpoint targets", y="Integrated heterogeneity score (IHS)", title="") + 
  
  # 主题设置
  # Theme customization
  theme_classic() +
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
  guides(color = "none")
# 保存图形
# Save plot
ggsave(file.path(res.path, "IHS.pdf"), width = 4, height = 4)
Session Info
sessionInfo()