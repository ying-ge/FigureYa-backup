FigureYa57 profile_1bw
FigureYa57 profile_1bw
Wen Wang, Taojun Ye
2025-09-22
Academic Citation
If you use this code in your work or research, we kindly request that
you cite our publication:
Xiaofan Lu, et al. (2025). FigureYa: A Standardized Visualization
Framework for Enhancing Biomedical Data Interpretation and Research
Efficiency. iMetaMed.
https://doi.org/10.1002/imm3.70005
需求描述
输入1个bw，多个bed，画出paper里的图。
Requirement description
Enter 1 BW, multiple beds, and draw the image in the paper.
出自
https://www.nature.com/articles/nature19362
from
https://www.nature.com/articles/nature19362
应用场景
对比多个region在同一个sample里的信号特征。例如展示高CpG、低CpG区域的ChIP-seq信号强度差异。
如果需要对比不同的样品在某一区域的信号特征，请看FigureYa44profile。
Application scenarios
Compare the signal characteristics of multiple regions in the same
sample. For example, showing the difference in ChIP seq signal strength
between high CpG and low CpG regions.
If you need to compare the signal characteristics of different
samples in a certain area, please refer to Figure Ya44 profile.
参数设置
在这里修改常见的需要调整的参数
Parameter settings
Modify common parameters that need to be adjusted here
source("install_dependencies.R")
# 需要`corelib.R`文件里的函数提取bw文件里的信号
# Requires functions from `corelib.R` to extract signals from bigWig files
source("./corelib.R") # 位于当前文件夹 # Located in the current directory
# 输出的pdf文件名
# Output PDF file name
outputName <- "multiSitepro_example.pdf" 

# bw文件，位于当前文件夹
# BigWig files located in the current directory
bigWigFile <- c("8cell.K4me3.bw") 

# bed文件，位于当前文件夹
# BED files located in the current directory
bedFiles <- c("mm9_HCP_tss.bed","mm9_ICP_tss.bed","mm9_LCP_tss.bed") 

# 图例标签，跟bed数量一致
# Legend labels, corresponding to the number of BED files
labels <- c("HCP","ICP","LCP") 

# 位点类型
# Site type
siteType <- "TSS"

# 分辨率，数值越低，画出来的曲线越平滑，运行时间越长
# Resolution: smaller values result in smoother curves but longer computation time
resolution <- 10 

# gene body normalization length，需要是resolution的整数倍
# Gene body normalization length, must be an integer multiple of resolution
span <- 2000 

# 留出一个核用来干别的事情
# Number of CPU cores to use (leaving one core available for other tasks)
coreNumber <- detectCores() - 1 

# 均一化的系数，根据展示所需信号值刻度调整
# Normalization constant to adjust signal intensity scaling
normalization_constant <- 1 

# 线的颜色，跟bed数量一致
# Line colors, corresponding to the number of BED files
colors <- c("darkorange","navy","darkgreen") 

# 如果对自己的电脑有信心，就改为0，不sampling
# Sampling configuration: 0 for no sampling, otherwise sample size per BED file
sampling_number <- 5000 # 0 for no sampling, smaller than each bed rows
输入文件
8cell.K4me3.bw：ChIP/DNase/ATAC-seq的bw文件
mm9_HCP_tss.bed, mm9_ICP_tss.bed,
mm9_LCP_tss.bed：用来提取bw信号的指定区域。其中第1、2、3、6列必需。
Input file
8cell.K4me3.bw: bw file for ChIP/DNase/ATAC seq
Mm9HCP_tss.bed, mm9_iCP_tss.bed, mm9_LCP_tss.bed: Used to extract the
designated area of the BW signal. The first, second, third, and sixth
columns are required.
信号提取
Signal extraction
# 初始化平均信号存储向量
# Initialize vector to store average signals
average_signal <- c()

# 循环处理每个BED文件
# Loop through each BED file
for(i in 1:length(bedFiles)){
  
  # 加载BED文件
  # Load BED file
  bed <- read.table(bedFiles[i])
  
  # 过滤非标准染色体（如包含"_"的contig）
  # Filter out non-standard chromosomes (e.g., contigs containing "_")
  isNormalChrosome <- !grepl("_",bed$V1)
  bed <- bed[isNormalChrosome,]
  
  # 随机抽样（如果需要）
  # Random sampling (if required)
  if(sampling_number != 0){
    set.seed(6666)  
    idx <- sample(1:nrow(bed),size=sampling_number)  
    bed <- bed[idx,]  
  }

  # 捕获位点周围的信号值
  # Capture signal values around sites
  average_signal <- rbind(average_signal,signal_caputer_around_sites(bigWigFile,bed,resolution=resolution,span=span,cores=as.integer(coreNumber)))
}

# 应用归一化系数
# Apply normalization constant
average_signal <- average_signal / normalization_constant

# 这步比较耗时，我们把抽取的信号保存到`average_signal.txt`文件里。
# This step is time-consuming. Save extracted signals to `average_signal.txt`.
write.table(average_signal,"average_signal.txt",quote = F,row.names = F,col.names = F)
开始画图
Start plot
# 从文件读取预处理好的平均信号数据
# Read preprocessed average signal data from file
average_signal <- read.table("average_signal.txt", header = F, as.is = T)

# 计算Y轴显示范围，添加适当边距
# Calculate Y-axis display range with padding
minimum <- min(average_signal) - (max(average_signal) - min(average_signal)) * 0.1
maximum <- max(average_signal) + (max(average_signal) - min(average_signal)) * 0.1 * length(bedFiles)

# 计算数据点数量（区域长度/分辨率）
# Calculate number of data points (region length/resolution)
datapoints <- span / resolution

# 打开PDF设备（取消注释以保存图表到文件）
# Open PDF device (uncomment to save plot to file)
#pdf(outputName,width = 4, height = 4)

# 绘制第一条曲线作为基础
# Plot the first curve as baseline
plot(1:(datapoints * 2 + 1), average_signal[1,], 
     type = "l", lwd = 3, col = colors[1],
     xaxt = "n", 
     xlab="Distance to TSS", ylab="Normalized signal", 
     ylim = c(minimum, maximum))

# 循环添加其余曲线
# Loop to add remaining curves
for(i in 2:length(bedFiles)){
  lines(1 : (datapoints*2+1), average_signal[i,], 
        lwd = 3, col = colors[i]) 
}

# 添加图例（右上角，无边框）
# Add legend (top-right corner, no border)
legend("topright", col=colors, 
       legend = labels, lty = 1, lwd = 3,
       bty = "n") 

# 添加边框（调整粗细）
# Add plot border (adjust thickness)
box(lwd = 2) 

# 自定义X轴刻度（显示为相对于TSS的距离）
# Customize X-axis ticks (show as distance relative to TSS)
axis(side=1, at=c(0, datapoints, datapoints*2) + 1, labels = c(paste(-1*span/1000, "kb"), siteType, paste(span/1000, "kb")))
# 关闭PDF设备（取消注释以保存图表）
# Close PDF device (uncomment to finalize saving)
#dev.off()
sessionInfo()